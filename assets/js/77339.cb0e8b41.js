/*! For license information please see 77339.cb0e8b41.js.LICENSE.txt */
"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[77339],{28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var s=r(96540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},23271:(e,t,r)=>{r.d(t,{QH:()=>Ti,XT:()=>oe,gT:()=>I});const s=typeof process<"u"&&"node"===(null==(n=process.release)?void 0:n.name)?"NODE":typeof window<"u"?"WEB":typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?"WORKER":"NODE";var n;if("NODE"===s){let e=function(e){return new Promise((function(t,r){e.onload=e.onerror=function(s){e.onload=e.onerror=null,"load"===s.type?t(e.result):r(new Error("Failed to read the blob/file"))}}))},t=function(){const e=new Uint8Array([1,2,3,4]),t=new File([e],"test").stream();try{return t.getReader({mode:"byob"}),!0}catch{return!1}};if(typeof File>"u"){class e extends Blob{constructor(e,t,r){let s;super(e),null!=r&&r.lastModified&&(s=new Date),(!s||isNaN(s.getFullYear()))&&(s=new Date),this.lastModifiedDate=s,this.lastModified=s.getMilliseconds(),this.name=t||""}}global.File=e}typeof Blob.prototype.arrayBuffer>"u"&&(Blob.prototype.arrayBuffer=function(){const t=new FileReader;return t.readAsArrayBuffer(this),e(t)}),typeof Blob.prototype.text>"u"&&(Blob.prototype.text=function(){const t=new FileReader;return t.readAsText(this),e(t)}),(typeof Blob.prototype.stream>"u"||!t())&&(Blob.prototype.stream=function(){let e=0;const t=this;return new ReadableStream({type:"bytes",autoAllocateChunkSize:524288,async pull(r){const s=r.byobRequest.view,n=await t.slice(e,e+s.byteLength).arrayBuffer(),i=new Uint8Array(n);new Uint8Array(s.buffer).set(i);const o=i.byteLength;r.byobRequest.respond(o),e+=o,e>=t.size&&r.close()}})})}if("NODE"===s&&typeof CustomEvent>"u"){class e extends Event{constructor(e,t={}){super(e,t),this.detail=t.detail}initCustomEvent(){}}globalThis.CustomEvent=e}"NODE"===s&&"function"!=typeof URL.canParse&&(globalThis.URL.canParse=function(e){try{return!!new URL(e)}catch{return!1}});const i=["db.php","plugins/akismet","plugins/hello.php","plugins/wordpress-importer","mu-plugins/sqlite-database-integration","mu-plugins/playground-includes","mu-plugins/0-playground.php","mu-plugins/0-sqlite.php","themes/twentytwenty","themes/twentytwentyone","themes/twentytwentytwo","themes/twentytwentythree","themes/twentytwentyfour","themes/twentytwentyfive","themes/twentytwentysix"],o=(e,...t)=>{m.dispatchEvent(new CustomEvent("playground-log",{detail:{log:e,args:t}}))},a=(e,...t)=>{switch("string"==typeof e.message?Reflect.set(e,"message",g(e.message)):e.message.message&&"string"==typeof e.message.message&&Reflect.set(e.message,"message",g(e.message.message)),e.severity){case"Debug":console.debug(e.message,...t);break;case"Info":console.info(e.message,...t);break;case"Warn":console.warn(e.message,...t);break;case"Error":case"Fatal":console.error(e.message,...t);break;default:console.log(e.message,...t)}},p=[],c=e=>{p.push(e)},f=e=>{if(!0===e.raw)c(e.message);else{const t=y("object"==typeof e.message?(e=>e instanceof Error?[e.message,e.stack].join("\n"):JSON.stringify(e,null,2))(e.message):e.message,e.severity??"Info",e.prefix??"JavaScript");c(t)}};let l=0;const h="/wordpress/wp-content/debug.log",d=(e,t)=>{t.addEventListener("request.end",(async()=>{const r=await(async e=>await e.fileExists(h)?await e.readFileAsText(h):"")(t);if(r.length>l){const t=r.substring(l);e.logMessage({message:t,raw:!0}),l=r.length}})),t.addEventListener("request.error",(t=>{t.error&&(e.logMessage({message:`${t.error.message} ${t.error.stack}`,severity:"Fatal",prefix:"request"===t.source?"PHP":"WASM Crash"}),e.dispatchEvent(new CustomEvent(e.fatalErrorEvent,{detail:{logs:e.getLogs(),source:t.source}})))}))};class u extends EventTarget{constructor(e=[]){super(),this.handlers=e,this.fatalErrorEvent="playground-fatal-error"}getLogs(){return this.handlers.includes(f)?[...p]:(this.error("Logs aren't stored because the logToMemory handler isn't registered.\n\t\t\t\tIf you're using a custom logger instance, make sure to register logToMemory handler.\n\t\t\t"),[])}logMessage(e,...t){for(const r of this.handlers)r(e,...t)}log(e,...t){this.logMessage({message:e,severity:void 0,prefix:"JavaScript",raw:!1},...t)}debug(e,...t){this.logMessage({message:e,severity:"Debug",prefix:"JavaScript",raw:!1},...t)}info(e,...t){this.logMessage({message:e,severity:"Info",prefix:"JavaScript",raw:!1},...t)}warn(e,...t){this.logMessage({message:e,severity:"Warn",prefix:"JavaScript",raw:!1},...t)}error(e,...t){this.logMessage({message:e,severity:"Error",prefix:"JavaScript",raw:!1},...t)}}const m=new u((()=>{try{0}catch{}return[f,a,o]})()),g=e=>e.replace(/\t/g,""),y=(e,t,r)=>{const s=new Date;return`[${new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"short",day:"2-digit",timeZone:"UTC"}).format(s).replace(/ /g,"-")+" "+new Intl.DateTimeFormat("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1,timeZone:"UTC",timeZoneName:"short"}).format(s)}] ${r} ${t}: ${e=g(e)}`},b=async(e,{pluginPath:t,pluginName:r},s)=>{null==s||s.tracker.setCaption(`Activating ${r||t}`);const n=await e.documentRoot,i=await e.run({code:"<?php\n\t\t\tdefine( 'WP_ADMIN', true );\n\t\t\trequire_once( getenv('DOCROOT') . \"/wp-load.php\" );\n\t\t\trequire_once( getenv('DOCROOT') . \"/wp-admin/includes/plugin.php\" );\n\n\t\t\t// Set current user to admin\n\t\t\twp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );\n\n\t\t\t$plugin_path = getenv('PLUGIN_PATH');\n\t\t\t$response = false;\n\t\t\tif ( ! is_dir( $plugin_path)) {\n\t\t\t\t$response = activate_plugin($plugin_path);\n\t\t\t}\n\n\t\t\t// Activate plugin by name if activation by path wasn't successful\n\t\t\tif ( null !== $response ) {\n\t\t\t\tforeach ( ( glob( $plugin_path . '/*.php' ) ?: array() ) as $file ) {\n\t\t\t\t\t$info = get_plugin_data( $file, false, false );\n\t\t\t\t\tif ( ! empty( $info['Name'] ) ) {\n\t\t\t\t\t\t$response = activate_plugin( $file );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( is_wp_error($response) ) {\n\t\t\t\tdie( $response->get_error_message() );\n\t\t\t} else if ( false === $response ) {\n\t\t\t\tdie( \"The activatePlugin step wasn't able to find the plugin $plugin_path.\" );\n\t\t\t}\n\t\t",env:{PLUGIN_PATH:t,DOCROOT:n}});i.text&&m.warn(`Plugin ${t} activation printed the following bytes: ${i.text}`);const o=await e.run({code:"<?php\n\t\t\tob_start();\n\t\t\trequire_once( getenv( 'DOCROOT' ) . \"/wp-load.php\" );\n\n\t\t\t/**\n\t\t\t * Extracts the relative plugin path from either an absolute or relative plugin path.\n\t\t\t *\n\t\t\t * Absolute paths starting with plugin directory (e.g., '/wordpress/wp-content/plugins/test-plugin/index.php')\n\t\t\t * should be converted to relative paths (e.g., 'test-plugin/index.php')\n\t\t\t *\n\t\t\t * Directories should finish with a trailing slash to ensure we match the full plugin directory name.\n\t\t\t *\n\t\t\t * Examples:\n\t\t\t * - '/wordpress/wp-content/plugins/test-plugin/index.php' \u2192 'test-plugin/index.php'\n\t\t\t * - '/wordpress/wp-content/plugins/test-plugin/' \u2192 'test-plugin/'\n\t\t\t * - '/wordpress/wp-content/plugins/test-plugin' \u2192 'test-plugin/'\n\t\t\t * - 'test-plugin/index.php' \u2192 'test-plugin/index.php'\n\t\t\t * - 'test-plugin/' \u2192 'test-plugin/'\n\t\t\t * - 'test-plugin' \u2192 'test-plugin/'\n\t\t\t */\n\t\t\t$plugin_directory = WP_PLUGIN_DIR . '/';\n\t\t\t$relative_plugin_path = getenv( 'PLUGIN_PATH' );\n\t\t\tif (strpos($relative_plugin_path, $plugin_directory) === 0) {\n\t\t\t\t$relative_plugin_path = substr($relative_plugin_path, strlen($plugin_directory));\n\t\t\t}\n\n\t\t\tif ( is_dir( $plugin_directory . $relative_plugin_path ) ) {\n\t\t\t\t$relative_plugin_path = rtrim( $relative_plugin_path, '/' ) . '/';\n\t\t\t}\n\n\t\t\t$active_plugins = get_option( 'active_plugins' );\n\t\t\tforeach ( $active_plugins as $plugin ) {\n\t\t\t\tif ( substr( $plugin, 0, strlen( $relative_plugin_path ) ) === $relative_plugin_path ) {\n\t\t\t\t\tob_end_clean();\n\t\t\t\t\tdie( 'true' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdie( ob_get_flush() ?: 'false' );\n\t\t",env:{DOCROOT:n,PLUGIN_PATH:t}});if("true"!==o.text)throw"false"!==o.text&&m.debug(o.text),new Error(`Plugin ${t} could not be activated \u2013 WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details.`)},w=async(e,{themeFolderName:t},r)=>{null==r||r.tracker.setCaption(`Activating ${t}`);const s=await e.documentRoot,n=`${s}/wp-content/themes/${t}`;if(!await e.fileExists(n))throw new Error(`\n\t\t\tCouldn't activate theme ${t}.\n\t\t\tTheme not found at the provided theme path: ${n}.\n\t\t\tCheck the theme path to ensure it's correct.\n\t\t\tIf the theme is not installed, you can install it using the installTheme step.\n\t\t\tMore info can be found in the Blueprint documentation: https://wordpress.github.io/wordpress-playground/blueprints/steps/#ActivateThemeStep\n\t\t`);const i=await e.run({code:"<?php\n\t\t\tdefine( 'WP_ADMIN', true );\n\t\t\trequire_once( getenv('docroot') . \"/wp-load.php\" );\n\n\t\t\t// Set current user to admin\n\t\t\twp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );\n\n\t\t\tswitch_theme( getenv('themeFolderName') );\n\n\t\t\tif( wp_get_theme()->get_stylesheet() !== getenv('themeFolderName') ) {\n\t\t\t\tthrow new Exception( 'Theme ' . getenv('themeFolderName') . ' could not be activated.' );\t\t\t\t\n\t\t\t}\n\t\t\tdie('Theme activated successfully');\n\t\t",env:{docroot:s,themeFolderName:t}});if("Theme activated successfully"!==i.text)throw m.debug(i),new Error(`Theme ${t} could not be activated \u2013 WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details`)},P=async(e,{path:t})=>{await e.unlink(t)},v=Symbol("SleepFinished");function A(e){return new Promise((t=>{setTimeout((()=>t(v)),e)}))}class O extends Error{constructor(){super("Acquiring lock timed out")}}class S{constructor({concurrency:e,timeout:t}){this._running=0,this.concurrency=e,this.timeout=t,this.queue=[]}get remaining(){return this.concurrency-this.running}get running(){return this._running}async acquire(){for(;;){if(!(this._running>=this.concurrency)){this._running++;let e=!1;return()=>{e||(e=!0,this._running--,this.queue.length>0&&this.queue.shift()())}}{const e=new Promise((e=>{this.queue.push(e)}));void 0!==this.timeout?await Promise.race([e,A(this.timeout)]).then((e=>{if(e===v)throw new O})):await e}}}async run(e){const t=await this.acquire();try{return await e()}finally{t()}}}function T(...e){function t(e){return"/"===e.substring(e.length-1)}let r=e.join("/");const s="/"===r[0],n=t(r);return r=E(r),!r&&!s&&(r="."),r&&n&&!t(r)&&(r+="/"),r}function k(e){if("/"===e)return"/";const t=(e=E(e)).lastIndexOf("/");return-1===t?"":0===t?"/":e.substr(0,t)}function E(e){const t="/"===e[0];return e=function(e,t){let r=0;for(let s=e.length-1;s>=0;s--){const t=e[s];"."===t?e.splice(s,1):".."===t?(e.splice(s,1),r++):r&&(e.splice(s,1),r--)}if(t)for(;r;r--)e.unshift("..");return e}(e.split("/").filter((e=>!!e)),!t).join("/"),(t?"/":"")+e.replace(/\/$/,"")}function C(e=36,t="!@#$%^&*()_+=-[]/.,<>?"){const r="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"+t;let s="";for(let n=e;n>0;--n)s+=r[Math.floor(Math.random()*r.length)];return s}function q(e){return`json_decode(base64_decode('${function(e){return function(e){const t=String.fromCodePoint(...e);return btoa(t)}((new TextEncoder).encode(e))}(JSON.stringify(e))}'), true)`}function D(e){const t={};for(const r in e)t[r]=q(e[r]);return t}const x="<?php\n\n/**\n * Rewrites the wp-config.php file to ensure specific constants are defined\n * with specific values.\n * \n * Example:\n * \n * ```php\n * <?php\n * define('WP_DEBUG', true);\n * // The third define() argument is also supported:\n * define('SAVEQUERIES', false, true);\n * \n * // Expression\n * define(true ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG', 123);\n * \n * // Guarded expressions shouldn't be wrapped twice\n * if(!defined(1 ? 'A' : 'B')) {\n *     define(1 ? 'A' : 'B', 0);\n * }\n * \n * // More advanced expression\n * define((function() use($x) {\n *     return [$x, 'a'];\n * })(), 123);\n * ```\n * \n * Rewritten with\n * \n *     $constants = [\n *        'WP_DEBUG' => false,\n *        'WP_DEBUG_LOG' => true,\n *        'SAVEQUERIES' => true,\n *        'NEW_CONSTANT' => \"new constant\",\n *     ];\n * \n * ```php\n * <?php\n * define('WP_DEBUG_LOG',true);\n * define('NEW_CONSTANT','new constant');\n * ?><?php\n * define('WP_DEBUG',false);\n * // The third define() argument is also supported:\n * define('SAVEQUERIES',true, true);\n * \n * // Expression\n * if(!defined($const ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG')) {\n *      define($const ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG', 123);\n * }\n * \n * // Guarded expressions shouldn't be wrapped twice\n * if(!defined(1 ? 'A' : 'B')) {\n *     define(1 ? 'A' : 'B', 0);\n * }\n * \n * // More advanced expression\n * if(!defined((function() use($x) {\n *    return [$x, 'a'];\n * })())) {\n *     define((function() use($x) {\n *         return [$x, 'a'];\n *     })(), 123);\n * }\n * ```\n * \n * @param mixed $content\n * @return string\n */\nfunction rewrite_wp_config_to_define_constants($content, $constants = [])\n{\n    $tokens = array_reverse(token_get_all($content));\n    $output = [];\n    $defined_expressions = [];\n\n    // Look through all the tokens and find the define calls\n    do {\n        $buffer = [];\n        $name_buffer = [];\n        $value_buffer = [];\n        $third_arg_buffer = [];\n\n        // Capture everything until the define call into output.\n        // Capturing the define call into a buffer.\n        // Example:\n        //     <?php echo 'a'; define  (\n        //     ^^^^^^^^^^^^^^^^^^^^^^\n        //           output   |buffer\n        while ($token = array_pop($tokens)) {\n            if (is_array($token) && $token[0] === T_STRING && (strtolower($token[1]) === 'define' || strtolower($token[1]) === 'defined')) {\n                $buffer[] = $token;\n                break;\n            }\n            $output[] = $token;\n        }\n\n        // Maybe we didn't find a define call and reached the end of the file?\n        if (!count($tokens)) {\n            break;\n        }\n\n        // Keep track of the \"defined\" expressions that are already accounted for\n        if($token[1] === 'defined') {\n            $output[] = $token;\n            $defined_expression = [];\n            $open_parenthesis = 0;\n            // Capture everything up to the opening parenthesis, including the parenthesis\n            // e.g. defined  (\n            //           ^^^^\n            while ($token = array_pop($tokens)) {\n                $output[] = $token;\n                if ($token === \"(\") {\n                    ++$open_parenthesis;\n                    break;\n                }\n            }\n\n            // Capture everything up to the closing parenthesis, including the parenthesis\n            // e.g. defined  (\n            //           ^^^^\n            while ($token = array_pop($tokens)) {\n                $output[] = $token;\n                if ($token === \")\") {\n                    --$open_parenthesis;\n                }\n                if ($open_parenthesis === 0) {\n                    break;\n                }\n                $defined_expression[] = $token;\n            }\n\n            $defined_expressions[] = stringify_tokens(skip_whitespace($defined_expression));\n            continue;\n        }\n\n        // Capture everything up to the opening parenthesis, including the parenthesis\n        // e.g. define  (\n        //           ^^^^\n        while ($token = array_pop($tokens)) {\n            $buffer[] = $token;\n            if ($token === \"(\") {\n                break;\n            }\n        }\n\n        // Capture the first argument \u2013 it's the first expression after the opening\n        // parenthesis and before the comma:\n        // Examples:\n        //     define(\"WP_DEBUG\", true);\n        //            ^^^^^^^^^^^\n        //\n        //     define(count([1,2]) > 2 ? 'WP_DEBUG' : 'FOO', true);\n        //            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        $open_parenthesis = 0;\n        while ($token = array_pop($tokens)) {\n            $buffer[] = $token;\n            if ($token === \"(\" || $token === \"[\" || $token === \"{\") {\n                ++$open_parenthesis;\n            } elseif ($token === \")\" || $token === \"]\" || $token === \"}\") {\n                --$open_parenthesis;\n            } elseif ($token === \",\" && $open_parenthesis === 0) {\n                break;\n            }\n\n            // Don't capture the comma as a part of the constant name\n            $name_buffer[] = $token;\n        }\n\n        // Capture everything until the closing parenthesis\n        //     define(\"WP_DEBUG\", true);\n        //                       ^^^^^^\n        $open_parenthesis = 0;\n        $is_second_argument = true;\n        while ($token = array_pop($tokens)) {\n            $buffer[] = $token;\n            if ($token === \")\" && $open_parenthesis === 0) {\n                // Final parenthesis of the define call.\n                break;\n            } else if ($token === \"(\" || $token === \"[\" || $token === \"{\") {\n                ++$open_parenthesis;\n            } elseif ($token === \")\" || $token === \"]\" || $token === \"}\") {\n                --$open_parenthesis;\n            } elseif ($token === \",\" && $open_parenthesis === 0) {\n                // This define call has more than 2 arguments! The third one is the\n                // boolean value indicating $is_case_insensitive. Let's continue capturing\n                // to $third_arg_buffer.\n                $is_second_argument = false;\n            }\n            if ($is_second_argument) {\n                $value_buffer[] = $token;\n            } else {\n                $third_arg_buffer[] = $token;\n            }\n        }\n\n        // Capture until the semicolon\n        //     define(\"WP_DEBUG\", true)  ;\n        //                             ^^^\n        while ($token = array_pop($tokens)) {\n            $buffer[] = $token;\n            if ($token === \";\") {\n                break;\n            }\n        }\n\n        // Decide whether $name_buffer is a constant name or an expression\n        $name_token = null;\n        $name_token_index = $token;\n        $name_is_literal = true;\n        foreach ($name_buffer as $k => $token) {\n            if (is_array($token)) {\n                if ($token[0] === T_WHITESPACE || $token[0] === T_COMMENT || $token[0] === T_DOC_COMMENT) {\n                    continue;\n                } else if ($token[0] === T_STRING || $token[0] === T_CONSTANT_ENCAPSED_STRING) {\n                    $name_token = $token;\n                    $name_token_index = $k;\n                } else {\n                    $name_is_literal = false;\n                    break;\n                }\n            } else if ($token !== \"(\" && $token !== \")\") {\n                $name_is_literal = false;\n                break;\n            }\n        }\n\n        // We can't handle expressions as constant names. Let's wrap that define\n        // call in an if(!defined()) statement, just in case it collides with\n        // a constant name.\n        if (!$name_is_literal) {\n            // Ensure the defined expression is not already accounted for\n            foreach ($defined_expressions as $defined_expression) {\n                if ($defined_expression === stringify_tokens(skip_whitespace($name_buffer))) {\n                    $output = array_merge($output, $buffer);\n                    continue 2;\n                }\n            }\n            $output = array_merge(\n                $output,\n                [\"if(!defined(\"],\n                $name_buffer,\n                [\")) {\\n     \"],\n                ['define('],\n                $name_buffer,\n                [','],\n                $value_buffer,\n                $third_arg_buffer,\n                [\");\"],\n                [\"\\n}\\n\"]\n            );\n            continue;\n        }\n\n        // Yay, we have a literal constant name in the buffer now. Let's\n        // get its value:\n        $name = eval('return ' . $name_token[1] . ';');\n\n        // If the constant name is not in the list of constants we're looking,\n        // we can ignore it.\n        if (!array_key_exists($name, $constants)) {\n            $output = array_merge($output, $buffer);\n            continue;\n        }\n\n        // We now have a define() call that defines a constant we're looking for.\n        // Let's rewrite its value to the one \n        $output = array_merge(\n            $output,\n            ['define('],\n            $name_buffer,\n            [','],\n            [var_export($constants[$name], true)],\n            $third_arg_buffer,\n            [\");\"]\n        );\n\n        // Remove the constant from the list so we can process any remaining\n        // constants later.\n        unset($constants[$name]);\n    } while (count($tokens));\n\n    // Add any constants that weren't found in the file\n    if (count($constants)) {\n        $prepend = [\n            \"<?php \\n\"\n        ];\n        foreach ($constants as $name => $value) {\n            $prepend = array_merge(\n                $prepend,\n                [\n                    \"define(\",\n                    var_export($name, true),\n                    ',',\n                    var_export($value, true),\n                    \");\\n\"\n                ]\n            );\n        }\n        $prepend[] = \"?>\";\n        $output = array_merge(\n            $prepend,\n            $output\n        );\n    }\n\n    // Translate the output tokens back into a string\n    return stringify_tokens($output);\n}\n\nfunction stringify_tokens($tokens) {\n    $output = '';\n    foreach ($tokens as $token) {\n        if (is_array($token)) {\n            $output .= $token[1];\n        } else {\n            $output .= $token;\n        }\n    }\n    return $output;\n}\n\nfunction skip_whitespace($tokens) {\n    $output = [];\n    foreach ($tokens as $token) {\n        if (is_array($token) && ($token[0] === T_WHITESPACE || $token[0] === T_COMMENT || $token[0] === T_DOC_COMMENT)) {\n            continue;\n        }\n        $output[] = $token;\n    }\n    return $output;\n}\n",j=async(e,{consts:t,method:r="define-before-run"})=>{switch(r){case"define-before-run":await async function(e,t){for(const r in t)await e.defineConstant(r,t[r])}(e,t);break;case"rewrite-wp-config":{const r=T(await e.documentRoot,"/wp-config.php"),s=await e.readFileAsText(r),n=await async function(e,t,r){await e.writeFile("/tmp/code.php",t);const s=D({consts:r});return await e.run({code:`${x}\n\t$wp_config_path = '/tmp/code.php';\n\t$wp_config = file_get_contents($wp_config_path);\n\t$new_wp_config = rewrite_wp_config_to_define_constants($wp_config, ${s.consts});\n\tfile_put_contents($wp_config_path, $new_wp_config);\n\t`}),await e.readFileAsText("/tmp/code.php")}(e,s,t);await e.writeFile(r,n);break}default:throw new Error(`Invalid method: ${r}`)}};const H=async(e,{options:t})=>{const r=await e.documentRoot;await e.run({code:`<?php\n\t\tinclude ${q(r)} . '/wp-load.php';\n\t\t$site_options = ${q(t)};\n\t\tforeach($site_options as $name => $value) {\n\t\t\tupdate_option($name, $value);\n\t\t}\n\t\techo "Success";\n\t\t`})},B="/tmp/wp-cli.phar",L={resource:"url",url:"https://playground.wordpress.net/wp-cli.phar"},R=async(e,t=B)=>{if(!await e.fileExists(t))throw new Error(`wp-cli.phar not found at ${t}.\n\t\t\tYou can enable wp-cli support by adding "wp-cli" to the list of extra libraries in your blueprint as follows:\n\t\t\t{\n\t\t\t\t"extraLibraries": [ "wp-cli" ]\n\t\t\t}\n\t\t\tRead more about it in the documentation.\n\t\t\thttps://wordpress.github.io/wordpress-playground/blueprints/data-format#extra-libraries`)},I=async(e,{command:t,wpCliPath:r=B})=>{let s;if(await R(e,r),"string"==typeof t?s=function(e){let t=0,r="";const s=[];let n="";for(let i=0;i<e.length;i++){const o=e[i];0===t?'"'===o||"'"===o?(t=1,r=o):o.match(/\s/)?(n&&s.push(n),n=""):n+=o:1===t&&("\\"===o?(i++,n+=e[i]):o===r?(t=0,r=""):n+=o)}return n&&s.push(n),s}(t=t.trim()):s=t,"wp"!==s.shift())throw new Error('The first argument must be "wp".');const n=await e.documentRoot;await e.writeFile("/tmp/stdout",""),await e.writeFile("/tmp/stderr",""),await e.writeFile(T(n,"run-cli.php"),`<?php\n\t\t// Set up the environment to emulate a shell script\n\t\t// call.\n\n\t\t// Set SHELL_PIPE to 0 to ensure WP-CLI formats\n\t\t// the output as ASCII tables.\n\t\t// @see https://github.com/wp-cli/wp-cli/issues/1102\n\t\tputenv( 'SHELL_PIPE=0' );\n\n\t\t// Set the argv global.\n\t\t$GLOBALS['argv'] = array_merge([\n\t\t  "/tmp/wp-cli.phar",\n\t\t  "--path=${n}"\n\t\t], ${q(s)});\n\n\t\t// Provide stdin, stdout, stderr streams outside of\n\t\t// the CLI SAPI.\n\t\tdefine('STDIN', fopen('php://stdin', 'rb'));\n\t\tdefine('STDOUT', fopen('php://stdout', 'wb'));\n\t\tdefine('STDERR', fopen('php://stderr', 'wb'));\n\n\t\trequire( ${q(r)} );\n\t\t`);const i=await e.run({scriptPath:T(n,"run-cli.php")});if(i.errors)throw new Error(i.errors);return i};const N=async(e,{path:t,data:r})=>{r instanceof File&&(r=new Uint8Array(await r.arrayBuffer())),t.startsWith("/wordpress/wp-content/mu-plugins")&&!await e.fileExists("/wordpress/wp-content/mu-plugins")&&await e.mkdir("/wordpress/wp-content/mu-plugins"),await e.writeFile(t,r)},W={0:"No error occurred. System call completed successfully.",1:"Argument list too long.",2:"Permission denied.",3:"Address in use.",4:"Address not available.",5:"Address family not supported.",6:"Resource unavailable, or operation would block.",7:"Connection already in progress.",8:"Bad file descriptor.",9:"Bad message.",10:"Device or resource busy.",11:"Operation canceled.",12:"No child processes.",13:"Connection aborted.",14:"Connection refused.",15:"Connection reset.",16:"Resource deadlock would occur.",17:"Destination address required.",18:"Mathematics argument out of domain of function.",19:"Reserved.",20:"File exists.",21:"Bad address.",22:"File too large.",23:"Host is unreachable.",24:"Identifier removed.",25:"Illegal byte sequence.",26:"Operation in progress.",27:"Interrupted function.",28:"Invalid argument.",29:"I/O error.",30:"Socket is connected.",31:"There is a directory under that path.",32:"Too many levels of symbolic links.",33:"File descriptor value too large.",34:"Too many links.",35:"Message too large.",36:"Reserved.",37:"Filename too long.",38:"Network is down.",39:"Connection aborted by network.",40:"Network unreachable.",41:"Too many files open in system.",42:"No buffer space available.",43:"No such device.",44:"There is no such file or directory OR the parent directory does not exist.",45:"Executable file format error.",46:"No locks available.",47:"Reserved.",48:"Not enough space.",49:"No message of the desired type.",50:"Protocol not available.",51:"No space left on device.",52:"Function not supported.",53:"The socket is not connected.",54:"Not a directory or a symbolic link to a directory.",55:"Directory not empty.",56:"State not recoverable.",57:"Not a socket.",58:"Not supported, or operation not supported on socket.",59:"Inappropriate I/O control operation.",60:"No such device or address.",61:"Value too large to be stored in data type.",62:"Previous owner died.",63:"Operation not permitted.",64:"Broken pipe.",65:"Protocol error.",66:"Protocol not supported.",67:"Protocol wrong type for socket.",68:"Result too large.",69:"Read-only file system.",70:"Invalid seek.",71:"No such process.",72:"Reserved.",73:"Connection timed out.",74:"Text file busy.",75:"Cross-device link.",76:"Extension: Capabilities insufficient."};function z(e=""){return function(t,r,s){const n=s.value;s.value=function(...t){try{return n.apply(this,t)}catch(r){const s="object"==typeof r?null==r?void 0:r.errno:null;if(s in W){const n=W[s],i="string"==typeof t[1]?t[1]:null,o=null!==i?e.replaceAll("{path}",i):e;throw new Error(`${o}: ${n}`,{cause:r})}throw r}}}}var F=Object.defineProperty,K=Object.getOwnPropertyDescriptor,U=(e,t,r,s)=>{for(var n,i=s>1?void 0:s?K(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(i=(s?n(t,r,i):n(i))||i);return s&&i&&F(t,r,i),i};const V=class e{static readFileAsText(t,r){return(new TextDecoder).decode(e.readFileAsBuffer(t,r))}static readFileAsBuffer(e,t){return e.readFile(t)}static writeFile(e,t,r){e.writeFile(t,r)}static unlink(e,t){e.unlink(t)}static mv(t,r,s){try{const n=t.lookupPath(r).node.mount,i=e.fileExists(t,s)?t.lookupPath(s).node.mount:t.lookupPath(k(s)).node.mount;n.mountpoint!==i.mountpoint?(e.copyRecursive(t,r,s),e.isDir(t,r)?e.rmdir(t,r,{recursive:!0}):t.unlink(r)):t.rename(r,s)}catch(n){const e=function(e){const t="object"==typeof e?null==e?void 0:e.errno:null;if(t in W)return W[t]}(n);throw e?new Error(`Could not move ${r} to ${s}: ${e}`,{cause:n}):n}}static rmdir(t,r,s={recursive:!0}){null!=s&&s.recursive&&e.listFiles(t,r).forEach((n=>{const i=`${r}/${n}`;e.isDir(t,i)?e.rmdir(t,i,s):e.unlink(t,i)})),t.rmdir(r)}static listFiles(t,r,s={prependPath:!1}){if(!e.fileExists(t,r))return[];try{const e=t.readdir(r).filter((e=>"."!==e&&".."!==e));if(s.prependPath){const t=r.replace(/\/$/,"");return e.map((e=>`${t}/${e}`))}return e}catch(n){return m.error(n,{path:r}),[]}}static isDir(t,r){return!!e.fileExists(t,r)&&t.isDir(t.lookupPath(r,{follow:!0}).node.mode)}static isFile(t,r){return!!e.fileExists(t,r)&&t.isFile(t.lookupPath(r,{follow:!0}).node.mode)}static symlink(e,t,r){return e.symlink(t,r)}static isSymlink(t,r){return!!e.fileExists(t,r)&&t.isLink(t.lookupPath(r).node.mode)}static readlink(e,t){return e.readlink(t)}static realpath(e,t){return e.lookupPath(t,{follow:!0}).path}static fileExists(e,t){try{return e.lookupPath(t),!0}catch{return!1}}static mkdir(e,t){e.mkdirTree(t)}static copyRecursive(t,r,s){const n=t.lookupPath(r).node;if(t.isDir(n.mode)){t.mkdirTree(s);const n=t.readdir(r).filter((e=>"."!==e&&".."!==e));for(const i of n)e.copyRecursive(t,T(r,i),T(s,i))}else t.writeFile(s,t.readFile(r))}};U([z('Could not read "{path}"')],V,"readFileAsText",1),U([z('Could not read "{path}"')],V,"readFileAsBuffer",1),U([z('Could not write to "{path}"')],V,"writeFile",1),U([z('Could not unlink "{path}"')],V,"unlink",1),U([z('Could not remove directory "{path}"')],V,"rmdir",1),U([z('Could not list files in "{path}"')],V,"listFiles",1),U([z('Could not stat "{path}"')],V,"isDir",1),U([z('Could not stat "{path}"')],V,"isFile",1),U([z('Could not stat "{path}"')],V,"realpath",1),U([z('Could not stat "{path}"')],V,"fileExists",1),U([z('Could not create directory "{path}"')],V,"mkdir",1),U([z('Could not copy files from "{path}"')],V,"copyRecursive",1);const M={500:"Internal Server Error",502:"Bad Gateway",404:"Not Found",403:"Forbidden",401:"Unauthorized",400:"Bad Request",301:"Moved Permanently",302:"Found",307:"Temporary Redirect",308:"Permanent Redirect",204:"No Content",201:"Created",200:"OK"};class Z{constructor(e,t,r,s="",n=0){this.httpStatusCode=e,this.headers=t,this.bytes=r,this.exitCode=n,this.errors=s}static forHttpCode(e,t=""){return new Z(e,{},(new TextEncoder).encode(t||M[e]||""))}static fromRawData(e){return new Z(e.httpStatusCode,e.headers,e.bytes,e.errors,e.exitCode)}toRawData(){return{headers:this.headers,bytes:this.bytes,errors:this.errors,exitCode:this.exitCode,httpStatusCode:this.httpStatusCode}}get json(){return JSON.parse(this.text)}get text(){return(new TextDecoder).decode(this.bytes)}}!function(){var e;typeof process<"u"&&"node"===(null==(e=process.release)?void 0:e.name)||(typeof window<"u"||typeof WorkerGlobalScope<"u"&&(self,WorkerGlobalScope))}();function X(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}const{hasOwnProperty:Y}=Object.prototype;ReadableStream.prototype[Symbol.asyncIterator]||(ReadableStream.prototype[Symbol.asyncIterator]=async function*(){const e=this.getReader();try{for(;;){const{done:t,value:r}=await e.read();if(t)return;yield r}}finally{e.releaseLock()}},ReadableStream.prototype.iterate=ReadableStream.prototype[Symbol.asyncIterator]);const G=["8.4","8.3","8.2","8.1","8.0","7.4","7.3","7.2","7.1","7.0"],Q=G[0];async function J(e,t,r,{rmRoot:s=!1}={}){s&&await e.isDir(t)&&await e.rmdir(t,{recursive:!0});for(const[n,i]of Object.entries(r)){const r=T(t,n);await e.fileExists(k(r))||await e.mkdir(k(r)),i instanceof Uint8Array||"string"==typeof i?await e.writeFile(r,i):await J(e,r,i)}}const _=async(e,{siteUrl:t})=>{await j(e,{consts:{WP_HOME:t,WP_SITEURL:t}})};const $=async(e,{themeSlug:t=""},r)=>{var s;null==(s=null==r?void 0:r.tracker)||s.setCaption("Importing theme starter content");const n=await e.documentRoot;await e.run({code:`<?php\n\n\t\t/**\n\t\t * Ensure that the customizer loads as an admin user.\n\t\t *\n\t\t * For compatibility with themes, this MUST be run prior to theme inclusion, which is why this is a plugins_loaded filter instead\n\t\t * of running _wp_customize_include() manually after load.\n\t\t */\n\t\tfunction importThemeStarterContent_plugins_loaded() {\n\t\t\t// Set as the admin user, this ensures we can customize the site.\n\t\t\twp_set_current_user(\n\t\t\t\tget_users( [ 'role' => 'Administrator' ] )[0]\n\t\t\t);\n\n\t\t\t// Force the site to be fresh, although it should already be.\n\t\t\tadd_filter( 'pre_option_fresh_site', '__return_true' );\n\n\t\t\t/*\n\t\t\t * Simulate this request as the customizer loading with the current theme in preview mode.\n\t\t\t *\n\t\t\t * See _wp_customize_include()\n\t\t\t */\n\t\t\t$_REQUEST['wp_customize']    = 'on';\n\t\t\t$_REQUEST['customize_theme'] = ${q(t)} ?: get_stylesheet();\n\n\t\t\t/*\n\t\t\t * Claim this is a ajax request saving settings, to avoid the preview filters being applied.\n\t\t\t */\n\t\t\t$_REQUEST['action'] = 'customize_save';\n\t\t\tadd_filter( 'wp_doing_ajax', '__return_true' );\n\n\t\t\t$_GET = $_REQUEST;\n\t\t}\n\t\tplayground_add_filter( 'plugins_loaded', 'importThemeStarterContent_plugins_loaded', 0 );\n\n\t\trequire ${q(n)} . '/wp-load.php';\n\n\t\t// Return early if there's no starter content.\n\t\tif ( ! get_theme_starter_content() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Import the Starter Content.\n\t\t$wp_customize->import_theme_starter_content();\n\n\t\t// Publish the changeset, which publishes the starter content.\n\t\twp_publish_post( $wp_customize->changeset_post_id() );\n\t\t`})};const ee="/tmp/file.zip",te=async(e,t,r,s=!0)=>{if(t instanceof File){const r=t;t=ee,await e.writeFile(t,new Uint8Array(await r.arrayBuffer()))}const n=D({zipPath:t,extractToPath:r,overwriteFiles:s});await e.run({code:`<?php\n        function unzip($zipPath, $extractTo, $overwriteFiles = true)\n        {\n            if (!is_dir($extractTo)) {\n                mkdir($extractTo, 0777, true);\n            }\n            $zip = new ZipArchive;\n            $res = $zip->open($zipPath);\n            if ($res === TRUE) {\n\t\t\t\tfor ($i = 0; $i < $zip->numFiles; $i++) {\n\t\t\t\t\t$filename = $zip->getNameIndex($i);\n\t\t\t\t\t$fileinfo = pathinfo($filename);\n\t\t\t\t\t$extractFilePath = rtrim($extractTo, '/') . '/' . $filename;\n\t\t\t\t\t// Check if file exists and $overwriteFiles is false\n\t\t\t\t\tif (!file_exists($extractFilePath) || $overwriteFiles) {\n\t\t\t\t\t\t// Extract file\n\t\t\t\t\t\t$zip->extractTo($extractTo, $filename);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$zip->close();\n\t\t\t\tchmod($extractTo, 0777);\n            } else {\n                throw new Exception("Could not unzip file: " . $zip->getStatusString());\n            }\n        }\n        unzip(${n.zipPath}, ${n.extractToPath}, ${n.overwriteFiles});\n        `}),await e.fileExists(ee)&&await e.unlink(ee)},re=async(e,{zipFile:t,zipPath:r,extractToPath:s})=>{if(r)m.warn('The "zipPath" option of the unzip() Blueprint step is deprecated and will be removed. Use "zipFile" instead.');else if(!t)throw new Error("Either zipPath or zipFile must be provided");await te(e,t||r,s)};async function se(e,t){await e.fileExists(t)&&(await e.isDir(t)?await e.rmdir(t):await e.unlink(t))}async function ne(e,{targetPath:t,zipFile:r,ifAlreadyInstalled:s="overwrite",targetFolderName:n=""}){const i=r.name.replace(/\.zip$/,""),o=T(await e.documentRoot,"wp-content"),a=T(o,C()),p=T(a,"assets",i);await e.fileExists(p)&&await e.rmdir(a,{recursive:!0}),await e.mkdir(a);try{await re(e,{zipFile:r,extractToPath:p});let o=await e.listFiles(p,{prependPath:!0});o=o.filter((e=>!e.endsWith("/__MACOSX")));const a=1===o.length&&await e.isDir(o[0]);let c,f="";a?(f=o[0],c=o[0].split("/").pop()):(f=p,c=i),n&&n.length&&(c=n);const l=`${t}/${c}`;if(await e.fileExists(l)){if(!await e.isDir(l))throw new Error(`Cannot install asset ${c} to ${l} because a file with the same name already exists. Note it's a file, not a directory! Is this by mistake?`);if("overwrite"!==s){if("skip"===s)return{assetFolderPath:l,assetFolderName:c};throw new Error(`Cannot install asset ${c} to ${t} because it already exists and the ifAlreadyInstalled option was set to ${s}`)}await e.rmdir(l,{recursive:!0})}return await e.mv(f,l),{assetFolderPath:l,assetFolderName:c}}finally{await e.rmdir(a,{recursive:!0})}}function ie(e){const t=e.split(".").shift().replace(/-/g," ");return t.charAt(0).toUpperCase()+t.slice(1).toLowerCase()}const oe=async(e,{themeData:t,themeZipFile:r,ifAlreadyInstalled:s,options:n={}},i)=>{r&&(t=r,m.warn('The "themeZipFile" option is deprecated. Use "themeData" instead.'));const o="targetFolderName"in n?n.targetFolderName:"";let a="",p="";if(t instanceof File){p=ie(t.name.split("/").pop()||"theme.zip"),null==i||i.tracker.setCaption(`Installing the ${p} theme`),a=(await ne(e,{ifAlreadyInstalled:s,zipFile:t,targetPath:`${await e.documentRoot}/wp-content/themes`,targetFolderName:o})).assetFolderName}else{p=t.name,a=o||p,null==i||i.tracker.setCaption(`Installing the ${p} theme`);const r=T(await e.documentRoot,"wp-content","themes",a);await J(e,r,t.files,{rmRoot:!0})}(!("activate"in n)||n.activate)&&await w(e,{themeFolderName:a},i),"importStarterContent"in n&&n.importStarterContent&&await $(e,{themeSlug:a},i)},ae="<?php\n\nfunction zipDir($root, $output, $options = array())\n{\n    $root = rtrim($root, '/');\n    $additionalPaths = array_key_exists('additional_paths', $options) ? $options['additional_paths'] : array();\n    $excludePaths = array_key_exists('exclude_paths', $options) ? $options['exclude_paths'] : array();\n    $zip_root = array_key_exists('zip_root', $options) ? $options['zip_root'] : $root;\n\n    $zip = new ZipArchive;\n    $res = $zip->open($output, ZipArchive::CREATE);\n    if ($res === TRUE) {\n        $directories = array(\n            $root . '/'\n        );\n        while (sizeof($directories)) {\n            $current_dir = array_pop($directories);\n\n            if ($handle = opendir($current_dir)) {\n                while (false !== ($entry = readdir($handle))) {\n                    if ($entry == '.' || $entry == '..') {\n                        continue;\n                    }\n\n                    $entry = join_paths($current_dir, $entry);\n                    if (in_array($entry, $excludePaths)) {\n                        continue;\n                    }\n\n                    if (is_dir($entry)) {\n                        $directory_path = $entry . '/';\n                        array_push($directories, $directory_path);\n                    } else if (is_file($entry)) {\n                        $zip->addFile($entry, substr($entry, strlen($zip_root)));\n                    }\n                }\n                closedir($handle);\n            }\n        }\n        foreach ($additionalPaths as $disk_path => $zip_path) {\n            $zip->addFile($disk_path, $zip_path);\n        }\n        $zip->close();\n        chmod($output, 0777);\n    }\n}\n\nfunction join_paths()\n{\n    $paths = array();\n\n    foreach (func_get_args() as $arg) {\n        if ($arg !== '') {\n            $paths[] = $arg;\n        }\n    }\n\n    return preg_replace('#/+#', '/', join('/', $paths));\n}\n";const pe=function(e=fetch){const t={};return async function(r,s){t[r]||(t[r]=e(r,s).then((e=>({body:e.body,responseInit:{status:e.status,statusText:e.statusText,headers:e.headers}}))));const{body:n,responseInit:i}=await t[r],[o,a]=n.tee();return t[r]={body:o,responseInit:i},new Response(a,i)}}(fetch);async function ce(e="latest"){if(e.startsWith("https://")||e.startsWith("http://")){const t=await crypto.subtle.digest("SHA-1",(new TextEncoder).encode(e));return{releaseUrl:e,version:"custom-"+Array.from(new Uint8Array(t)).map((e=>e.toString(16).padStart(2,"0"))).join("").substring(0,8),source:"inferred"}}if("trunk"===e||"nightly"===e)return{releaseUrl:"https://wordpress.org/nightly-builds/wordpress-latest.zip",version:"nightly-"+(new Date).toISOString().split("T")[0],source:"inferred"};let t=await(await pe("https://api.wordpress.org/core/version-check/1.7/?channel=beta")).json();t=t.offers.filter((e=>"autoupdate"===e.response));for(const r of t){if("beta"===e&&r.version.includes("beta"))return{releaseUrl:r.download,version:r.version,source:"api"};if("latest"===e&&!r.version.includes("beta"))return{releaseUrl:r.download,version:r.version,source:"api"};if(r.version.substring(0,e.length)===e)return{releaseUrl:r.download,version:r.version,source:"api"}}return{releaseUrl:`https://wordpress.org/wordpress-${e}.zip`,version:e,source:"inferred"}}const fe=async(e,t,r,s)=>{let n=null;if(e.match(/^(\d+\.\d+)(?:\.\d+)?$/))n=e;else if(e.match(/^(\d.\d(.\d)?)-(beta|rc|alpha|nightly).*$/i)){if(r)n=r;else{let e=await ce("beta");"api"!==e.source&&(e=await ce("latest")),n=e.version}n=n.replace(/^(\d.\d)(.\d+)/i,"$1").replace(/(rc|beta).*$/i,"RC")}else n=s||(await ce("latest")).version;if(!n)throw new Error(`WordPress version ${e} is not supported by the setSiteLanguage step`);return`https://downloads.wordpress.org/translation/core/${n}/${t}.zip`},le=Object.freeze(Object.defineProperty({__proto__:null,activatePlugin:b,activateTheme:w,cp:async(e,{fromPath:t,toPath:r})=>{await e.writeFile(r,await e.readFileAsBuffer(t))},defineSiteUrl:_,defineWpConfigConsts:j,enableMultisite:async(e,{wpCliPath:t})=>{await R(e,t),await j(e,{consts:{WP_ALLOW_MULTISITE:1}});const r=new URL(await e.absoluteUrl);if(""!==r.port){let e=`The current host is ${r.host}, but WordPress multisites do not support custom ports.`;throw"localhost"===r.hostname&&(e+=" For development, you can set up a playground.test domain using the instructions at https://wordpress.github.io/wordpress-playground/contributing/code."),new Error(e)}const s=r.pathname.replace(/\/$/,"")+"/",n=`${r.protocol}//${r.hostname}${s}`;await H(e,{options:{siteurl:n,home:n}}),await I(e,{command:"wp core multisite-convert"})},exportWXR:async function(e){const t=await e.request({url:"/wp-admin/export.php?download=true&content=all"});return new File([t.bytes],"export.xml")},importThemeStarterContent:$,importWordPressFiles:async(e,{wordPressFilesZip:t,pathInZip:r=""})=>{const s=await e.documentRoot;let n=T("/tmp","import");await e.mkdir(n),await re(e,{zipFile:t,extractToPath:n}),n=T(n,r);const o=T(n,"wp-content"),a=T(s,"wp-content");for(const l of i){const t=T(o,l);await se(e,t);const r=T(a,l);await e.fileExists(r)&&(await e.mkdir(k(t)),await e.mv(r,t))}const p=T(n,"wp-content","database");await e.fileExists(p)||await e.mv(T(s,"wp-content","database"),p);const c=await e.listFiles(n);for(const i of c)await se(e,T(s,i)),await e.mv(T(n,i),T(s,i));await e.rmdir(n),await _(e,{siteUrl:await e.absoluteUrl});const f=q(T(s,"wp-admin","upgrade.php"));await e.run({code:`<?php\n            $_GET['step'] = 'upgrade_db';\n            require ${f};\n            `})},importWxr:async(e,{file:t,importer:r="default"},s)=>{"data-liberation"===r?await async function(e,t,r){var s;null==(s=null==r?void 0:r.tracker)||s.setCaption("Preparing content import"),await N(e,{path:"/tmp/import.wxr",data:t});const n=await e.documentRoot,i=await e.onMessage((e=>{var t;const s=JSON.parse(e);"import-wxr-progress"===(null==s?void 0:s.type)&&(null==(t=null==r?void 0:r.tracker)||t.setCaption(s.progress))}));try{await e.run({code:`<?php\n\trequire ${q(n)} . '/wp-load.php';\n\trequire ${q(n)} . '/wp-admin/includes/admin.php';\n\n\t// Defines the constants expected by the Box .phar stub when "cli" is used\n\t// as the SAPI name.\n\t// @TODO: Don't use the "cli" SAPI string and don't allow composer to run platform checks.\n\tif(!defined('STDERR')) define('STDERR', fopen('php://stderr', 'w'));\n\tif(!defined('STDIN'))  define('STDIN', fopen('php://stdin', 'r'));\n\tif(!defined('STDOUT')) define('STDOUT', fopen('php://stdout', 'w'));\n\t\n\t// Preloaded by the Blueprint compile() function\n\trequire '/internal/shared/data-liberation-core.phar';\n\n\t$admin_id = get_users(array('role' => 'Administrator') )[0]->ID;\n\twp_set_current_user( $admin_id );\n\n\t$new_site_url = get_site_url();\n\t$importer = WP_Stream_Importer::create_for_wxr_file(\n\t\t'/tmp/import.wxr',\n\t\tarray(\n\t\t\t'new_site_url' => $new_site_url,\n\t\t)\n\t);\n\t$session = WP_Import_Session::create(\n\t\tarray(\n\t\t\t'data_source' => 'wxr_file',\n\t\t\t'file_name' => '/tmp/import.wxr',\n\t\t)\n\t);\n\twhile ( true ) {\n\t\tif ( true === $importer->next_step() ) {\n\t\t\t/**\n\t\t\t * We're ignoring any importing errors.\n\t\t\t * This script is a part of Blueprints and is expected to finish\n\t\t\t * without stopping. We won't be gathering additional user input\n\t\t\t * along the way. Instead, we'll just decide not to ignore the\n\t\t\t * errors.\n\t\t\t *\n\t\t\t * @TODO: Consider extracting this code into a CLI script and\n\t\t\t *        using it here instead of this custom script. Note it's\n\t\t\t *        about a simple CLI script, not a WP-CLI command, as the\n\t\t\t *        latter would require downloading 5MB of WP-CLI code.\n\t\t\t */\n\t\t\tswitch ( $importer->get_stage() ) {\n\t\t\t\tcase WP_Stream_Importer::STAGE_INITIAL:\n\t\t\t\t\t$message = 'Preparing content import';\n\t\t\t\t\tbreak;\n\t\t\n\t\t\t\tcase WP_Stream_Importer::STAGE_INDEX_ENTITIES:\n\t\t\t\t\t// Bump the total number of entities to import.\n\t\t\t\t\t$indexed = $session->count_all_total_entities();\n\t\t\t\t\t$message = 'Content import 1/4: Indexing records (' . $indexed . ' so far)';\n\t\t\t\t\t$session->create_frontloading_placeholders( $importer->get_indexed_assets_urls() );\n\t\t\t\t\t$session->bump_total_number_of_entities(\n\t\t\t\t\t\t$importer->get_indexed_entities_counts()\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WP_Stream_Importer::STAGE_TOPOLOGICAL_SORT:\n\t\t\t\t\t$message = 'Content import 2/4: Indexing data';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WP_Stream_Importer::STAGE_FRONTLOAD_ASSETS:\n\t\t\t\t\t$session->bump_frontloading_progress(\n\t\t\t\t\t\t$importer->get_frontloading_progress(),\n\t\t\t\t\t\t$importer->get_frontloading_events()\n\t\t\t\t\t);\n\t\t\t\t\t$nb_media = $session->count_awaiting_frontloading_placeholders();\n\t\t\t\t\t$message = 'Content import 3/4: Downloading media (' . $nb_media . ' remaining)';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WP_Stream_Importer::STAGE_IMPORT_ENTITIES:\n\t\t\t\t\t$session->bump_imported_entities_counts(\n\t\t\t\t\t\t$importer->get_imported_entities_counts()\n\t\t\t\t\t);\n\t\t\t\t\t$nb_remaining_entities = $session->count_remaining_entities();\n\t\t\t\t\t$message = 'Content import 4/4: Inserting data (' . $nb_remaining_entities . ' remaining)';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$message = 'Importing content';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Report progress to the UI\n\t\t\tpost_message_to_js(json_encode([\n\t\t\t\t'type' => 'import-wxr-progress',\n\t\t\t\t'progress' => $message,\n\t\t\t]));\n\t\t\tcontinue;\n\t\t}\n\t\tif ( $importer->advance_to_next_stage() ) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Import finished\n\t\tbreak;\n\t}\n\t`})}finally{await i()}}(e,t,s):await async function(e,t,r){var s;null==(s=null==r?void 0:r.tracker)||s.setCaption("Importing content"),await N(e,{path:"/tmp/import.wxr",data:t});const n=await e.documentRoot;await e.run({code:`<?php\n\trequire ${q(n)} . '/wp-load.php';\n\trequire ${q(n)} . '/wp-admin/includes/admin.php';\n\n\tkses_remove_filters();\n\t$admin_id = get_users(array('role' => 'Administrator') )[0]->ID;\n\twp_set_current_user( $admin_id );\n\t$importer = new WXR_Importer( array(\n\t\t'fetch_attachments' => true,\n\t\t'default_author' => $admin_id\n\t) );\n\t$logger = new WP_Importer_Logger_CLI();\n\t$importer->set_logger( $logger );\n\t// Slashes from the imported content are lost if we don't call wp_slash here.\n\tadd_action( 'wp_insert_post_data', function( $data ) {\n\t\treturn wp_slash($data);\n\t});\n  \n  // Ensure that Site Editor templates are associated with the correct taxonomy.\n  add_filter( 'wp_import_post_terms', function ( $terms, $post_id ) {\n    foreach ( $terms as $post_term ) {\n      if ( 'wp_theme' !== $term['taxonomy'] ) continue;\n      $post_term = get_term_by('slug', $term['slug'], $term['taxonomy'] );\n      if ( ! $post_term ) {\n        $post_term = wp_insert_term(\n          $term['slug'],\n          $term['taxonomy']\n        );\n        $term_id = $post_term['term_id'];\n      } else {\n        $term_id = $post_term->term_id;\n      }\n      wp_set_object_terms( $post_id, $term_id, $term['taxonomy']) ;\n    }\n    return $terms;\n  }, 10, 2 );\n\t$result = $importer->import( '/tmp/import.wxr' );\n\t`})}(e,t,s)},installPlugin:async(e,{pluginData:t,pluginZipFile:r,ifAlreadyInstalled:s,options:n={}},i)=>{r&&(t=r,m.warn('The "pluginZipFile" option is deprecated. Use "pluginData" instead.'));const o=T(await e.documentRoot,"wp-content","plugins"),a="targetFolderName"in n?n.targetFolderName:"";let p="",c="";if(t instanceof File)if(t.name.endsWith(".php")){const r=T(o,t.name);await N(e,{path:r,data:t}),p=o,c=t.name}else{c=ie(t.name.split("/").pop()||"plugin.zip"),null==i||i.tracker.setCaption(`Installing the ${c} plugin`);const r=await ne(e,{ifAlreadyInstalled:s,zipFile:t,targetPath:`${await e.documentRoot}/wp-content/plugins`,targetFolderName:a});p=r.assetFolderPath,c=r.assetFolderName}else if(t){c=t.name,null==i||i.tracker.setCaption(`Installing the ${c} plugin`);const r=T(o,a||t.name);await J(e,r,t.files,{rmRoot:!0}),p=r}(!("activate"in n)||n.activate)&&await b(e,{pluginPath:p,pluginName:c},i)},installTheme:oe,login:async(e,{username:t="admin"}={},r)=>{null==r||r.tracker.setCaption((null==r?void 0:r.initialCaption)||"Logging in"),e.defineConstant("PLAYGROUND_AUTO_LOGIN_AS_USER",t)},mkdir:async(e,{path:t})=>{await e.mkdir(t)},mv:async(e,{fromPath:t,toPath:r})=>{await e.mv(t,r)},request:async(e,{request:t})=>{m.warn('Deprecated: The Blueprint step "request" is deprecated and will be removed in a future release.');const r=await e.request(t);if(r.httpStatusCode>399||r.httpStatusCode<200)throw m.warn("WordPress response was",{response:r}),new Error(`Request failed with status ${r.httpStatusCode}`);return r},resetData:async(e,t,r)=>{var s;null==(s=null==r?void 0:r.tracker)||s.setCaption("Resetting WordPress data");const n=await e.documentRoot;await e.run({env:{DOCROOT:n},code:"<?php\n\t\trequire getenv('DOCROOT') . '/wp-load.php';\n\n\t\t$GLOBALS['@pdo']->query('DELETE FROM wp_posts WHERE id > 0');\n\t\t$GLOBALS['@pdo']->query(\"UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_posts'\");\n\t\t\n\t\t$GLOBALS['@pdo']->query('DELETE FROM wp_postmeta WHERE post_id > 1');\n\t\t$GLOBALS['@pdo']->query(\"UPDATE SQLITE_SEQUENCE SET SEQ=20 WHERE NAME='wp_postmeta'\");\n\n\t\t$GLOBALS['@pdo']->query('DELETE FROM wp_comments');\n\t\t$GLOBALS['@pdo']->query(\"UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_comments'\");\n\n\t\t$GLOBALS['@pdo']->query('DELETE FROM wp_commentmeta');\n\t\t$GLOBALS['@pdo']->query(\"UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_commentmeta'\");\n\t\t"})},rm:P,rmdir:async(e,{path:t})=>{await e.rmdir(t)},runPHP:async(e,{code:t})=>await e.run({code:t}),runPHPWithOptions:async(e,{options:t})=>await e.run(t),runSql:async(e,{sql:t},r)=>{null==r||r.tracker.setCaption("Executing SQL Queries");const s=`/tmp/${C(36,"-_")}.sql`;await e.writeFile(s,new Uint8Array(await t.arrayBuffer()));const n=D({docroot:await e.documentRoot,sqlFilename:s}),i=await e.run({code:`<?php\n\t\trequire_once ${n.docroot} . '/wp-load.php';\n\n\t\t$handle = fopen(${n.sqlFilename}, 'r');\n\n\t\tglobal $wpdb;\n\n\t\twhile ($line = fgets($handle)) {\n\t\t\tif(trim($line, " \n;") === '') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$wpdb->query($line);\n\t\t}\n\t`});return await P(e,{path:s}),i},runWpInstallationWizard:async(e,{options:t})=>{await e.request({url:"/wp-admin/install.php?step=2",method:"POST",body:{language:"en",prefix:"wp_",weblog_title:"My WordPress Website",user_name:t.adminPassword||"admin",admin_password:t.adminPassword||"password",admin_password2:t.adminPassword||"password",Submit:"Install WordPress",pw_weak:"1",admin_email:"admin@localhost.com"}})},setSiteLanguage:async(e,{language:t},r)=>{null==r||r.tracker.setCaption((null==r?void 0:r.initialCaption)||"Translating"),await e.defineConstant("WPLANG",t);const s=await e.documentRoot,n=(await e.run({code:`<?php\n\t\t\trequire '${s}/wp-includes/version.php';\n\t\t\techo $wp_version;\n\t\t`})).text,i=[{url:await fe(n,t),type:"core"}],o=(await e.run({code:`<?php\n\t\trequire_once('${s}/wp-load.php');\n\t\trequire_once('${s}/wp-admin/includes/plugin.php');\n\t\techo json_encode(\n\t\t\tarray_values(\n\t\t\t\tarray_map(\n\t\t\t\t\tfunction($plugin) {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t'slug'    => $plugin['TextDomain'],\n\t\t\t\t\t\t\t'version' => $plugin['Version']\n\t\t\t\t\t\t];\n\t\t\t\t\t},\n\t\t\t\t\tarray_filter(\n\t\t\t\t\t\tget_plugins(),\n\t\t\t\t\t\tfunction($plugin) {\n\t\t\t\t\t\t\treturn !empty($plugin['TextDomain']);\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);`})).json;for(const{slug:f,version:l}of o)i.push({url:`https://downloads.wordpress.org/translation/plugin/${f}/${l}/${t}.zip`,type:"plugin"});const a=(await e.run({code:`<?php\n\t\trequire_once('${s}/wp-load.php');\n\t\trequire_once('${s}/wp-admin/includes/theme.php');\n\t\techo json_encode(\n\t\t\tarray_values(\n\t\t\t\tarray_map(\n\t\t\t\t\tfunction($theme) {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t'slug'    => $theme->get('TextDomain'),\n\t\t\t\t\t\t\t'version' => $theme->get('Version')\n\t\t\t\t\t\t];\n\t\t\t\t\t},\n\t\t\t\t\twp_get_themes()\n\t\t\t\t)\n\t\t\t)\n\t\t);`})).json;for(const{slug:f,version:l}of a)i.push({url:`https://downloads.wordpress.org/translation/theme/${f}/${l}/${t}.zip`,type:"theme"});await e.isDir(`${s}/wp-content/languages/plugins`)||await e.mkdir(`${s}/wp-content/languages/plugins`),await e.isDir(`${s}/wp-content/languages/themes`)||await e.mkdir(`${s}/wp-content/languages/themes`);const p=new S({concurrency:5}),c=i.map((({url:r,type:n})=>p.run((async()=>{try{const i=await fetch(r);if(!i.ok)throw new Error(`Failed to download translations for ${n}: ${i.statusText}`);let o=`${s}/wp-content/languages`;"plugin"===n?o+="/plugins":"theme"===n&&(o+="/themes"),await te(e,new File([await i.blob()],`${t}-${n}.zip`),o)}catch(i){if("core"===n)throw new Error(`Failed to download translations for WordPress. Please check if the language code ${t} is correct. You can find all available languages and translations on https://translate.wordpress.org/.`);m.warn(`Error downloading translations for ${n}: ${i}`)}}))));await Promise.all(c)},setSiteOptions:H,unzip:re,updateUserMeta:async(e,{meta:t,userId:r})=>{const s=await e.documentRoot;await e.run({code:`<?php\n\t\tinclude ${q(s)} . '/wp-load.php';\n\t\t$meta = ${q(t)};\n\t\tforeach($meta as $name => $value) {\n\t\t\tupdate_user_meta(${q(r)}, $name, $value);\n\t\t}\n\t\t`})},wpCLI:I,writeFile:N,writeFiles:async(e,{writeToPath:t,filesTree:r})=>{await J(e,t,r.files)},zipWpContent:async(e,{selfContained:t=!1}={})=>{const r="/tmp/wordpress-playground.zip",s=await e.documentRoot,n=T(s,"wp-content");let o=i;t&&(o=o.filter((e=>!e.startsWith("themes/twenty"))).filter((e=>"mu-plugins/sqlite-database-integration"!==e)));const a=D({zipPath:r,wpContentPath:n,documentRoot:s,exceptPaths:o.map((e=>T(s,"wp-content",e))),additionalPaths:t?{[T(s,"wp-config.php")]:"wp-config.php"}:{}});await async function(e,t){return await e.run({code:ae+t})}(e,`zipDir(${a.wpContentPath}, ${a.zipPath}, array(\n\t\t\t'exclude_paths' => ${a.exceptPaths},\n\t\t\t'zip_root'      => ${a.documentRoot},\n\t\t\t'additional_paths' => ${a.additionalPaths}\n\t\t));`);const p=await e.readFileAsBuffer(r);return e.unlink(r),p}},Symbol.toStringTag,{value:"Module"}));const he=1e-5;class de extends EventTarget{constructor({weight:e=1,caption:t="",fillTime:r=4}={}){super(),this._selfWeight=1,this._selfDone=!1,this._selfProgress=0,this._selfCaption="",this._isFilling=!1,this._subTrackers=[],this._weight=e,this._selfCaption=t,this._fillTime=r}stage(e,t=""){if(e||(e=this._selfWeight),this._selfWeight-e<-he)throw new Error(`Cannot add a stage with weight ${e} as the total weight of registered stages would exceed 1.`);this._selfWeight-=e;const r=new de({caption:t,weight:e,fillTime:this._fillTime});return this._subTrackers.push(r),r.addEventListener("progress",(()=>this.notifyProgress())),r.addEventListener("done",(()=>{this.done&&this.notifyDone()})),r}fillSlowly({stopBeforeFinishing:e=!0}={}){if(this._isFilling)return;this._isFilling=!0;const t=this._fillTime/100;this._fillInterval=setInterval((()=>{this.set(this._selfProgress+1),e&&this._selfProgress>=99&&clearInterval(this._fillInterval)}),t)}set(e){this._selfProgress=Math.min(e,100),this.notifyProgress(),this._selfProgress+he>=100&&this.finish()}finish(){this._fillInterval&&clearInterval(this._fillInterval),this._selfDone=!0,this._selfProgress=100,this._isFilling=!1,this._fillInterval=void 0,this.notifyProgress(),this.notifyDone()}get caption(){for(let e=this._subTrackers.length-1;e>=0;e--)if(!this._subTrackers[e].done){const t=this._subTrackers[e].caption;if(t)return t}return this._selfCaption}setCaption(e){this._selfCaption=e,this.notifyProgress()}get done(){return this.progress+he>=100}get progress(){if(this._selfDone)return 100;const e=this._subTrackers.reduce(((e,t)=>e+t.progress*t.weight),this._selfProgress*this._selfWeight);return Math.round(1e4*e)/1e4}get weight(){return this._weight}get observer(){return this._progressObserver||(this._progressObserver=e=>{this.set(e)}),this._progressObserver}get loadingListener(){return this._loadingListener||(this._loadingListener=e=>{this.set(e.detail.loaded/e.detail.total*100)}),this._loadingListener}pipe(e){e.setProgress({progress:this.progress,caption:this.caption}),this.addEventListener("progress",(t=>{e.setProgress({progress:t.detail.progress,caption:t.detail.caption})})),this.addEventListener("done",(()=>{e.setLoaded()}))}addEventListener(e,t){super.addEventListener(e,t)}removeEventListener(e,t){super.removeEventListener(e,t)}notifyProgress(){const e=this;this.dispatchEvent(new CustomEvent("progress",{detail:{get progress(){return e.progress},get caption(){return e.caption}}}))}notifyDone(){this.dispatchEvent(new CustomEvent("done"))}}function ue(e){return e[Symbol.asyncIterator]?e[Symbol.asyncIterator]():e[Symbol.iterator]?e[Symbol.iterator]():e.next?e:function(e){let t=[e];return{next:()=>Promise.resolve({done:0===t.length,value:t.pop()}),return:()=>(t=[],{}),[Symbol.asyncIterator](){return this}}}(e)}class me{constructor(e){if(typeof Buffer>"u")throw new Error("Missing Buffer dependency");this.stream=ue(e),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(e){if(!this.eof())return this.started||await this._init(),this.cursor+e>this.buffer.length&&(this._trim(),await this._accumulate(e)),this._moveCursor(e),this.buffer.slice(this.undoCursor,this.cursor)}async skip(e){this.eof()||(this.started||await this._init(),this.cursor+e>this.buffer.length&&(this._trim(),await this._accumulate(e)),this._moveCursor(e))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:e,value:t}=await this.stream.next();return e&&(this._ended=!0,!t)?Buffer.alloc(0):(t&&(t=Buffer.from(t)),t)}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(e){this.undoCursor=this.cursor,this.cursor+=e,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(e){if(this._ended)return;const t=[this.buffer];for(;this.cursor+e>ge(t);){const e=await this._next();if(this._ended)break;t.push(e)}this.buffer=Buffer.concat(t)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}function ge(e){return e.reduce(((e,t)=>e+t.length),0)}class ye{static flush(){return Buffer.from("0000","utf8")}static delim(){return Buffer.from("0001","utf8")}static encode(e){"string"==typeof e&&(e=Buffer.from(e));const t=function(e,t){const r=t.toString(16);return"0".repeat(e-r.length)+r}(4,e.length+4);return Buffer.concat([Buffer.from(t,"utf8"),e])}static streamReader(e){const t=new me(e);return async function(){try{let e=await t.read(4);if(null==e)return!0;if(e=parseInt(e.toString("utf8"),16),0===e||1===e)return null;return await t.read(e-4)??!0}catch(r){return e.error=r,!0}}}}class be extends Error{constructor(e){super(e),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(e){const t=new be(e.message);return t.code=e.code,t.data=e.data,t.caller=e.caller,t.stack=e.stack,t}get isIsomorphicGitError(){return!0}}class we extends be{constructor(e){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${e}`),this.code=this.name=we.code,this.data={message:e}}}we.code="InternalError";class Pe extends be{constructor(e){super(`The filepath "${e}" contains unsafe character sequences`),this.code=this.name=Pe.code,this.data={filepath:e}}}function ve(e,t){return-(e<t)||+(e>t)}function Ae(e,t){return ve(e.path,t.path)}function Oe(e,t){return ve(Se(e),Se(t))}function Se(e){return"040000"===e.mode?e.path+"/":e.path}function Te(e){switch(e){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";case"160000":return"commit"}throw new we(`Unexpected GitTree entry mode: ${e}`)}function ke(e){return!e.oid&&e.sha&&(e.oid=e.sha),e.mode=function(e){if("number"==typeof e&&(e=e.toString(8)),e.match(/^0?4.*/))return"040000";if(e.match(/^1006.*/))return"100644";if(e.match(/^1007.*/))return"100755";if(e.match(/^120.*/))return"120000";if(e.match(/^160.*/))return"160000";throw new we(`Could not understand file mode: ${e}`)}(e.mode),e.type||(e.type=Te(e.mode)),e}Pe.code="UnsafeFilepathError";class Ee{constructor(e){if(Buffer.isBuffer(e))this._entries=function(e){const t=[];let r=0;for(;r<e.length;){const s=e.indexOf(32,r);if(-1===s)throw new we(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next space character.`);const n=e.indexOf(0,r);if(-1===n)throw new we(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next null character.`);let i=e.slice(r,s).toString("utf8");"40000"===i&&(i="040000");const o=Te(i),a=e.slice(s+1,n).toString("utf8");if(a.includes("\\")||a.includes("/"))throw new Pe(a);const p=e.slice(n+1,n+21).toString("hex");r=n+21,t.push({mode:i,path:a,oid:p,type:o})}return t}(e);else{if(!Array.isArray(e))throw new we("invalid type passed to GitTree constructor");this._entries=e.map(ke)}this._entries.sort(Ae)}static from(e){return new Ee(e)}render(){return this._entries.map((e=>`${e.mode} ${e.type} ${e.oid}    ${e.path}`)).join("\n")}toObject(){const e=[...this._entries];return e.sort(Oe),Buffer.concat(e.map((e=>{const t=Buffer.from(e.mode.replace(/^0/,"")),r=Buffer.from(" "),s=Buffer.from(e.path,"utf8"),n=Buffer.from([0]),i=Buffer.from(e.oid,"hex");return Buffer.concat([t,r,s,n,i])})))}entries(){return this._entries}*[Symbol.iterator](){for(const e of this._entries)yield e}}function Ce({name:e,email:t,timestamp:r,timezoneOffset:s}){return s=function(e){const t=function(e){return Math.sign(e)||(Object.is(e,-0)?-1:1)}(function(e){return 0===e?e:-e}(e));e=Math.abs(e);const r=Math.floor(e/60);e-=60*r;let s=String(r),n=String(e);return s.length<2&&(s="0"+s),n.length<2&&(n="0"+n),(-1===t?"-":"+")+s+n}(s),`${e} <${t}> ${r} ${s}`}function qe(e){return e=(e=(e=e.replace(/\r/g,"")).replace(/^\n+/,"")).replace(/\n+$/,"")+"\n"}function De(e){const[,t,r,s,n]=e.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:t,email:r,timestamp:Number(s),timezoneOffset:xe(n)}}function xe(e){let[,t,r,s]=e.match(/(\+|-)(\d\d)(\d\d)/);return s=("+"===t?1:-1)*(60*Number(r)+Number(s)),function(e){return 0===e?e:-e}(s)}class je{constructor(e){if("string"==typeof e)this._tag=e;else if(Buffer.isBuffer(e))this._tag=e.toString("utf8");else{if("object"!=typeof e)throw new we("invalid type passed to GitAnnotatedTag constructor");this._tag=je.render(e)}}static from(e){return new je(e)}static render(e){return`object ${e.object}\ntype ${e.type}\ntag ${e.tag}\ntagger ${Ce(e.tagger)}\n\n${e.message}\n${e.gpgsig?e.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf("\n\n"))}message(){const e=this.withoutSignature();return e.slice(e.indexOf("\n\n")+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){const e=this.justHeaders().split("\n"),t=[];for(const s of e)" "===s[0]?t[t.length-1]+="\n"+s.slice(1):t.push(s);const r={};for(const s of t){const e=s.slice(0,s.indexOf(" ")),t=s.slice(s.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(t):r[e]=t}return r.tagger&&(r.tagger=De(r.tagger)),r.committer&&(r.committer=De(r.committer)),r}withoutSignature(){const e=qe(this._tag);return-1===e.indexOf("\n-----BEGIN PGP SIGNATURE-----")?e:e.slice(0,e.lastIndexOf("\n-----BEGIN PGP SIGNATURE-----"))}gpgsig(){if(-1===this._tag.indexOf("\n-----BEGIN PGP SIGNATURE-----"))return;return qe(this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+27))}payload(){return this.withoutSignature()+"\n"}toObject(){return Buffer.from(this._tag,"utf8")}static async sign(e,t,r){const s=e.payload();let{signature:n}=await t({payload:s,secretKey:r});n=qe(n);const i=s+n;return je.from(i)}}function He(e){return e.trim().split("\n").map((e=>" "+e)).join("\n")+"\n"}class Be{constructor(e){if("string"==typeof e)this._commit=e;else if(Buffer.isBuffer(e))this._commit=e.toString("utf8");else{if("object"!=typeof e)throw new we("invalid type passed to GitCommit constructor");this._commit=Be.render(e)}}static fromPayloadSignature({payload:e,signature:t}){const r=Be.justHeaders(e),s=Be.justMessage(e),n=qe(r+"\ngpgsig"+He(t)+"\n"+s);return new Be(n)}static from(e){return new Be(e)}toObject(){return Buffer.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return Be.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(e){return qe(e.slice(e.indexOf("\n\n")+2))}static justHeaders(e){return e.slice(0,e.indexOf("\n\n"))}parseHeaders(){const e=Be.justHeaders(this._commit).split("\n"),t=[];for(const s of e)" "===s[0]?t[t.length-1]+="\n"+s.slice(1):t.push(s);const r={parent:[]};for(const s of t){const e=s.slice(0,s.indexOf(" ")),t=s.slice(s.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(t):r[e]=t}return r.author&&(r.author=De(r.author)),r.committer&&(r.committer=De(r.committer)),r}static renderHeaders(e){let t="";if(e.tree?t+=`tree ${e.tree}\n`:t+="tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\n",e.parent){if(void 0===e.parent.length)throw new we("commit 'parent' property should be an array");for(const r of e.parent)t+=`parent ${r}\n`}t+=`author ${Ce(e.author)}\n`;return t+=`committer ${Ce(e.committer||e.author)}\n`,e.gpgsig&&(t+="gpgsig"+He(e.gpgsig)),t}static render(e){return Be.renderHeaders(e)+"\n"+qe(e.message)}render(){return this._commit}withoutSignature(){const e=qe(this._commit);if(-1===e.indexOf("\ngpgsig"))return e;return qe(e.slice(0,e.indexOf("\ngpgsig"))+"\n"+e.slice(e.indexOf("-----END PGP SIGNATURE-----\n")+28))}isolateSignature(){return function(e){return e.split("\n").map((e=>e.replace(/^ /,""))).join("\n")}(this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+27))}static async sign(e,t,r){const s=e.withoutSignature(),n=Be.justMessage(e._commit);let{signature:i}=await t({payload:s,secretKey:r});i=qe(i);const o=Be.justHeaders(e._commit)+"\ngpgsig"+He(i)+"\n"+n;return Be.from(o)}}var Le={};!function(e){!function(e){function t(){for(var e=0,t=new Array(256),r=0;256!=r;++r)e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=r)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1,t[r]=e;return typeof Int32Array<"u"?new Int32Array(t):t}e.version="1.2.2";var r=t();function s(e){var t=0,r=0,s=0,n=typeof Int32Array<"u"?new Int32Array(4096):new Array(4096);for(s=0;256!=s;++s)n[s]=e[s];for(s=0;256!=s;++s)for(r=e[s],t=256+s;t<4096;t+=256)r=n[t]=r>>>8^e[255&r];var i=[];for(s=1;16!=s;++s)i[s-1]=typeof Int32Array<"u"?n.subarray(256*s,256*s+256):n.slice(256*s,256*s+256);return i}var n=s(r),i=n[0],o=n[1],a=n[2],p=n[3],c=n[4],f=n[5],l=n[6],h=n[7],d=n[8],u=n[9],m=n[10],g=n[11],y=n[12],b=n[13],w=n[14];function P(e,t){for(var s=~t,n=0,i=e.length;n<i;)s=s>>>8^r[255&(s^e.charCodeAt(n++))];return~s}function v(e,t){for(var s=~t,n=e.length-15,P=0;P<n;)s=w[e[P++]^255&s]^b[e[P++]^s>>8&255]^y[e[P++]^s>>16&255]^g[e[P++]^s>>>24]^m[e[P++]]^u[e[P++]]^d[e[P++]]^h[e[P++]]^l[e[P++]]^f[e[P++]]^c[e[P++]]^p[e[P++]]^a[e[P++]]^o[e[P++]]^i[e[P++]]^r[e[P++]];for(n+=15;P<n;)s=s>>>8^r[255&(s^e[P++])];return~s}function A(e,t){for(var s=~t,n=0,i=e.length,o=0,a=0;n<i;)(o=e.charCodeAt(n++))<128?s=s>>>8^r[255&(s^o)]:o<2048?s=(s=s>>>8^r[255&(s^(192|o>>6&31))])>>>8^r[255&(s^(128|63&o))]:o>=55296&&o<57344?(o=64+(1023&o),a=1023&e.charCodeAt(n++),s=(s=(s=(s=s>>>8^r[255&(s^(240|o>>8&7))])>>>8^r[255&(s^(128|o>>2&63))])>>>8^r[255&(s^(128|a>>6&15|(3&o)<<4))])>>>8^r[255&(s^(128|63&a))]):s=(s=(s=s>>>8^r[255&(s^(224|o>>12&15))])>>>8^r[255&(s^(128|o>>6&63))])>>>8^r[255&(s^(128|63&o))];return~s}e.table=r,e.bstr=P,e.buf=v,e.str=A}(typeof DO_NOT_EXPORT_CRC>"u"?e:{})}(Le);const Re=X(Le);class Ie{static wrap({type:e,object:t}){return Buffer.concat([Buffer.from(`${e} ${t.byteLength.toString()}\0`),Buffer.from(t)])}static unwrap(e){const t=e.indexOf(32),r=e.indexOf(0),s=e.slice(0,t).toString("utf8"),n=e.slice(t+1,r).toString("utf8"),i=e.length-(r+1);if(parseInt(n)!==i)throw new we(`Length mismatch: expected ${n} bytes but got ${i} instead.`);return{type:s,object:Buffer.from(e.slice(r+1))}}}class Ne{constructor(e){this.buffer=e,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(e){this._start=e}slice(e){const t=this.buffer.slice(this._start,this._start+e);return this._start+=e,t}toString(e,t){const r=this.buffer.toString(e,this._start,this._start+t);return this._start+=t,r}write(e,t,r){const s=this.buffer.write(e,this._start,t,r);return this._start+=t,s}copy(e,t,r){const s=e.copy(this.buffer,this._start,t,r);return this._start+=s,s}readUInt8(){const e=this.buffer.readUInt8(this._start);return this._start+=1,e}writeUInt8(e){const t=this.buffer.writeUInt8(e,this._start);return this._start+=1,t}readUInt16BE(){const e=this.buffer.readUInt16BE(this._start);return this._start+=2,e}writeUInt16BE(e){const t=this.buffer.writeUInt16BE(e,this._start);return this._start+=2,t}readUInt32BE(){const e=this.buffer.readUInt32BE(this._start);return this._start+=4,e}writeUInt32BE(e){const t=this.buffer.writeUInt32BE(e,this._start);return this._start+=4,t}}function We(e){let t=0,r=0,s=null;do{s=e.readUInt8(),t|=(127&s)<<r,r+=7}while(128&s);return t}function ze(e,t,r){let s=0,n=0;for(;r--;)1&t&&(s|=e.readUInt8()<<n),t>>=1,n+=8;return s}function Fe(e,t){const r=e.readUInt8();if(128&r){const s=ze(e,15&r,4);let n=ze(e,(112&r)>>4,3);return 0===n&&(n=65536),t.slice(s,s+n)}return e.slice(r)}var Ke={};!function(e){var t=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var s=t.shift();if(s){if("object"!=typeof s)throw new TypeError(s+"must be non-object");for(var n in s)r(s,n)&&(e[n]=s[n])}}return e},e.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var s={arraySet:function(e,t,r,s,n){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+s),n);else for(var i=0;i<s;i++)e[n+i]=t[r+i]},flattenChunks:function(e){var t,r,s,n,i,o;for(s=0,t=0,r=e.length;t<r;t++)s+=e[t].length;for(o=new Uint8Array(s),n=0,t=0,r=e.length;t<r;t++)i=e[t],o.set(i,n),n+=i.length;return o}},n={arraySet:function(e,t,r,s,n){for(var i=0;i<s;i++)e[n+i]=t[r+i]},flattenChunks:function(e){return[].concat.apply([],e)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,s)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,n))},e.setTyped(t)}(Ke);var Ue={},Ve={},Me={},Ze=Ke;function Xe(e){for(var t=e.length;--t>=0;)e[t]=0}var Ye=256,Ge=286,Qe=30,Je=15,_e=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],$e=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],et=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],tt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=new Array(576);Xe(rt);var st=new Array(60);Xe(st);var nt=new Array(512);Xe(nt);var it=new Array(256);Xe(it);var ot=new Array(29);Xe(ot);var at,pt,ct,ft=new Array(Qe);function lt(e,t,r,s,n){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=s,this.max_length=n,this.has_stree=e&&e.length}function ht(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function dt(e){return e<256?nt[e]:nt[256+(e>>>7)]}function ut(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function mt(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,ut(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function gt(e,t,r){mt(e,r[2*t],r[2*t+1])}function yt(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1}while(--t>0);return r>>>1}function bt(e,t,r){var s,n,i=new Array(16),o=0;for(s=1;s<=Je;s++)i[s]=o=o+r[s-1]<<1;for(n=0;n<=t;n++){var a=e[2*n+1];0!==a&&(e[2*n]=yt(i[a]++,a))}}function wt(e){var t;for(t=0;t<Ge;t++)e.dyn_ltree[2*t]=0;for(t=0;t<Qe;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Pt(e){e.bi_valid>8?ut(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function vt(e,t,r,s){var n=2*t,i=2*r;return e[n]<e[i]||e[n]===e[i]&&s[t]<=s[r]}function At(e,t,r){for(var s=e.heap[r],n=r<<1;n<=e.heap_len&&(n<e.heap_len&&vt(t,e.heap[n+1],e.heap[n],e.depth)&&n++,!vt(t,s,e.heap[n],e.depth));)e.heap[r]=e.heap[n],r=n,n<<=1;e.heap[r]=s}function Ot(e,t,r){var s,n,i,o,a=0;if(0!==e.last_lit)do{s=e.pending_buf[e.d_buf+2*a]<<8|e.pending_buf[e.d_buf+2*a+1],n=e.pending_buf[e.l_buf+a],a++,0===s?gt(e,n,t):(gt(e,(i=it[n])+Ye+1,t),0!==(o=_e[i])&&mt(e,n-=ot[i],o),gt(e,i=dt(--s),r),0!==(o=$e[i])&&mt(e,s-=ft[i],o))}while(a<e.last_lit);gt(e,256,t)}function St(e,t){var r,s,n,i=t.dyn_tree,o=t.stat_desc.static_tree,a=t.stat_desc.has_stree,p=t.stat_desc.elems,c=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<p;r++)0!==i[2*r]?(e.heap[++e.heap_len]=c=r,e.depth[r]=0):i[2*r+1]=0;for(;e.heap_len<2;)i[2*(n=e.heap[++e.heap_len]=c<2?++c:0)]=1,e.depth[n]=0,e.opt_len--,a&&(e.static_len-=o[2*n+1]);for(t.max_code=c,r=e.heap_len>>1;r>=1;r--)At(e,i,r);n=p;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],At(e,i,1),s=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=s,i[2*n]=i[2*r]+i[2*s],e.depth[n]=(e.depth[r]>=e.depth[s]?e.depth[r]:e.depth[s])+1,i[2*r+1]=i[2*s+1]=n,e.heap[1]=n++,At(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,s,n,i,o,a,p=t.dyn_tree,c=t.max_code,f=t.stat_desc.static_tree,l=t.stat_desc.has_stree,h=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,u=t.stat_desc.max_length,m=0;for(i=0;i<=Je;i++)e.bl_count[i]=0;for(p[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)(i=p[2*p[2*(s=e.heap[r])+1]+1]+1)>u&&(i=u,m++),p[2*s+1]=i,!(s>c)&&(e.bl_count[i]++,o=0,s>=d&&(o=h[s-d]),a=p[2*s],e.opt_len+=a*(i+o),l&&(e.static_len+=a*(f[2*s+1]+o)));if(0!==m){do{for(i=u-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[u]--,m-=2}while(m>0);for(i=u;0!==i;i--)for(s=e.bl_count[i];0!==s;)!((n=e.heap[--r])>c)&&(p[2*n+1]!==i&&(e.opt_len+=(i-p[2*n+1])*p[2*n],p[2*n+1]=i),s--)}}(e,t),bt(i,c,e.bl_count)}function Tt(e,t,r){var s,n,i=-1,o=t[1],a=0,p=7,c=4;for(0===o&&(p=138,c=3),t[2*(r+1)+1]=65535,s=0;s<=r;s++)n=o,o=t[2*(s+1)+1],!(++a<p&&n===o)&&(a<c?e.bl_tree[2*n]+=a:0!==n?(n!==i&&e.bl_tree[2*n]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,a=0,i=n,0===o?(p=138,c=3):n===o?(p=6,c=3):(p=7,c=4))}function kt(e,t,r){var s,n,i=-1,o=t[1],a=0,p=7,c=4;for(0===o&&(p=138,c=3),s=0;s<=r;s++)if(n=o,o=t[2*(s+1)+1],!(++a<p&&n===o)){if(a<c)do{gt(e,n,e.bl_tree)}while(0!=--a);else 0!==n?(n!==i&&(gt(e,n,e.bl_tree),a--),gt(e,16,e.bl_tree),mt(e,a-3,2)):a<=10?(gt(e,17,e.bl_tree),mt(e,a-3,3)):(gt(e,18,e.bl_tree),mt(e,a-11,7));a=0,i=n,0===o?(p=138,c=3):n===o?(p=6,c=3):(p=7,c=4)}}Xe(ft);var Et=!1;function Ct(e,t,r,s){mt(e,0+(s?1:0),3),function(e,t,r,s){Pt(e),s&&(ut(e,r),ut(e,~r)),Ze.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}Me._tr_init=function(e){Et||(function(){var e,t,r,s,n,i=new Array(16);for(r=0,s=0;s<28;s++)for(ot[s]=r,e=0;e<1<<_e[s];e++)it[r++]=s;for(it[r-1]=s,n=0,s=0;s<16;s++)for(ft[s]=n,e=0;e<1<<$e[s];e++)nt[n++]=s;for(n>>=7;s<Qe;s++)for(ft[s]=n<<7,e=0;e<1<<$e[s]-7;e++)nt[256+n++]=s;for(t=0;t<=Je;t++)i[t]=0;for(e=0;e<=143;)rt[2*e+1]=8,e++,i[8]++;for(;e<=255;)rt[2*e+1]=9,e++,i[9]++;for(;e<=279;)rt[2*e+1]=7,e++,i[7]++;for(;e<=287;)rt[2*e+1]=8,e++,i[8]++;for(bt(rt,287,i),e=0;e<Qe;e++)st[2*e+1]=5,st[2*e]=yt(e,5);at=new lt(rt,_e,257,Ge,Je),pt=new lt(st,$e,0,Qe,Je),ct=new lt(new Array(0),et,0,19,7)}(),Et=!0),e.l_desc=new ht(e.dyn_ltree,at),e.d_desc=new ht(e.dyn_dtree,pt),e.bl_desc=new ht(e.bl_tree,ct),e.bi_buf=0,e.bi_valid=0,wt(e)},Me._tr_stored_block=Ct,Me._tr_flush_block=function(e,t,r,s){var n,i,o=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<Ye;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),St(e,e.l_desc),St(e,e.d_desc),o=function(e){var t;for(Tt(e,e.dyn_ltree,e.l_desc.max_code),Tt(e,e.dyn_dtree,e.d_desc.max_code),St(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*tt[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),n=e.opt_len+3+7>>>3,(i=e.static_len+3+7>>>3)<=n&&(n=i)):n=i=r+5,r+4<=n&&-1!==t?Ct(e,t,r,s):4===e.strategy||i===n?(mt(e,2+(s?1:0),3),Ot(e,rt,st)):(mt(e,4+(s?1:0),3),function(e,t,r,s){var n;for(mt(e,t-257,5),mt(e,r-1,5),mt(e,s-4,4),n=0;n<s;n++)mt(e,e.bl_tree[2*tt[n]+1],3);kt(e,e.dyn_ltree,t-1),kt(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),Ot(e,e.dyn_ltree,e.dyn_dtree)),wt(e),s&&Pt(e)},Me._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(it[r]+Ye+1)]++,e.dyn_dtree[2*dt(t)]++),e.last_lit===e.lit_bufsize-1},Me._tr_align=function(e){mt(e,2,3),gt(e,256,rt),function(e){16===e.bi_valid?(ut(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)};var qt=function(e,t,r,s){for(var n=65535&e,i=e>>>16&65535,o=0;0!==r;){r-=o=r>2e3?2e3:r;do{i=i+(n=n+t[s++]|0)|0}while(--o);n%=65521,i%=65521}return n|i<<16};var Dt=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var s=0;s<8;s++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();var xt,jt=function(e,t,r,s){var n=Dt,i=s+r;e^=-1;for(var o=s;o<i;o++)e=e>>>8^n[255&(e^t[o])];return~e},Ht={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Bt=Ke,Lt=Me,Rt=qt,It=jt,Nt=Ht,Wt=-2,zt=258,Ft=262,Kt=103,Ut=113,Vt=666;function Mt(e,t){return e.msg=Nt[t],t}function Zt(e){return(e<<1)-(e>4?9:0)}function Xt(e){for(var t=e.length;--t>=0;)e[t]=0}function Yt(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(Bt.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function Gt(e,t){Lt._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Yt(e.strm)}function Qt(e,t){e.pending_buf[e.pending++]=t}function Jt(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function _t(e,t,r,s){var n=e.avail_in;return n>s&&(n=s),0===n?0:(e.avail_in-=n,Bt.arraySet(t,e.input,e.next_in,n,r),1===e.state.wrap?e.adler=Rt(e.adler,t,n,r):2===e.state.wrap&&(e.adler=It(e.adler,t,n,r)),e.next_in+=n,e.total_in+=n,n)}function $t(e,t){var r,s,n=e.max_chain_length,i=e.strstart,o=e.prev_length,a=e.nice_match,p=e.strstart>e.w_size-Ft?e.strstart-(e.w_size-Ft):0,c=e.window,f=e.w_mask,l=e.prev,h=e.strstart+zt,d=c[i+o-1],u=c[i+o];e.prev_length>=e.good_match&&(n>>=2),a>e.lookahead&&(a=e.lookahead);do{if(c[(r=t)+o]===u&&c[r+o-1]===d&&c[r]===c[i]&&c[++r]===c[i+1]){i+=2,r++;do{}while(c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&i<h);if(s=zt-(h-i),i=h-zt,s>o){if(e.match_start=t,o=s,s>=a)break;d=c[i+o-1],u=c[i+o]}}}while((t=l[t&f])>p&&0!=--n);return o<=e.lookahead?o:e.lookahead}function er(e){var t,r,s,n,i,o=e.w_size;do{if(n=e.window_size-e.lookahead-e.strstart,e.strstart>=o+(o-Ft)){Bt.arraySet(e.window,e.window,o,o,0),e.match_start-=o,e.strstart-=o,e.block_start-=o,t=r=e.hash_size;do{s=e.head[--t],e.head[t]=s>=o?s-o:0}while(--r);t=r=o;do{s=e.prev[--t],e.prev[t]=s>=o?s-o:0}while(--r);n+=o}if(0===e.strm.avail_in)break;if(r=_t(e.strm,e.window,e.strstart+e.lookahead,n),e.lookahead+=r,e.lookahead+e.insert>=3)for(i=e.strstart-e.insert,e.ins_h=e.window[i],e.ins_h=(e.ins_h<<e.hash_shift^e.window[i+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[i+3-1])&e.hash_mask,e.prev[i&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=i,i++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<Ft&&0!==e.strm.avail_in)}function tr(e,t){for(var r,s;;){if(e.lookahead<Ft){if(er(e),e.lookahead<Ft&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-Ft&&(e.match_length=$t(e,r)),e.match_length>=3)if(s=Lt._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else s=Lt._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(s&&(Gt(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(Gt(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Gt(e,!1),0===e.strm.avail_out)?1:2}function rr(e,t){for(var r,s,n;;){if(e.lookahead<Ft){if(er(e),e.lookahead<Ft&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-Ft&&(e.match_length=$t(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){n=e.strstart+e.lookahead-3,s=Lt._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=n&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,s&&(Gt(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((s=Lt._tr_tally(e,0,e.window[e.strstart-1]))&&Gt(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(s=Lt._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(Gt(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Gt(e,!1),0===e.strm.avail_out)?1:2}function sr(e,t,r,s,n){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=s,this.func=n}function nr(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Bt.Buf16(1146),this.dyn_dtree=new Bt.Buf16(122),this.bl_tree=new Bt.Buf16(78),Xt(this.dyn_ltree),Xt(this.dyn_dtree),Xt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Bt.Buf16(16),this.heap=new Bt.Buf16(573),Xt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Bt.Buf16(573),Xt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function ir(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:Ut,e.adler=2===t.wrap?0:1,t.last_flush=0,Lt._tr_init(t),0):Mt(e,Wt)}function or(e){var t=ir(e);return 0===t&&function(e){e.window_size=2*e.w_size,Xt(e.head),e.max_lazy_match=xt[e.level].max_lazy,e.good_match=xt[e.level].good_length,e.nice_match=xt[e.level].nice_length,e.max_chain_length=xt[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function ar(e,t,r,s,n,i){if(!e)return Wt;var o=1;if(-1===t&&(t=6),s<0?(o=0,s=-s):s>15&&(o=2,s-=16),n<1||n>9||8!==r||s<8||s>15||t<0||t>9||i<0||i>4)return Mt(e,Wt);8===s&&(s=9);var a=new nr;return e.state=a,a.strm=e,a.wrap=o,a.gzhead=null,a.w_bits=s,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=n+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Bt.Buf8(2*a.w_size),a.head=new Bt.Buf16(a.hash_size),a.prev=new Bt.Buf16(a.w_size),a.lit_bufsize=1<<n+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Bt.Buf8(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=t,a.strategy=i,a.method=r,or(e)}xt=[new sr(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(er(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var s=e.block_start+r;if((0===e.strstart||e.strstart>=s)&&(e.lookahead=e.strstart-s,e.strstart=s,Gt(e,!1),0===e.strm.avail_out)||e.strstart-e.block_start>=e.w_size-Ft&&(Gt(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Gt(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(Gt(e,!1),e.strm.avail_out),1)})),new sr(4,4,8,4,tr),new sr(4,5,16,8,tr),new sr(4,6,32,32,tr),new sr(4,4,16,16,rr),new sr(8,16,32,32,rr),new sr(8,16,128,128,rr),new sr(8,32,128,256,rr),new sr(32,128,258,1024,rr),new sr(32,258,258,4096,rr)],Ve.deflateInit=function(e,t){return ar(e,t,8,15,8,0)},Ve.deflateInit2=ar,Ve.deflateReset=or,Ve.deflateResetKeep=ir,Ve.deflateSetHeader=function(e,t){return e&&e.state&&2===e.state.wrap?(e.state.gzhead=t,0):Wt},Ve.deflate=function(e,t){var r,s,n,i;if(!e||!e.state||t>5||t<0)return e?Mt(e,Wt):Wt;if(s=e.state,!e.output||!e.input&&0!==e.avail_in||s.status===Vt&&4!==t)return Mt(e,0===e.avail_out?-5:Wt);if(s.strm=e,r=s.last_flush,s.last_flush=t,42===s.status)if(2===s.wrap)e.adler=0,Qt(s,31),Qt(s,139),Qt(s,8),s.gzhead?(Qt(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(s.gzhead.extra?4:0)+(s.gzhead.name?8:0)+(s.gzhead.comment?16:0)),Qt(s,255&s.gzhead.time),Qt(s,s.gzhead.time>>8&255),Qt(s,s.gzhead.time>>16&255),Qt(s,s.gzhead.time>>24&255),Qt(s,9===s.level?2:s.strategy>=2||s.level<2?4:0),Qt(s,255&s.gzhead.os),s.gzhead.extra&&s.gzhead.extra.length&&(Qt(s,255&s.gzhead.extra.length),Qt(s,s.gzhead.extra.length>>8&255)),s.gzhead.hcrc&&(e.adler=It(e.adler,s.pending_buf,s.pending,0)),s.gzindex=0,s.status=69):(Qt(s,0),Qt(s,0),Qt(s,0),Qt(s,0),Qt(s,0),Qt(s,9===s.level?2:s.strategy>=2||s.level<2?4:0),Qt(s,3),s.status=Ut);else{var o=8+(s.w_bits-8<<4)<<8;o|=(s.strategy>=2||s.level<2?0:s.level<6?1:6===s.level?2:3)<<6,0!==s.strstart&&(o|=32),o+=31-o%31,s.status=Ut,Jt(s,o),0!==s.strstart&&(Jt(s,e.adler>>>16),Jt(s,65535&e.adler)),e.adler=1}if(69===s.status)if(s.gzhead.extra){for(n=s.pending;s.gzindex<(65535&s.gzhead.extra.length)&&(s.pending!==s.pending_buf_size||(s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),Yt(e),n=s.pending,s.pending!==s.pending_buf_size));)Qt(s,255&s.gzhead.extra[s.gzindex]),s.gzindex++;s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),s.gzindex===s.gzhead.extra.length&&(s.gzindex=0,s.status=73)}else s.status=73;if(73===s.status)if(s.gzhead.name){n=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),Yt(e),n=s.pending,s.pending===s.pending_buf_size)){i=1;break}i=s.gzindex<s.gzhead.name.length?255&s.gzhead.name.charCodeAt(s.gzindex++):0,Qt(s,i)}while(0!==i);s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),0===i&&(s.gzindex=0,s.status=91)}else s.status=91;if(91===s.status)if(s.gzhead.comment){n=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),Yt(e),n=s.pending,s.pending===s.pending_buf_size)){i=1;break}i=s.gzindex<s.gzhead.comment.length?255&s.gzhead.comment.charCodeAt(s.gzindex++):0,Qt(s,i)}while(0!==i);s.gzhead.hcrc&&s.pending>n&&(e.adler=It(e.adler,s.pending_buf,s.pending-n,n)),0===i&&(s.status=Kt)}else s.status=Kt;if(s.status===Kt&&(s.gzhead.hcrc?(s.pending+2>s.pending_buf_size&&Yt(e),s.pending+2<=s.pending_buf_size&&(Qt(s,255&e.adler),Qt(s,e.adler>>8&255),e.adler=0,s.status=Ut)):s.status=Ut),0!==s.pending){if(Yt(e),0===e.avail_out)return s.last_flush=-1,0}else if(0===e.avail_in&&Zt(t)<=Zt(r)&&4!==t)return Mt(e,-5);if(s.status===Vt&&0!==e.avail_in)return Mt(e,-5);if(0!==e.avail_in||0!==s.lookahead||0!==t&&s.status!==Vt){var a=2===s.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(er(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=Lt._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(Gt(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Gt(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Gt(e,!1),0===e.strm.avail_out)?1:2}(s,t):3===s.strategy?function(e,t){for(var r,s,n,i,o=e.window;;){if(e.lookahead<=zt){if(er(e),e.lookahead<=zt&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(s=o[n=e.strstart-1])===o[++n]&&s===o[++n]&&s===o[++n]){i=e.strstart+zt;do{}while(s===o[++n]&&s===o[++n]&&s===o[++n]&&s===o[++n]&&s===o[++n]&&s===o[++n]&&s===o[++n]&&s===o[++n]&&n<i);e.match_length=zt-(i-n),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=Lt._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=Lt._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(Gt(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Gt(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Gt(e,!1),0===e.strm.avail_out)?1:2}(s,t):xt[s.level].func(s,t);if((3===a||4===a)&&(s.status=Vt),1===a||3===a)return 0===e.avail_out&&(s.last_flush=-1),0;if(2===a&&(1===t?Lt._tr_align(s):5!==t&&(Lt._tr_stored_block(s,0,0,!1),3===t&&(Xt(s.head),0===s.lookahead&&(s.strstart=0,s.block_start=0,s.insert=0))),Yt(e),0===e.avail_out))return s.last_flush=-1,0}return 4!==t?0:s.wrap<=0?1:(2===s.wrap?(Qt(s,255&e.adler),Qt(s,e.adler>>8&255),Qt(s,e.adler>>16&255),Qt(s,e.adler>>24&255),Qt(s,255&e.total_in),Qt(s,e.total_in>>8&255),Qt(s,e.total_in>>16&255),Qt(s,e.total_in>>24&255)):(Jt(s,e.adler>>>16),Jt(s,65535&e.adler)),Yt(e),s.wrap>0&&(s.wrap=-s.wrap),0!==s.pending?0:1)},Ve.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&t!==Kt&&t!==Ut&&t!==Vt?Mt(e,Wt):(e.state=null,t===Ut?Mt(e,-3):0):Wt},Ve.deflateSetDictionary=function(e,t){var r,s,n,i,o,a,p,c,f=t.length;if(!e||!e.state||(2===(i=(r=e.state).wrap)||1===i&&42!==r.status||r.lookahead))return Wt;for(1===i&&(e.adler=Rt(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===i&&(Xt(r.head),r.strstart=0,r.block_start=0,r.insert=0),c=new Bt.Buf8(r.w_size),Bt.arraySet(c,t,f-r.w_size,r.w_size,0),t=c,f=r.w_size),o=e.avail_in,a=e.next_in,p=e.input,e.avail_in=f,e.next_in=0,e.input=t,er(r);r.lookahead>=3;){s=r.strstart,n=r.lookahead-2;do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[s+3-1])&r.hash_mask,r.prev[s&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=s,s++}while(--n);r.strstart=s,r.lookahead=2,er(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=a,e.input=p,e.avail_in=o,r.wrap=i,0},Ve.deflateInfo="pako deflate (from Nodeca project)";var pr={},cr=Ke,fr=!0,lr=!0;try{String.fromCharCode.apply(null,[0])}catch{fr=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{lr=!1}for(var hr=new cr.Buf8(256),dr=0;dr<256;dr++)hr[dr]=dr>=252?6:dr>=248?5:dr>=240?4:dr>=224?3:dr>=192?2:1;function ur(e,t){if(t<65534&&(e.subarray&&lr||!e.subarray&&fr))return String.fromCharCode.apply(null,cr.shrinkBuf(e,t));for(var r="",s=0;s<t;s++)r+=String.fromCharCode(e[s]);return r}hr[254]=hr[254]=1,pr.string2buf=function(e){var t,r,s,n,i,o=e.length,a=0;for(n=0;n<o;n++)55296==(64512&(r=e.charCodeAt(n)))&&n+1<o&&(56320==(64512&(s=e.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(s-56320),n++)),a+=r<128?1:r<2048?2:r<65536?3:4;for(t=new cr.Buf8(a),i=0,n=0;i<a;n++)55296==(64512&(r=e.charCodeAt(n)))&&n+1<o&&(56320==(64512&(s=e.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(s-56320),n++)),r<128?t[i++]=r:r<2048?(t[i++]=192|r>>>6,t[i++]=128|63&r):r<65536?(t[i++]=224|r>>>12,t[i++]=128|r>>>6&63,t[i++]=128|63&r):(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63,t[i++]=128|r>>>6&63,t[i++]=128|63&r);return t},pr.buf2binstring=function(e){return ur(e,e.length)},pr.binstring2buf=function(e){for(var t=new cr.Buf8(e.length),r=0,s=t.length;r<s;r++)t[r]=e.charCodeAt(r);return t},pr.buf2string=function(e,t){var r,s,n,i,o=t||e.length,a=new Array(2*o);for(s=0,r=0;r<o;)if((n=e[r++])<128)a[s++]=n;else if((i=hr[n])>4)a[s++]=65533,r+=i-1;else{for(n&=2===i?31:3===i?15:7;i>1&&r<o;)n=n<<6|63&e[r++],i--;i>1?a[s++]=65533:n<65536?a[s++]=n:(n-=65536,a[s++]=55296|n>>10&1023,a[s++]=56320|1023&n)}return ur(a,s)},pr.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0||0===r?t:r+hr[e[r]]>t?r:t};var mr=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0},gr=Ve,yr=Ke,br=pr,wr=Ht,Pr=mr,vr=Object.prototype.toString;function Ar(e){if(!(this instanceof Ar))return new Ar(e);this.options=yr.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Pr,this.strm.avail_out=0;var r=gr.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==r)throw new Error(wr[r]);if(t.header&&gr.deflateSetHeader(this.strm,t.header),t.dictionary){var s;if(s="string"==typeof t.dictionary?br.string2buf(t.dictionary):"[object ArrayBuffer]"===vr.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(r=gr.deflateSetDictionary(this.strm,s)))throw new Error(wr[r]);this._dict_set=!0}}function Or(e,t){var r=new Ar(t);if(r.push(e,!0),r.err)throw r.msg||wr[r.err];return r.result}Ar.prototype.push=function(e,t){var r,s,n=this.strm,i=this.options.chunkSize;if(this.ended)return!1;s=t===~~t?t:!0===t?4:0,"string"==typeof e?n.input=br.string2buf(e):"[object ArrayBuffer]"===vr.call(e)?n.input=new Uint8Array(e):n.input=e,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new yr.Buf8(i),n.next_out=0,n.avail_out=i),1!==(r=gr.deflate(n,s))&&0!==r)return this.onEnd(r),this.ended=!0,!1;(0===n.avail_out||0===n.avail_in&&(4===s||2===s))&&("string"===this.options.to?this.onData(br.buf2binstring(yr.shrinkBuf(n.output,n.next_out))):this.onData(yr.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&1!==r);return 4===s?(r=gr.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):(2===s&&(this.onEnd(0),n.avail_out=0),!0)},Ar.prototype.onData=function(e){this.chunks.push(e)},Ar.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=yr.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},Ue.Deflate=Ar,Ue.deflate=Or,Ue.deflateRaw=function(e,t){return(t=t||{}).raw=!0,Or(e,t)},Ue.gzip=function(e,t){return(t=t||{}).gzip=!0,Or(e,t)};var Sr={},Tr={},kr=Ke,Er=15,Cr=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],qr=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],Dr=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],xr=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64],jr=Ke,Hr=qt,Br=jt,Lr=function(e,t){var r,s,n,i,o,a,p,c,f,l,h,d,u,m,g,y,b,w,P,v,A,O,S,T,k;r=e.state,s=e.next_in,T=e.input,n=s+(e.avail_in-5),i=e.next_out,k=e.output,o=i-(t-e.avail_out),a=i+(e.avail_out-257),p=r.dmax,c=r.wsize,f=r.whave,l=r.wnext,h=r.window,d=r.hold,u=r.bits,m=r.lencode,g=r.distcode,y=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{u<15&&(d+=T[s++]<<u,u+=8,d+=T[s++]<<u,u+=8),w=m[d&y];t:for(;;){if(d>>>=P=w>>>24,u-=P,0===(P=w>>>16&255))k[i++]=65535&w;else{if(!(16&P)){if(64&P){if(32&P){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=m[(65535&w)+(d&(1<<P)-1)];continue t}for(v=65535&w,(P&=15)&&(u<P&&(d+=T[s++]<<u,u+=8),v+=d&(1<<P)-1,d>>>=P,u-=P),u<15&&(d+=T[s++]<<u,u+=8,d+=T[s++]<<u,u+=8),w=g[d&b];;){if(d>>>=P=w>>>24,u-=P,16&(P=w>>>16&255)){if(A=65535&w,u<(P&=15)&&(d+=T[s++]<<u,(u+=8)<P&&(d+=T[s++]<<u,u+=8)),(A+=d&(1<<P)-1)>p){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=P,u-=P,A>(P=i-o)){if((P=A-P)>f&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(O=0,S=h,0===l){if(O+=c-P,P<v){v-=P;do{k[i++]=h[O++]}while(--P);O=i-A,S=k}}else if(l<P){if(O+=c+l-P,(P-=l)<v){v-=P;do{k[i++]=h[O++]}while(--P);if(O=0,l<v){v-=P=l;do{k[i++]=h[O++]}while(--P);O=i-A,S=k}}}else if(O+=l-P,P<v){v-=P;do{k[i++]=h[O++]}while(--P);O=i-A,S=k}for(;v>2;)k[i++]=S[O++],k[i++]=S[O++],k[i++]=S[O++],v-=3;v&&(k[i++]=S[O++],v>1&&(k[i++]=S[O++]))}else{O=i-A;do{k[i++]=k[O++],k[i++]=k[O++],k[i++]=k[O++],v-=3}while(v>2);v&&(k[i++]=k[O++],v>1&&(k[i++]=k[O++]))}break}if(64&P){e.msg="invalid distance code",r.mode=30;break e}w=g[(65535&w)+(d&(1<<P)-1)]}}break}}while(s<n&&i<a);s-=v=u>>3,d&=(1<<(u-=v<<3))-1,e.next_in=s,e.next_out=i,e.avail_in=s<n?n-s+5:5-(s-n),e.avail_out=i<a?a-i+257:257-(i-a),r.hold=d,r.bits=u},Rr=function(e,t,r,s,n,i,o,a){var p,c,f,l,h,d,u,m,g,y=a.bits,b=0,w=0,P=0,v=0,A=0,O=0,S=0,T=0,k=0,E=0,C=null,q=0,D=new kr.Buf16(16),x=new kr.Buf16(16),j=null,H=0;for(b=0;b<=Er;b++)D[b]=0;for(w=0;w<s;w++)D[t[r+w]]++;for(A=y,v=Er;v>=1&&0===D[v];v--);if(A>v&&(A=v),0===v)return n[i++]=20971520,n[i++]=20971520,a.bits=1,0;for(P=1;P<v&&0===D[P];P++);for(A<P&&(A=P),T=1,b=1;b<=Er;b++)if(T<<=1,(T-=D[b])<0)return-1;if(T>0&&(0===e||1!==v))return-1;for(x[1]=0,b=1;b<Er;b++)x[b+1]=x[b]+D[b];for(w=0;w<s;w++)0!==t[r+w]&&(o[x[t[r+w]]++]=w);if(0===e?(C=j=o,d=19):1===e?(C=Cr,q-=257,j=qr,H-=257,d=256):(C=Dr,j=xr,d=-1),E=0,w=0,b=P,h=i,O=A,S=0,f=-1,l=(k=1<<A)-1,1===e&&k>852||2===e&&k>592)return 1;for(;;){u=b-S,o[w]<d?(m=0,g=o[w]):o[w]>d?(m=j[H+o[w]],g=C[q+o[w]]):(m=96,g=0),p=1<<b-S,P=c=1<<O;do{n[h+(E>>S)+(c-=p)]=u<<24|m<<16|g}while(0!==c);for(p=1<<b-1;E&p;)p>>=1;if(0!==p?(E&=p-1,E+=p):E=0,w++,0==--D[b]){if(b===v)break;b=t[r+o[w]]}if(b>A&&(E&l)!==f){for(0===S&&(S=A),h+=P,T=1<<(O=b-S);O+S<v&&!((T-=D[O+S])<=0);)O++,T<<=1;if(k+=1<<O,1===e&&k>852||2===e&&k>592)return 1;n[f=E&l]=A<<24|O<<16|h-i}}return 0!==E&&(n[h+E]=b-S<<24|64<<16),a.bits=A,0},Ir=-2,Nr=12,Wr=30;function zr(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function Fr(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new jr.Buf16(320),this.work=new jr.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Kr(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new jr.Buf32(852),t.distcode=t.distdyn=new jr.Buf32(592),t.sane=1,t.back=-1,0):Ir}function Ur(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,Kr(e)):Ir}function Vr(e,t){var r,s;return!e||!e.state||(s=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15))?Ir:(null!==s.window&&s.wbits!==t&&(s.window=null),s.wrap=r,s.wbits=t,Ur(e))}function Mr(e,t){var r,s;return e?(s=new Fr,e.state=s,s.window=null,0!==(r=Vr(e,t))&&(e.state=null),r):Ir}var Zr,Xr,Yr=!0;function Gr(e){if(Yr){var t;for(Zr=new jr.Buf32(512),Xr=new jr.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(Rr(1,e.lens,0,288,Zr,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;Rr(2,e.lens,0,32,Xr,0,e.work,{bits:5}),Yr=!1}e.lencode=Zr,e.lenbits=9,e.distcode=Xr,e.distbits=5}function Qr(e,t,r,s){var n,i=e.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new jr.Buf8(i.wsize)),s>=i.wsize?(jr.arraySet(i.window,t,r-i.wsize,i.wsize,0),i.wnext=0,i.whave=i.wsize):((n=i.wsize-i.wnext)>s&&(n=s),jr.arraySet(i.window,t,r-s,n,i.wnext),(s-=n)?(jr.arraySet(i.window,t,r-s,s,0),i.wnext=s,i.whave=i.wsize):(i.wnext+=n,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=n))),0}Tr.inflateReset=Ur,Tr.inflateReset2=Vr,Tr.inflateResetKeep=Kr,Tr.inflateInit=function(e){return Mr(e,15)},Tr.inflateInit2=Mr,Tr.inflate=function(e,t){var r,s,n,i,o,a,p,c,f,l,h,d,u,m,g,y,b,w,P,v,A,O,S,T,k=0,E=new jr.Buf8(4),C=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Ir;(r=e.state).mode===Nr&&(r.mode=13),o=e.next_out,n=e.output,p=e.avail_out,i=e.next_in,s=e.input,a=e.avail_in,c=r.hold,f=r.bits,l=a,h=p,O=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;f<16;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(2&r.wrap&&35615===c){r.check=0,E[0]=255&c,E[1]=c>>>8&255,r.check=Br(r.check,E,2,0),c=0,f=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&c)<<8)+(c>>8))%31){e.msg="incorrect header check",r.mode=Wr;break}if(8!=(15&c)){e.msg="unknown compression method",r.mode=Wr;break}if(f-=4,A=8+(15&(c>>>=4)),0===r.wbits)r.wbits=A;else if(A>r.wbits){e.msg="invalid window size",r.mode=Wr;break}r.dmax=1<<A,e.adler=r.check=1,r.mode=512&c?10:Nr,c=0,f=0;break;case 2:for(;f<16;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(r.flags=c,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=Wr;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=Wr;break}r.head&&(r.head.text=c>>8&1),512&r.flags&&(E[0]=255&c,E[1]=c>>>8&255,r.check=Br(r.check,E,2,0)),c=0,f=0,r.mode=3;case 3:for(;f<32;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.head&&(r.head.time=c),512&r.flags&&(E[0]=255&c,E[1]=c>>>8&255,E[2]=c>>>16&255,E[3]=c>>>24&255,r.check=Br(r.check,E,4,0)),c=0,f=0,r.mode=4;case 4:for(;f<16;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.head&&(r.head.xflags=255&c,r.head.os=c>>8),512&r.flags&&(E[0]=255&c,E[1]=c>>>8&255,r.check=Br(r.check,E,2,0)),c=0,f=0,r.mode=5;case 5:if(1024&r.flags){for(;f<16;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.length=c,r.head&&(r.head.extra_len=c),512&r.flags&&(E[0]=255&c,E[1]=c>>>8&255,r.check=Br(r.check,E,2,0)),c=0,f=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((d=r.length)>a&&(d=a),d&&(r.head&&(A=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),jr.arraySet(r.head.extra,s,i,d,A)),512&r.flags&&(r.check=Br(r.check,s,d,i)),a-=d,i+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===a)break e;d=0;do{A=s[i+d++],r.head&&A&&r.length<65536&&(r.head.name+=String.fromCharCode(A))}while(A&&d<a);if(512&r.flags&&(r.check=Br(r.check,s,d,i)),a-=d,i+=d,A)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===a)break e;d=0;do{A=s[i+d++],r.head&&A&&r.length<65536&&(r.head.comment+=String.fromCharCode(A))}while(A&&d<a);if(512&r.flags&&(r.check=Br(r.check,s,d,i)),a-=d,i+=d,A)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;f<16;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(c!==(65535&r.check)){e.msg="header crc mismatch",r.mode=Wr;break}c=0,f=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=Nr;break;case 10:for(;f<32;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}e.adler=r.check=zr(c),c=0,f=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=o,e.avail_out=p,e.next_in=i,e.avail_in=a,r.hold=c,r.bits=f,2;e.adler=r.check=1,r.mode=Nr;case Nr:if(5===t||6===t)break e;case 13:if(r.last){c>>>=7&f,f-=7&f,r.mode=27;break}for(;f<3;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}switch(r.last=1&c,f-=1,3&(c>>>=1)){case 0:r.mode=14;break;case 1:if(Gr(r),r.mode=20,6===t){c>>>=2,f-=2;break e}break;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=Wr}c>>>=2,f-=2;break;case 14:for(c>>>=7&f,f-=7&f;f<32;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if((65535&c)!=(c>>>16^65535)){e.msg="invalid stored block lengths",r.mode=Wr;break}if(r.length=65535&c,c=0,f=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(d>a&&(d=a),d>p&&(d=p),0===d)break e;jr.arraySet(n,s,i,d,o),a-=d,i+=d,p-=d,o+=d,r.length-=d;break}r.mode=Nr;break;case 17:for(;f<14;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(r.nlen=257+(31&c),c>>>=5,f-=5,r.ndist=1+(31&c),c>>>=5,f-=5,r.ncode=4+(15&c),c>>>=4,f-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=Wr;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;f<3;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.lens[C[r.have++]]=7&c,c>>>=3,f-=3}for(;r.have<19;)r.lens[C[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},O=Rr(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,O){e.msg="invalid code lengths set",r.mode=Wr;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;y=(k=r.lencode[c&(1<<r.lenbits)-1])>>>16&255,b=65535&k,!((g=k>>>24)<=f);){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(b<16)c>>>=g,f-=g,r.lens[r.have++]=b;else{if(16===b){for(T=g+2;f<T;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(c>>>=g,f-=g,0===r.have){e.msg="invalid bit length repeat",r.mode=Wr;break}A=r.lens[r.have-1],d=3+(3&c),c>>>=2,f-=2}else if(17===b){for(T=g+3;f<T;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}f-=g,A=0,d=3+(7&(c>>>=g)),c>>>=3,f-=3}else{for(T=g+7;f<T;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}f-=g,A=0,d=11+(127&(c>>>=g)),c>>>=7,f-=7}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=Wr;break}for(;d--;)r.lens[r.have++]=A}}if(r.mode===Wr)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=Wr;break}if(r.lenbits=9,S={bits:r.lenbits},O=Rr(1,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,O){e.msg="invalid literal/lengths set",r.mode=Wr;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},O=Rr(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,O){e.msg="invalid distances set",r.mode=Wr;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(a>=6&&p>=258){e.next_out=o,e.avail_out=p,e.next_in=i,e.avail_in=a,r.hold=c,r.bits=f,Lr(e,h),o=e.next_out,n=e.output,p=e.avail_out,i=e.next_in,s=e.input,a=e.avail_in,c=r.hold,f=r.bits,r.mode===Nr&&(r.back=-1);break}for(r.back=0;y=(k=r.lencode[c&(1<<r.lenbits)-1])>>>16&255,b=65535&k,!((g=k>>>24)<=f);){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(y&&!(240&y)){for(w=g,P=y,v=b;y=(k=r.lencode[v+((c&(1<<w+P)-1)>>w)])>>>16&255,b=65535&k,!(w+(g=k>>>24)<=f);){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}c>>>=w,f-=w,r.back+=w}if(c>>>=g,f-=g,r.back+=g,r.length=b,0===y){r.mode=26;break}if(32&y){r.back=-1,r.mode=Nr;break}if(64&y){e.msg="invalid literal/length code",r.mode=Wr;break}r.extra=15&y,r.mode=22;case 22:if(r.extra){for(T=r.extra;f<T;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.length+=c&(1<<r.extra)-1,c>>>=r.extra,f-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;y=(k=r.distcode[c&(1<<r.distbits)-1])>>>16&255,b=65535&k,!((g=k>>>24)<=f);){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(!(240&y)){for(w=g,P=y,v=b;y=(k=r.distcode[v+((c&(1<<w+P)-1)>>w)])>>>16&255,b=65535&k,!(w+(g=k>>>24)<=f);){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}c>>>=w,f-=w,r.back+=w}if(c>>>=g,f-=g,r.back+=g,64&y){e.msg="invalid distance code",r.mode=Wr;break}r.offset=b,r.extra=15&y,r.mode=24;case 24:if(r.extra){for(T=r.extra;f<T;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}r.offset+=c&(1<<r.extra)-1,c>>>=r.extra,f-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=Wr;break}r.mode=25;case 25:if(0===p)break e;if(d=h-p,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=Wr;break}d>r.wnext?(d-=r.wnext,u=r.wsize-d):u=r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=n,u=o-r.offset,d=r.length;d>p&&(d=p),p-=d,r.length-=d;do{n[o++]=m[u++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===p)break e;n[o++]=r.length,p--,r.mode=21;break;case 27:if(r.wrap){for(;f<32;){if(0===a)break e;a--,c|=s[i++]<<f,f+=8}if(h-=p,e.total_out+=h,r.total+=h,h&&(e.adler=r.check=r.flags?Br(r.check,n,h,o-h):Hr(r.check,n,h,o-h)),h=p,(r.flags?c:zr(c))!==r.check){e.msg="incorrect data check",r.mode=Wr;break}c=0,f=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;f<32;){if(0===a)break e;a--,c+=s[i++]<<f,f+=8}if(c!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=Wr;break}c=0,f=0}r.mode=29;case 29:O=1;break e;case Wr:O=-3;break e;case 31:return-4;default:return Ir}return e.next_out=o,e.avail_out=p,e.next_in=i,e.avail_in=a,r.hold=c,r.bits=f,(r.wsize||h!==e.avail_out&&r.mode<Wr&&(r.mode<27||4!==t))&&Qr(e,e.output,e.next_out,h-e.avail_out),l-=e.avail_in,h-=e.avail_out,e.total_in+=l,e.total_out+=h,r.total+=h,r.wrap&&h&&(e.adler=r.check=r.flags?Br(r.check,n,h,e.next_out-h):Hr(r.check,n,h,e.next_out-h)),e.data_type=r.bits+(r.last?64:0)+(r.mode===Nr?128:0)+(20===r.mode||15===r.mode?256:0),(0===l&&0===h||4===t)&&0===O&&(O=-5),O},Tr.inflateEnd=function(e){if(!e||!e.state)return Ir;var t=e.state;return t.window&&(t.window=null),e.state=null,0},Tr.inflateGetHeader=function(e,t){var r;return e&&e.state&&2&(r=e.state).wrap?(r.head=t,t.done=!1,0):Ir},Tr.inflateSetDictionary=function(e,t){var r,s=t.length;return e&&e.state&&(0===(r=e.state).wrap||11===r.mode)?11===r.mode&&Hr(1,t,s,0)!==r.check?-3:Qr(e,t,s,s)?(r.mode=31,-4):(r.havedict=1,0):Ir},Tr.inflateInfo="pako inflate (from Nodeca project)";var Jr={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};var _r=Tr,$r=Ke,es=pr,ts=Jr,rs=Ht,ss=mr,ns=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1},is=Object.prototype.toString;function os(e){if(!(this instanceof os))return new os(e);this.options=$r.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),t.windowBits>=0&&t.windowBits<16&&!(e&&e.windowBits)&&(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ss,this.strm.avail_out=0;var r=_r.inflateInit2(this.strm,t.windowBits);if(r!==ts.Z_OK)throw new Error(rs[r]);if(this.header=new ns,_r.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=es.string2buf(t.dictionary):"[object ArrayBuffer]"===is.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(r=_r.inflateSetDictionary(this.strm,t.dictionary))!==ts.Z_OK))throw new Error(rs[r])}function as(e,t){var r=new os(t);if(r.push(e,!0),r.err)throw r.msg||rs[r.err];return r.result}os.prototype.push=function(e,t){var r,s,n,i,o,a=this.strm,p=this.options.chunkSize,c=this.options.dictionary,f=!1;if(this.ended)return!1;s=t===~~t?t:!0===t?ts.Z_FINISH:ts.Z_NO_FLUSH,"string"==typeof e?a.input=es.binstring2buf(e):"[object ArrayBuffer]"===is.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new $r.Buf8(p),a.next_out=0,a.avail_out=p),(r=_r.inflate(a,ts.Z_NO_FLUSH))===ts.Z_NEED_DICT&&c&&(r=_r.inflateSetDictionary(this.strm,c)),r===ts.Z_BUF_ERROR&&!0===f&&(r=ts.Z_OK,f=!1),r!==ts.Z_STREAM_END&&r!==ts.Z_OK)return this.onEnd(r),this.ended=!0,!1;a.next_out&&(0===a.avail_out||r===ts.Z_STREAM_END||0===a.avail_in&&(s===ts.Z_FINISH||s===ts.Z_SYNC_FLUSH))&&("string"===this.options.to?(n=es.utf8border(a.output,a.next_out),i=a.next_out-n,o=es.buf2string(a.output,n),a.next_out=i,a.avail_out=p-i,i&&$r.arraySet(a.output,a.output,n,i,0),this.onData(o)):this.onData($r.shrinkBuf(a.output,a.next_out))),0===a.avail_in&&0===a.avail_out&&(f=!0)}while((a.avail_in>0||0===a.avail_out)&&r!==ts.Z_STREAM_END);return r===ts.Z_STREAM_END&&(s=ts.Z_FINISH),s===ts.Z_FINISH?(r=_r.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===ts.Z_OK):(s===ts.Z_SYNC_FLUSH&&(this.onEnd(ts.Z_OK),a.avail_out=0),!0)},os.prototype.onData=function(e){this.chunks.push(e)},os.prototype.onEnd=function(e){e===ts.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=$r.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},Sr.Inflate=os,Sr.inflate=as,Sr.inflateRaw=function(e,t){return(t=t||{}).raw=!0,as(e,t)},Sr.ungzip=as;var ps={};(0,Ke.assign)(ps,Ue,Sr,Jr);const cs=X(ps);async function fs(e){let t=await e.byte();const r=t>>4&7;let s,n,i=15&t;if(128&t){let r=4;do{t=await e.byte(),i|=(127&t)<<r,r+=7}while(128&t)}if(6===r){let r=0;s=0;const i=[];do{t=await e.byte(),s|=(127&t)<<r,r+=7,i.push(t)}while(128&t);n=Buffer.from(i)}return 7===r&&(n=await e.read(20)),{type:r,length:i,ofs:s,reference:n}}async function ls(e){return cs.inflate(e)}var hs={exports:{}};"function"==typeof Object.create?hs.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:hs.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}};for(var ds=hs.exports,us={exports:{}},ms={},gs={byteLength:function(e){var t=As(e),r=t[0],s=t[1];return 3*(r+s)/4-s},toByteArray:function(e){var t,r,s=As(e),n=s[0],i=s[1],o=new ws(function(e,t,r){return 3*(t+r)/4-r}(0,n,i)),a=0,p=i>0?n-4:n;for(r=0;r<p;r+=4)t=bs[e.charCodeAt(r)]<<18|bs[e.charCodeAt(r+1)]<<12|bs[e.charCodeAt(r+2)]<<6|bs[e.charCodeAt(r+3)],o[a++]=t>>16&255,o[a++]=t>>8&255,o[a++]=255&t;return 2===i&&(t=bs[e.charCodeAt(r)]<<2|bs[e.charCodeAt(r+1)]>>4,o[a++]=255&t),1===i&&(t=bs[e.charCodeAt(r)]<<10|bs[e.charCodeAt(r+1)]<<4|bs[e.charCodeAt(r+2)]>>2,o[a++]=t>>8&255,o[a++]=255&t),o},fromByteArray:function(e){for(var t,r=e.length,s=r%3,n=[],i=16383,o=0,a=r-s;o<a;o+=i)n.push(Ss(e,o,o+i>a?a:o+i));return 1===s?(t=e[r-1],n.push(ys[t>>2]+ys[t<<4&63]+"==")):2===s&&(t=(e[r-2]<<8)+e[r-1],n.push(ys[t>>10]+ys[t>>4&63]+ys[t<<2&63]+"=")),n.join("")}},ys=[],bs=[],ws=typeof Uint8Array<"u"?Uint8Array:Array,Ps="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",vs=0;vs<64;++vs)ys[vs]=Ps[vs],bs[Ps.charCodeAt(vs)]=vs;function As(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function Os(e){return ys[e>>18&63]+ys[e>>12&63]+ys[e>>6&63]+ys[63&e]}function Ss(e,t,r){for(var s,n=[],i=t;i<r;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),n.push(Os(s));return n.join("")}bs["-".charCodeAt(0)]=62,bs["_".charCodeAt(0)]=63;var Ts={read:function(e,t,r,s,n){var i,o,a=8*n-s-1,p=(1<<a)-1,c=p>>1,f=-7,l=r?n-1:0,h=r?-1:1,d=e[t+l];for(l+=h,i=d&(1<<-f)-1,d>>=-f,f+=a;f>0;i=256*i+e[t+l],l+=h,f-=8);for(o=i&(1<<-f)-1,i>>=-f,f+=s;f>0;o=256*o+e[t+l],l+=h,f-=8);if(0===i)i=1-c;else{if(i===p)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,s),i-=c}return(d?-1:1)*o*Math.pow(2,i-s)},write:function(e,t,r,s,n,i){var o,a,p,c=8*i-n-1,f=(1<<c)-1,l=f>>1,h=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=s?0:i-1,u=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=f):(o=Math.floor(Math.log(t)/Math.LN2),t*(p=Math.pow(2,-o))<1&&(o--,p*=2),(t+=o+l>=1?h/p:h*Math.pow(2,1-l))*p>=2&&(o++,p/=2),o+l>=f?(a=0,o=f):o+l>=1?(a=(t*p-1)*Math.pow(2,n),o+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,n),o=0));n>=8;e[r+d]=255&a,d+=u,a/=256,n-=8);for(o=o<<n|a,c+=n;c>0;e[r+d]=255&o,d+=u,o/=256,c-=8);e[r+d-u]|=128*m}};(function(e){const t=gs,r=Ts,s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=o,e.SlowBuffer=function(e){return+e!=e&&(e=0),o.alloc(+e)},e.INSPECT_MAX_BYTES=50;const n=2147483647;function i(e){if(e>n)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,o.prototype),t}function o(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return c(e)}return a(e,t,r)}function a(e,t,r){if("string"==typeof e)return function(e,t){if(("string"!=typeof t||""===t)&&(t="utf8"),!o.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|d(e,t);let s=i(r);const n=s.write(e,t);return n!==r&&(s=s.slice(0,n)),s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return l(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return l(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return o.from(s,t,r);const n=function(e){if(o.isBuffer(e)){const t=0|h(e.length),r=i(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||Y(e.length)?i(0):f(e);if("Buffer"===e.type&&Array.isArray(e.data))return f(e.data)}(e);if(n)return n;if(typeof Symbol<"u"&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return o.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function p(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function c(e){return p(e),i(e<0?0:0|h(e))}function f(e){const t=e.length<0?0:0|h(e.length),r=i(t);for(let s=0;s<t;s+=1)r[s]=255&e[s];return r}function l(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(s,o.prototype),s}function h(e){if(e>=n)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n.toString(16)+" bytes");return 0|e}function d(e,t){if(o.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===r)return 0;let n=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return M(e).length;default:if(n)return s?-1:V(e).length;t=(""+t).toLowerCase(),n=!0}}function u(e,t,r){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0)||(r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return S(this,t,r);case"ascii":return k(this,t,r);case"latin1":case"binary":return E(this,t,r);case"base64":return O(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return q(this,t,r);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function m(e,t,r){const s=e[t];e[t]=e[r],e[r]=s}function g(e,t,r,s,n){if(0===e.length)return-1;if("string"==typeof r?(s=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Y(r=+r)&&(r=n?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(n)return-1;r=e.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof t&&(t=o.from(t,s)),o.isBuffer(t))return 0===t.length?-1:y(e,t,r,s,n);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):y(e,[t],r,s,n);throw new TypeError("val must be string, number or Buffer")}function y(e,t,r,s,n){let i,o=1,a=e.length,p=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;o=2,a/=2,p/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(n){let s=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===s?0:i-s)){if(-1===s&&(s=i),i-s+1===p)return s*o}else-1!==s&&(i-=i-s),s=-1}else for(r+p>a&&(r=a-p),i=r;i>=0;i--){let r=!0;for(let s=0;s<p;s++)if(c(e,i+s)!==c(t,s)){r=!1;break}if(r)return i}return-1}function b(e,t,r,s){r=Number(r)||0;const n=e.length-r;s?(s=Number(s))>n&&(s=n):s=n;const i=t.length;let o;for(s>i/2&&(s=i/2),o=0;o<s;++o){const s=parseInt(t.substr(2*o,2),16);if(Y(s))return o;e[r+o]=s}return o}function w(e,t,r,s){return Z(V(t,e.length-r),e,r,s)}function P(e,t,r,s){return Z(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,s)}function v(e,t,r,s){return Z(M(t),e,r,s)}function A(e,t,r,s){return Z(function(e,t){let r,s,n;const i=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),s=r>>8,n=r%256,i.push(n),i.push(s);return i}(t,e.length-r),e,r,s)}function O(e,r,s){return 0===r&&s===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(r,s))}function S(e,t,r){r=Math.min(e.length,r);const s=[];let n=t;for(;n<r;){const t=e[n];let i=null,o=t>239?4:t>223?3:t>191?2:1;if(n+o<=r){let r,s,a,p;switch(o){case 1:t<128&&(i=t);break;case 2:r=e[n+1],128==(192&r)&&(p=(31&t)<<6|63&r,p>127&&(i=p));break;case 3:r=e[n+1],s=e[n+2],128==(192&r)&&128==(192&s)&&(p=(15&t)<<12|(63&r)<<6|63&s,p>2047&&(p<55296||p>57343)&&(i=p));break;case 4:r=e[n+1],s=e[n+2],a=e[n+3],128==(192&r)&&128==(192&s)&&128==(192&a)&&(p=(15&t)<<18|(63&r)<<12|(63&s)<<6|63&a,p>65535&&p<1114112&&(i=p))}}null===i?(i=65533,o=1):i>65535&&(i-=65536,s.push(i>>>10&1023|55296),i=56320|1023&i),s.push(i),n+=o}return function(e){const t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);let r="",s=0;for(;s<t;)r+=String.fromCharCode.apply(String,e.slice(s,s+=T));return r}(s)}e.kMaxLength=n,o.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch{return!1}}(),!o.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&"function"==typeof console.error&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(o.prototype,"parent",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.buffer}}),Object.defineProperty(o.prototype,"offset",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.byteOffset}}),o.poolSize=8192,o.from=function(e,t,r){return a(e,t,r)},Object.setPrototypeOf(o.prototype,Uint8Array.prototype),Object.setPrototypeOf(o,Uint8Array),o.alloc=function(e,t,r){return function(e,t,r){return p(e),e<=0?i(e):void 0!==t?"string"==typeof r?i(e).fill(t,r):i(e).fill(t):i(e)}(e,t,r)},o.allocUnsafe=function(e){return c(e)},o.allocUnsafeSlow=function(e){return c(e)},o.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==o.prototype},o.compare=function(e,t){if(X(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),!o.isBuffer(e)||!o.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,s=t.length;for(let n=0,i=Math.min(r,s);n<i;++n)if(e[n]!==t[n]){r=e[n],s=t[n];break}return r<s?-1:s<r?1:0},o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return o.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const s=o.allocUnsafe(t);let n=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))n+t.length>s.length?(o.isBuffer(t)||(t=o.from(t)),t.copy(s,n)):Uint8Array.prototype.set.call(s,t,n);else{if(!o.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,n)}n+=t.length}return s},o.byteLength=d,o.prototype._isBuffer=!0,o.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)m(this,t,t+1);return this},o.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},o.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},o.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?S(this,0,e):u.apply(this,arguments)},o.prototype.toLocaleString=o.prototype.toString,o.prototype.equals=function(e){if(!o.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===o.compare(this,e)},o.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(o.prototype[s]=o.prototype.inspect),o.prototype.compare=function(e,t,r,s,n){if(X(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),!o.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===s&&(s=0),void 0===n&&(n=this.length),t<0||r>e.length||s<0||n>this.length)throw new RangeError("out of range index");if(s>=n&&t>=r)return 0;if(s>=n)return-1;if(t>=r)return 1;if(this===e)return 0;let i=(n>>>=0)-(s>>>=0),a=(r>>>=0)-(t>>>=0);const p=Math.min(i,a),c=this.slice(s,n),f=e.slice(t,r);for(let o=0;o<p;++o)if(c[o]!==f[o]){i=c[o],a=f[o];break}return i<a?-1:a<i?1:0},o.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},o.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},o.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},o.prototype.write=function(e,t,r,s){if(void 0===t)s="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)s=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===s&&(s="utf8")):(s=r,r=void 0)}const n=this.length-t;if((void 0===r||r>n)&&(r=n),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let i=!1;for(;;)switch(s){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":case"latin1":case"binary":return P(this,e,t,r);case"base64":return v(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),i=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const T=4096;function k(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(127&e[n]);return s}function E(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(e[n]);return s}function C(e,t,r){const s=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>s)&&(r=s);let n="";for(let i=t;i<r;++i)n+=G[e[i]];return n}function q(e,t,r){const s=e.slice(t,r);let n="";for(let i=0;i<s.length-1;i+=2)n+=String.fromCharCode(s[i]+256*s[i+1]);return n}function D(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function x(e,t,r,s,n,i){if(!o.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<i)throw new RangeError('"value" argument is out of bounds');if(r+s>e.length)throw new RangeError("Index out of range")}function j(e,t,r,s,n){z(t,s,n,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function H(e,t,r,s,n){z(t,s,n,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function B(e,t,r,s,n,i){if(r+s>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(e,t,s,n,i){return t=+t,s>>>=0,i||B(e,0,s,4),r.write(e,t,s,n,23,4),s+4}function R(e,t,s,n,i){return t=+t,s>>>=0,i||B(e,0,s,8),r.write(e,t,s,n,52,8),s+8}o.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,o.prototype),s},o.prototype.readUintLE=o.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||D(e,t,this.length);let s=this[e],n=1,i=0;for(;++i<t&&(n*=256);)s+=this[e+i]*n;return s},o.prototype.readUintBE=o.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||D(e,t,this.length);let s=this[e+--t],n=1;for(;t>0&&(n*=256);)s+=this[e+--t]*n;return s},o.prototype.readUint8=o.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},o.prototype.readUint16LE=o.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},o.prototype.readUint16BE=o.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},o.prototype.readUint32LE=o.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},o.prototype.readUint32BE=o.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},o.prototype.readBigUInt64LE=Q((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];(void 0===t||void 0===r)&&K(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,n=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(s)+(BigInt(n)<<BigInt(32))})),o.prototype.readBigUInt64BE=Q((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];(void 0===t||void 0===r)&&K(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],n=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(s)<<BigInt(32))+BigInt(n)})),o.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||D(e,t,this.length);let s=this[e],n=1,i=0;for(;++i<t&&(n*=256);)s+=this[e+i]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*t)),s},o.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||D(e,t,this.length);let s=t,n=1,i=this[e+--s];for(;s>0&&(n*=256);)i+=this[e+--s]*n;return n*=128,i>=n&&(i-=Math.pow(2,8*t)),i},o.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},o.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},o.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},o.prototype.readBigInt64LE=Q((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];(void 0===t||void 0===r)&&K(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),o.prototype.readBigInt64BE=Q((function(e){F(e>>>=0,"offset");const t=this[e],r=this[e+7];(void 0===t||void 0===r)&&K(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),o.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),r.read(this,e,!0,23,4)},o.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),r.read(this,e,!1,23,4)},o.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),r.read(this,e,!0,52,8)},o.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),r.read(this,e,!1,52,8)},o.prototype.writeUintLE=o.prototype.writeUIntLE=function(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){x(this,e,t,r,Math.pow(2,8*r)-1,0)}let n=1,i=0;for(this[t]=255&e;++i<r&&(n*=256);)this[t+i]=e/n&255;return t+r},o.prototype.writeUintBE=o.prototype.writeUIntBE=function(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){x(this,e,t,r,Math.pow(2,8*r)-1,0)}let n=r-1,i=1;for(this[t+n]=255&e;--n>=0&&(i*=256);)this[t+n]=e/i&255;return t+r},o.prototype.writeUint8=o.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,1,255,0),this[t]=255&e,t+1},o.prototype.writeUint16LE=o.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},o.prototype.writeUint16BE=o.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},o.prototype.writeUint32LE=o.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},o.prototype.writeUint32BE=o.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},o.prototype.writeBigUInt64LE=Q((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),o.prototype.writeBigUInt64BE=Q((function(e,t=0){return H(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),o.prototype.writeIntLE=function(e,t,r,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*r-1);x(this,e,t,r,s-1,-s)}let n=0,i=1,o=0;for(this[t]=255&e;++n<r&&(i*=256);)e<0&&0===o&&0!==this[t+n-1]&&(o=1),this[t+n]=(e/i|0)-o&255;return t+r},o.prototype.writeIntBE=function(e,t,r,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*r-1);x(this,e,t,r,s-1,-s)}let n=r-1,i=1,o=0;for(this[t+n]=255&e;--n>=0&&(i*=256);)e<0&&0===o&&0!==this[t+n+1]&&(o=1),this[t+n]=(e/i|0)-o&255;return t+r},o.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},o.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},o.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},o.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},o.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},o.prototype.writeBigInt64LE=Q((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),o.prototype.writeBigInt64BE=Q((function(e,t=0){return H(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),o.prototype.writeFloatLE=function(e,t,r){return L(this,e,t,!0,r)},o.prototype.writeFloatBE=function(e,t,r){return L(this,e,t,!1,r)},o.prototype.writeDoubleLE=function(e,t,r){return R(this,e,t,!0,r)},o.prototype.writeDoubleBE=function(e,t,r){return R(this,e,t,!1,r)},o.prototype.copy=function(e,t,r,s){if(!o.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),!s&&0!==s&&(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<r&&(s=r),s===r||0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-r&&(s=e.length-t+r);const n=s-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,s):Uint8Array.prototype.set.call(e,this.subarray(r,s),t),n},o.prototype.fill=function(e,t,r,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,r=this.length):"string"==typeof r&&(s=r,r=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!o.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let n;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(n=t;n<r;++n)this[n]=e;else{const i=o.isBuffer(e)?e:o.from(e,s),a=i.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(n=0;n<r-t;++n)this[n+t]=i[n%a]}return this};const I={};function N(e,t,r){I[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function W(e){let t="",r=e.length;const s="-"===e[0]?1:0;for(;r>=s+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function z(e,t,r,s,n,i){if(e>r||e<t){const s="bigint"==typeof t?"n":"";let n;throw n=i>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(i+1)}${s}`:`>= -(2${s} ** ${8*(i+1)-1}${s}) and < 2 ** ${8*(i+1)-1}${s}`:`>= ${t}${s} and <= ${r}${s}`,new I.ERR_OUT_OF_RANGE("value",n,e)}!function(e,t,r){F(t,"offset"),(void 0===e[t]||void 0===e[t+r])&&K(t,e.length-(r+1))}(s,n,i)}function F(e,t){if("number"!=typeof e)throw new I.ERR_INVALID_ARG_TYPE(t,"number",e)}function K(e,t,r){throw Math.floor(e)!==e?(F(e,r),new I.ERR_OUT_OF_RANGE(r||"offset","an integer",e)):t<0?new I.ERR_BUFFER_OUT_OF_BOUNDS:new I.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}N("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),N("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),N("ERR_OUT_OF_RANGE",(function(e,t,r){let s=`The value of "${e}" is out of range.`,n=r;return Number.isInteger(r)&&Math.abs(r)>2**32?n=W(String(r)):"bigint"==typeof r&&(n=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(n=W(n)),n+="n"),s+=` It must be ${t}. Received ${n}`,s}),RangeError);const U=/[^+/0-9A-Za-z-_]/g;function V(e,t){let r;t=t||1/0;const s=e.length;let n=null;const i=[];for(let o=0;o<s;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!n){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===s){(t-=3)>-1&&i.push(239,191,189);continue}n=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(t-=3)>-1&&i.push(239,191,189);if(n=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function M(e){return t.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Z(e,t,r,s){let n;for(n=0;n<s&&!(n+r>=t.length||n>=e.length);++n)t[n+r]=e[n];return n}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const G=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const s=16*r;for(let n=0;n<16;++n)t[s+n]=e[r]+e[n]}return t}();function Q(e){return typeof BigInt>"u"?J:e}function J(){throw new Error("BigInt not supported")}})(ms),function(e,t){var r=ms,s=r.Buffer;function n(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return s(e,t,r)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=r:(n(r,t),t.Buffer=i),i.prototype=Object.create(s.prototype),n(s,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=s(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}}(us,us.exports);var ks=us.exports,Es=ks.Buffer;function Cs(e,t){this._block=Es.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}Cs.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=Es.from(e,t));for(var r=this._block,s=this._blockSize,n=e.length,i=this._len,o=0;o<n;){for(var a=i%s,p=Math.min(n-o,s-a),c=0;c<p;c++)r[a+c]=e[o+c];o+=p,(i+=p)%s==0&&this._update(r)}return this._len+=n,this},Cs.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var s=(4294967295&r)>>>0,n=(r-s)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(s,this._blockSize-4)}this._update(this._block);var i=this._hash();return e?i.toString(e):i},Cs.prototype._update=function(){throw new Error("_update must be implemented by subclass")};var qs=ds,Ds=Cs,xs=ks.Buffer,js=[1518500249,1859775393,-1894007588,-899497514],Hs=new Array(80);function Bs(){this.init(),this._w=Hs,Ds.call(this,64,56)}function Ls(e){return e<<1|e>>>31}function Rs(e){return e<<5|e>>>27}function Is(e){return e<<30|e>>>2}function Ns(e,t,r,s){return 0===e?t&r|~t&s:2===e?t&r|t&s|r&s:t^r^s}qs(Bs,Ds),Bs.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Bs.prototype._update=function(e){for(var t=this._w,r=0|this._a,s=0|this._b,n=0|this._c,i=0|this._d,o=0|this._e,a=0;a<16;++a)t[a]=e.readInt32BE(4*a);for(;a<80;++a)t[a]=Ls(t[a-3]^t[a-8]^t[a-14]^t[a-16]);for(var p=0;p<80;++p){var c=~~(p/20),f=Rs(r)+Ns(c,s,n,i)+o+t[p]+js[c]|0;o=i,i=n,n=Is(s),s=r,r=f}this._a=r+this._a|0,this._b=s+this._b|0,this._c=n+this._c|0,this._d=i+this._d|0,this._e=o+this._e|0},Bs.prototype._hash=function(){var e=xs.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e};const Ws=X(Bs);let zs=null;async function Fs(e){return null===zs&&(zs=await async function(){try{if("da39a3ee5e6b4b0d3255bfef95601890afd80709"===await Ks(new Uint8Array([])))return!0}catch{}return!1}()),zs?Ks(e):function(e){return(new Ws).update(e).digest("hex")}(e)}async function Ks(e){return function(e){let t="";for(const r of new Uint8Array(e))r<16&&(t+="0"),t+=r.toString(16);return t}(await crypto.subtle.digest("SHA-1",e))}class Us{constructor(e){Object.assign(this,e),this.offsetCache={}}static async fromIdx({idx:e,getExternalRefDelta:t}){const r=new Ne(e);if("ff744f63"!==r.slice(4).toString("hex"))return;const s=r.readUInt32BE();if(2!==s)throw new we(`Unable to read version ${s} packfile IDX. (Only version 2 supported)`);if(e.byteLength>2147483648)throw new we("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");r.seek(r.tell()+1020);const n=r.readUInt32BE(),i=[];for(let p=0;p<n;p++){const e=r.slice(20).toString("hex");i[p]=e}r.seek(r.tell()+4*n);const o=new Map;for(let p=0;p<n;p++)o.set(i[p],r.readUInt32BE());const a=r.slice(20).toString("hex");return new Us({hashes:i,crcs:{},offsets:o,packfileSha:a,getExternalRefDelta:t})}static async fromPack({pack:e,getExternalRefDelta:t,onProgress:r}){const s={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},n={},i=e.slice(-20).toString("hex"),o=[],a={},p=new Map;let c=null,f=null;await async function(e,t){const r=new me(e);let s=await r.read(4);if(s=s.toString("utf8"),"PACK"!==s)throw new we(`Invalid PACK header '${s}'`);let n=await r.read(4);if(n=n.readUInt32BE(0),2!==n)throw new we(`Invalid packfile version: ${n}`);let i=await r.read(4);if(i=i.readUInt32BE(0),!(i<1))for(;!r.eof()&&i--;){const e=r.tell(),{type:s,length:n,ofs:o,reference:a}=await fs(r),p=new cs.Inflate;for(;!p.result;){const c=await r.chunk();if(!c)break;if(p.push(c,!1),p.err)throw new we(`Pako error: ${p.msg}`);if(p.result){if(p.result.length!==n)throw new we("Inflated object size is different from that stated in packfile.");await r.undo(),await r.read(c.length-p.strm.avail_in);const f=r.tell();await t({data:p.result,type:s,num:i,offset:e,end:f,reference:a,ofs:o})}}}}([e],(async({data:e,type:t,reference:i,offset:o,num:a})=>{null===c&&(c=a);const p=Math.floor(100*(c-a)/c);p!==f&&r&&await r({phase:"Receiving objects",loaded:c-a,total:c}),f=p,(["commit","tree","blob","tag"].includes(t=s[t])||"ofs-delta"===t||"ref-delta"===t)&&(n[o]={type:t,offset:o})}));const l=Object.keys(n).map(Number);for(const[m,g]of l.entries()){const t=m+1===l.length?e.byteLength-20:l[m+1],r=n[g],s=Re.buf(e.slice(g,t))>>>0;r.end=t,r.crc=s}const h=new Us({pack:Promise.resolve(e),packfileSha:i,crcs:a,hashes:o,offsets:p,getExternalRefDelta:t});f=null;let d=0;const u=[0,0,0,0,0,0,0,0,0,0,0,0];for(let m in n){m=Number(m);const e=Math.floor(100*d/c);e!==f&&r&&await r({phase:"Resolving deltas",loaded:d,total:c}),d++,f=e;const t=n[m];if(!t.oid)try{h.readDepth=0,h.externalReadDepth=0;const{type:e,object:r}=await h.readSlice({start:m});u[h.readDepth]+=1;const s=await Fs(Ie.wrap({type:e,object:r}));t.oid=s,o.push(s),p.set(s,m),a[s]=t.crc}catch{continue}}return o.sort(),h}async toBuffer(){const e=[],t=(t,r)=>{e.push(Buffer.from(t,r))};t("ff744f63","hex"),t("00000002","hex");const r=new Ne(Buffer.alloc(1024));for(let p=0;p<256;p++){let e=0;for(const t of this.hashes)parseInt(t.slice(0,2),16)<=p&&e++;r.writeUInt32BE(e)}e.push(r.buffer);for(const p of this.hashes)t(p,"hex");const s=new Ne(Buffer.alloc(4*this.hashes.length));for(const p of this.hashes)s.writeUInt32BE(this.crcs[p]);e.push(s.buffer);const n=new Ne(Buffer.alloc(4*this.hashes.length));for(const p of this.hashes)n.writeUInt32BE(this.offsets.get(p));e.push(n.buffer),t(this.packfileSha,"hex");const i=Buffer.concat(e),o=await Fs(i),a=Buffer.alloc(20);return a.write(o,"hex"),Buffer.concat([i,a])}async load({pack:e}){this.pack=e}async unload(){this.pack=null}async read({oid:e}){if(!this.offsets.get(e)){if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(e);throw new we(`Could not read object ${e} from packfile`)}const t=this.offsets.get(e);return this.readSlice({start:t})}async readSlice({start:e}){if(this.offsetCache[e])return Object.assign({},this.offsetCache[e]);this.readDepth++;if(!this.pack)throw new we("Tried to read from a GitPackIndex with no packfile loaded into memory");const t=(await this.pack).slice(e),r=new Ne(t),s=r.readUInt8(),n=112&s;let i={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"}[n];if(void 0===i)throw new we("Unrecognized type: 0b"+n.toString(2));const o=15&s;let a=o;128&s&&(a=function(e,t){let r=t,s=4,n=null;do{n=e.readUInt8(),r|=(127&n)<<s,s+=7}while(128&n);return r}(r,o));let p=null,c=null;if("ofs_delta"===i){const t=function(e){const t=[];let r=0,s=0;do{r=e.readUInt8();const n=127&r;t.push(n),s=128&r}while(s);return t.reduce(((e,t)=>e+1<<7|t),-1)}(r),s=e-t;({object:p,type:i}=await this.readSlice({start:s}))}if("ref_delta"===i){const e=r.slice(20).toString("hex");({object:p,type:i}=await this.read({oid:e}))}const f=t.slice(r.tell());if(c=Buffer.from(await ls(f)),c.byteLength!==a)throw new we(`Packfile told us object would have length ${a} but it had length ${c.byteLength}`);return p&&(c=Buffer.from(function(e,t){const r=new Ne(e),s=We(r);if(s!==t.byteLength)throw new we(`applyDelta expected source buffer to be ${s} bytes but the provided buffer was ${t.length} bytes`);const n=We(r);let i;const o=Fe(r,t);if(o.byteLength===n)i=o;else{i=Buffer.alloc(n);const e=new Ne(i);for(e.copy(o);!r.eof();)e.copy(Fe(r,t));const s=e.tell();if(n!==s)throw new we(`applyDelta expected target buffer to be ${n} bytes but the resulting buffer was ${s} bytes`)}return i}(c,p))),this.readDepth>3&&(this.offsetCache[e]={type:i,object:c}),{type:i,format:"content",object:c}}}class Vs extends be{constructor(e){super(`Expected a 40-char hex object id but saw "${e}".`),this.code=this.name=Vs.code,this.data={value:e}}}Vs.code="InvalidOidError";class Ms extends be{constructor(e,t,r,s){super(`Object ${e} ${s?`at ${s}`:""}was anticipated to be a ${r} but it is a ${t}.`),this.code=this.name=Ms.code,this.data={oid:e,actual:t,expected:r,filepath:s}}}async function Zs(e,t){const r=ue(e);for(;;){const{value:e,done:s}=await r.next();if(e&&await t(e),s)break}r.return&&r.return()}async function Xs(e){let t=0;const r=[];await Zs(e,(e=>{r.push(e),t+=e.byteLength}));const s=new Uint8Array(t);let n=0;for(const i of r)s.set(i,n),n+=i.byteLength;return s}Ms.code="ObjectTypeError";class Ys{constructor(){this._queue=[]}write(e){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){const t=this._waiting;this._waiting=null,t({value:e})}else this._queue.push(e)}end(){if(this._ended=!0,this._waiting){const e=this._waiting;this._waiting=null,e({done:!0})}}destroy(e){this.error=e,this.end()}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise((e=>{this._waiting=e}))}}class Gs{static demux(e){const t=ye.streamReader(e),r=new Ys,s=new Ys,n=new Ys,i=async function(){const o=await t();if(null===o)return i();if(!0===o)return r.end(),n.end(),void(e.error?s.destroy(e.error):s.end());switch(o[0]){case 1:s.write(o.slice(1));break;case 2:n.write(o.slice(1));break;case 3:{const e=o.slice(1);return n.write(e),r.end(),n.end(),void s.destroy(new Error(e.toString("utf8")))}default:r.write(o)}i()};return i(),{packetlines:r,packfile:s,progress:n}}}async function Qs(e){const{packetlines:t,packfile:r,progress:s}=Gs.demux(e),n=[],i=[],o=[];let a=!1,p=!1;return new Promise(((c,f)=>{Zs(t,(t=>{const l=t.toString("utf8").trim();if(l.startsWith("shallow")){const e=l.slice(-41).trim();40!==e.length&&f(new Vs(e)),n.push(e)}else if(l.startsWith("unshallow")){const e=l.slice(-41).trim();40!==e.length&&f(new Vs(e)),i.push(e)}else if(l.startsWith("ACK")){const[,e,t]=l.split(" ");o.push({oid:e,status:t}),t||(p=!0)}else l.startsWith("NAK")?(a=!0,p=!0):(p=!0,a=!0);p&&(e.error?f(e.error):c({shallows:n,unshallows:i,acks:o,nak:a,packfile:r,progress:s}))})).finally((()=>{p||(e.error?f(e.error):c({shallows:n,unshallows:i,acks:o,nak:a,packfile:r,progress:s}))}))}))}async function Js(e,t,r){const s=await tn(e,t),n=await async function(e,t,r){const s=await e.read({oid:t});sn(s);const n=await e.read({oid:s.object.tree});sn(n);const i={};for(const o of r){let t=n;const r=o.split("/");for(const s of r){if("tree"!==t.type)throw new Error(`Path not found in the repo: ${o}`);let r=!1;for(const n of t.object)if(n.path===s){try{t=await e.read({oid:n.oid}),sn(t)}catch{t=n}r=!0;break}if(!r)throw new Error(`Path not found in the repo: ${o}`)}i[o]=t}return i}(s,t,r),i=await async function(e,t){const r=ms.Buffer.from(await Xs([...t.map((e=>ye.encode(`want ${e} multi_ack_detailed no-done side-band-64k thin-pack ofs-delta agent=git/2.37.3 \n`))),ye.flush(),ye.encode("done\n")])),s=await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${r.length}`},body:r}),n=nn(s.body),i=await Qs(n),o=ms.Buffer.from(await Xs(i.packfile));return await Us.fromPack({pack:o})}(e,r.map((e=>n[e].oid))),o={};return await Promise.all(r.map((async e=>{o[e]=await rn(i,n[e].oid)}))),o}async function _s(e,t){const r=await tn(e,t),s=await async function(e,t){const r=await e.read({oid:t});sn(r);const s=await e.read({oid:r.object.tree}),n=[s];for(;n.length>0;){const t=n.pop(),r=await e.read({oid:t.oid});if(sn(r),t.object=r.object,"tree"===r.type)for(const e of r.object)"tree"===e.type&&n.push(e)}return s}(r,t);return null!=s&&s.object?en(s):[]}async function $s(e,t){switch(("infer"===t.type||void 0===t.type)&&(["","HEAD"].includes(t.value)?t={value:t.value,type:"refname"}:"string"==typeof t.value&&40===t.value.length&&(t={value:t.value,type:"commit"})),"branch"===t.type&&(t={value:`refs/heads/${t.value}`,type:"refname"}),t.type){case"commit":return t.value;case"refname":{const r=await async function(e,t){const r=ms.Buffer.from(await Xs([ye.encode("command=ls-refs\n"),ye.encode("agent=git/2.37.3\n"),ye.encode("object-format=sha1\n"),ye.delim(),ye.encode("peel\n"),ye.encode(`ref-prefix ${t}\n`),ye.flush()])),s=await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${r.length}`,"Git-Protocol":"version=2"},body:r}),n={};for await(const i of async function*(e){const t=await e.text();let r=0;for(;r<=t.length;){const e=parseInt(t.substring(r,r+4),16);if(0===e)break;yield t.substring(r+4,r+e),r+=e}}(s)){const e=i.indexOf(" "),t=i.slice(0,e);n[i.slice(e+1,i.length-1)]=t}return n}(e,t.value);if(!(t.value in r))throw new Error(`Branch ${t.value} not found`);return r[t.value]}default:throw new Error(`Invalid ref type: ${t.type}`)}}function en(e){return e.object.map((e=>"blob"===e.type?{name:e.path,type:"file"}:"tree"===e.type&&e.object?{name:e.path,type:"folder",children:en(e)}:void 0)).filter((e=>!(null==e||!e.name)))}async function tn(e,t){const r=ms.Buffer.from(await Xs([ye.encode(`want ${t} multi_ack_detailed no-done side-band-64k thin-pack ofs-delta agent=git/2.37.3 filter \n`),ye.encode("filter blob:none\n"),ye.encode(`shallow ${t}\n`),ye.encode("deepen 1\n"),ye.flush(),ye.encode("done\n"),ye.encode("done\n")])),s=nn((await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${r.length}`},body:r})).body),n=await Qs(s),i=ms.Buffer.from(await Xs(n.packfile)),o=await Us.fromPack({pack:i}),a=o.read;return o.read=async function({oid:e,...t}){const r=await a.call(this,{oid:e,...t});return r.oid=e,r},o}async function rn(e,t){const r=await e.read({oid:t});if(sn(r),"blob"===r.type)return r.object;const s={};for(const{path:n,oid:i,type:o}of r.object)if("blob"===o){const t=await e.read({oid:i});sn(t),s[n]=t.object}else"tree"===o&&(s[n]=await rn(e,i));return s}function sn(e){if(e.object instanceof ms.Buffer)switch(e.type){case"commit":e.object=Be.from(e.object).parse();break;case"tree":e.object=Ee.from(e.object).entries();break;case"blob":e.object=new Uint8Array(e.object),e.format="content";break;case"tag":e.object=je.from(e.object).parse();break;default:throw new Ms(e.oid,e.type,"blob|commit|tag|tree")}}function nn(e){if(e[Symbol.asyncIterator])return e;const t=e.getReader();return{next:()=>t.read(),return:()=>(t.releaseLock(),{}),[Symbol.asyncIterator](){return this}}}typeof window<"u"&&(window.Buffer=ms.Buffer);const on=Symbol("Comlink.proxy"),an=Symbol("Comlink.endpoint"),pn=Symbol("Comlink.releaseProxy"),cn=Symbol("Comlink.finalizer"),fn=Symbol("Comlink.thrown"),ln=e=>"object"==typeof e&&null!==e||"function"==typeof e,hn={canHandle:e=>ln(e)&&e[on],serialize(e){const{port1:t,port2:r}=new MessageChannel;return mn(e,t),[r,[r]]},deserialize:e=>(e.start(),yn(e))},dn={canHandle:e=>ln(e)&&fn in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){throw e.isError?Object.assign(new Error(e.value.message),e.value):e.value}},un=new Map([["proxy",hn],["throw",dn]]);function mn(e,t=globalThis,r=["*"]){t.addEventListener("message",(function s(n){if(!n||!n.data)return;if(!function(e,t){for(const r of e)if(t===r||"*"===r||r instanceof RegExp&&r.test(t))return!0;return!1}(r,n.origin))return void console.warn(`Invalid origin '${n.origin}' for comlink proxy`);const{id:i,type:o,path:a}=Object.assign({path:[]},n.data),p=(n.data.argumentList||[]).map(Cn);let c;try{const t=a.slice(0,-1).reduce(((e,t)=>e[t]),e),r=a.reduce(((e,t)=>e[t]),e);switch(o){case"GET":c=r;break;case"SET":t[a.slice(-1)[0]]=Cn(n.data.value),c=!0;break;case"APPLY":c=r.apply(t,p);break;case"CONSTRUCT":c=kn(new r(...p));break;case"ENDPOINT":{const{port1:t,port2:r}=new MessageChannel;mn(e,r),c=function(e,t){return Tn.set(e,t),e}(t,[t])}break;case"RELEASE":c=void 0;break;default:return}}catch(f){c={value:f,[fn]:0}}Promise.resolve(c).catch((e=>({value:e,[fn]:0}))).then((r=>{const[n,a]=En(r);t.postMessage(Object.assign(Object.assign({},n),{id:i}),a),"RELEASE"===o&&(t.removeEventListener("message",s),gn(t),cn in e&&"function"==typeof e[cn]&&e[cn]())})).catch((e=>{const[r,s]=En({value:new TypeError("Unserializable return value"),[fn]:0});t.postMessage(Object.assign(Object.assign({},r),{id:i}),s)}))})),t.start&&t.start()}function gn(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function yn(e,t){return An(e,[],t)}function bn(e){if(e)throw new Error("Proxy has been released and is not useable")}function wn(e){return qn(e,{type:"RELEASE"}).then((()=>{gn(e)}))}const Pn=new WeakMap,vn="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const t=(Pn.get(e)||0)-1;Pn.set(e,t),0===t&&wn(e)}));function An(e,t=[],r=function(){}){let s=!1;const n=new Proxy(r,{get(r,i){if(bn(s),i===pn)return()=>{(function(e){vn&&vn.unregister(e)})(n),wn(e),s=!0};if("then"===i){if(0===t.length)return{then:()=>n};const r=qn(e,{type:"GET",path:t.map((e=>e.toString()))}).then(Cn);return r.then.bind(r)}return An(e,[...t,i])},set(r,n,i){bn(s);const[o,a]=En(i);return qn(e,{type:"SET",path:[...t,n].map((e=>e.toString())),value:o},a).then(Cn)},apply(r,n,i){bn(s);const o=t[t.length-1];if(o===an)return qn(e,{type:"ENDPOINT"}).then(Cn);if("bind"===o)return An(e,t.slice(0,-1));const[a,p]=Sn(i);return qn(e,{type:"APPLY",path:t.map((e=>e.toString())),argumentList:a},p).then(Cn)},construct(r,n){bn(s);const[i,o]=Sn(n);return qn(e,{type:"CONSTRUCT",path:t.map((e=>e.toString())),argumentList:i},o).then(Cn)}});return function(e,t){const r=(Pn.get(t)||0)+1;Pn.set(t,r),vn&&vn.register(e,t,e)}(n,e),n}function On(e){return Array.prototype.concat.apply([],e)}function Sn(e){const t=e.map(En);return[t.map((e=>e[0])),On(t.map((e=>e[1])))]}const Tn=new WeakMap;function kn(e){return Object.assign(e,{[on]:!0})}function En(e){for(const[t,r]of un)if(r.canHandle(e)){const[s,n]=r.serialize(e);return[{type:"HANDLER",name:t,value:s},n]}return[{type:"RAW",value:e},Tn.get(e)||[]]}function Cn(e){switch(e.type){case"HANDLER":return un.get(e.name).deserialize(e.value);case"RAW":return e.value}}function qn(e,t,r){return new Promise((s=>{const n=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");e.addEventListener("message",(function t(r){!r.data||!r.data.id||r.data.id!==n||(e.removeEventListener("message",t),s(r.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:n},t),r)}))}function Dn(e,t=void 0){!function(){if(jn)return;jn=!0,un.set("EVENT",{canHandle:e=>e instanceof CustomEvent,serialize:e=>[{detail:e.detail},[]],deserialize:e=>e}),un.set("FUNCTION",{canHandle:e=>"function"==typeof e,serialize(e){const{port1:t,port2:r}=new MessageChannel;return mn(e,t),[r,[r]]},deserialize:e=>(e.start(),yn(e))}),un.set("PHPResponse",{canHandle:e=>"object"==typeof e&&null!==e&&"headers"in e&&"bytes"in e&&"errors"in e&&"exitCode"in e&&"httpStatusCode"in e,serialize:e=>[e.toRawData(),[]],deserialize:e=>Z.fromRawData(e)});const e=un.get("throw"),t=null==e?void 0:e.serialize;e.serialize=({value:e})=>{const r=t({value:e});return e.response&&(r[0].value.response=e.response),e.source&&(r[0].value.source=e.source),r}}();const r=e instanceof Worker?e:function(e,t=globalThis,r="*"){return{postMessage:(t,s)=>e.postMessage(t,r,s),addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t)}}(e,t),s=yn(r),n=Hn(s);return new Proxy(n,{get:(e,t)=>"isConnected"===t?async()=>{for(;;)try{await xn(s.isConnected(),200);break}catch{}}:s[t]})}async function xn(e,t){return new Promise(((r,s)=>{setTimeout(s,t),e.then(r)}))}let jn=!1;function Hn(e){return new Proxy(e,{get(e,t){switch(typeof e[t]){case"function":return(...r)=>e[t](...r);case"object":return null===e[t]?e[t]:Hn(e[t]);case"undefined":case"number":case"string":return e[t];default:return kn(e[t])}}})}function Bn(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[t,e])))}Bn({server_name:0,max_fragment_length:1,client_certificate_url:2,trusted_ca_keys:3,truncated_hmac:4,status_request:5,user_mapping:6,client_authz:7,server_authz:8,cert_type:9,supported_groups:10,ec_point_formats:11,srp:12,signature_algorithms:13,use_srtp:14,heartbeat:15,application_layer_protocol_negotiation:16,status_request_v2:17,signed_certificate_timestamp:18,client_certificate_type:19,server_certificate_type:20,padding:21,encrypt_then_mac:22,extended_master_secret:23,token_binding:24,cached_info:25,tls_its:26,compress_certificate:27,record_size_limit:28,pwd_protect:29,pwo_clear:30,password_salt:31,ticket_pinning:32,tls_cert_with_extern_psk:33,delegated_credential:34,session_ticket:35,TLMSP:36,TLMSP_proxying:37,TLMSP_delegate:38,supported_ekt_ciphers:39,pre_shared_key:41,early_data:42,supported_versions:43,cookie:44,psk_key_exchange_modes:45,reserved:46,certificate_authorities:47,oid_filters:48,post_handshake_auth:49,signature_algorithms_cert:50,key_share:51,transparency_info:52,connection_id:54});Bn({host_name:0});Bn({TLS1_CK_PSK_WITH_RC4_128_SHA:138,TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA:139,TLS1_CK_PSK_WITH_AES_128_CBC_SHA:140,TLS1_CK_PSK_WITH_AES_256_CBC_SHA:141,TLS1_CK_DHE_PSK_WITH_RC4_128_SHA:142,TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA:143,TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA:144,TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA:145,TLS1_CK_RSA_PSK_WITH_RC4_128_SHA:146,TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA:147,TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA:148,TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA:149,TLS1_CK_PSK_WITH_AES_128_GCM_SHA256:168,TLS1_CK_PSK_WITH_AES_256_GCM_SHA384:169,TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256:170,TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384:171,TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256:172,TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384:173,TLS1_CK_PSK_WITH_AES_128_CBC_SHA256:174,TLS1_CK_PSK_WITH_AES_256_CBC_SHA384:175,TLS1_CK_PSK_WITH_NULL_SHA256:176,TLS1_CK_PSK_WITH_NULL_SHA384:177,TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256:178,TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384:179,TLS1_CK_DHE_PSK_WITH_NULL_SHA256:180,TLS1_CK_DHE_PSK_WITH_NULL_SHA384:181,TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256:182,TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384:183,TLS1_CK_RSA_PSK_WITH_NULL_SHA256:184,TLS1_CK_RSA_PSK_WITH_NULL_SHA384:185,TLS1_CK_PSK_WITH_NULL_SHA:44,TLS1_CK_DHE_PSK_WITH_NULL_SHA:45,TLS1_CK_RSA_PSK_WITH_NULL_SHA:46,TLS1_CK_RSA_WITH_AES_128_SHA:47,TLS1_CK_DH_DSS_WITH_AES_128_SHA:48,TLS1_CK_DH_RSA_WITH_AES_128_SHA:49,TLS1_CK_DHE_DSS_WITH_AES_128_SHA:50,TLS1_CK_DHE_RSA_WITH_AES_128_SHA:51,TLS1_CK_ADH_WITH_AES_128_SHA:52,TLS1_CK_RSA_WITH_AES_256_SHA:53,TLS1_CK_DH_DSS_WITH_AES_256_SHA:54,TLS1_CK_DH_RSA_WITH_AES_256_SHA:55,TLS1_CK_DHE_DSS_WITH_AES_256_SHA:56,TLS1_CK_DHE_RSA_WITH_AES_256_SHA:57,TLS1_CK_ADH_WITH_AES_256_SHA:58,TLS1_CK_RSA_WITH_NULL_SHA256:59,TLS1_CK_RSA_WITH_AES_128_SHA256:60,TLS1_CK_RSA_WITH_AES_256_SHA256:61,TLS1_CK_DH_DSS_WITH_AES_128_SHA256:62,TLS1_CK_DH_RSA_WITH_AES_128_SHA256:63,TLS1_CK_DHE_DSS_WITH_AES_128_SHA256:64,TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA:65,TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:66,TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:67,TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:68,TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:69,TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA:70,TLS1_CK_DHE_RSA_WITH_AES_128_SHA256:103,TLS1_CK_DH_DSS_WITH_AES_256_SHA256:104,TLS1_CK_DH_RSA_WITH_AES_256_SHA256:105,TLS1_CK_DHE_DSS_WITH_AES_256_SHA256:106,TLS1_CK_DHE_RSA_WITH_AES_256_SHA256:107,TLS1_CK_ADH_WITH_AES_128_SHA256:108,TLS1_CK_ADH_WITH_AES_256_SHA256:109,TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA:132,TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:133,TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:134,TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:135,TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:136,TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA:137,TLS1_CK_RSA_WITH_SEED_SHA:150,TLS1_CK_DH_DSS_WITH_SEED_SHA:151,TLS1_CK_DH_RSA_WITH_SEED_SHA:152,TLS1_CK_DHE_DSS_WITH_SEED_SHA:153,TLS1_CK_DHE_RSA_WITH_SEED_SHA:154,TLS1_CK_ADH_WITH_SEED_SHA:155,TLS1_CK_RSA_WITH_AES_128_GCM_SHA256:156,TLS1_CK_RSA_WITH_AES_256_GCM_SHA384:157,TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256:158,TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384:159,TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256:160,TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384:161,TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256:162,TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384:163,TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256:164,TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384:165,TLS1_CK_ADH_WITH_AES_128_GCM_SHA256:166,TLS1_CK_ADH_WITH_AES_256_GCM_SHA384:167,TLS1_CK_RSA_WITH_AES_128_CCM:49308,TLS1_CK_RSA_WITH_AES_256_CCM:49309,TLS1_CK_DHE_RSA_WITH_AES_128_CCM:49310,TLS1_CK_DHE_RSA_WITH_AES_256_CCM:49311,TLS1_CK_RSA_WITH_AES_128_CCM_8:49312,TLS1_CK_RSA_WITH_AES_256_CCM_8:49313,TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8:49314,TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8:49315,TLS1_CK_PSK_WITH_AES_128_CCM:49316,TLS1_CK_PSK_WITH_AES_256_CCM:49317,TLS1_CK_DHE_PSK_WITH_AES_128_CCM:49318,TLS1_CK_DHE_PSK_WITH_AES_256_CCM:49319,TLS1_CK_PSK_WITH_AES_128_CCM_8:49320,TLS1_CK_PSK_WITH_AES_256_CCM_8:49321,TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8:49322,TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8:49323,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM:49324,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM:49325,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8:49326,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8:49327,TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256:186,TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:187,TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:188,TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:189,TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:190,TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256:191,TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256:192,TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:193,TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:194,TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:195,TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:196,TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256:197,TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA:49153,TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA:49154,TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA:49155,TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA:49156,TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA:49157,TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA:49158,TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA:49159,TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA:49160,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:49161,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:49162,TLS1_CK_ECDH_RSA_WITH_NULL_SHA:49163,TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA:49164,TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA:49165,TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA:49166,TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA:49167,TLS1_CK_ECDHE_RSA_WITH_NULL_SHA:49168,TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA:49169,TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA:49170,TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA:49171,TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA:49172,TLS1_CK_ECDH_anon_WITH_NULL_SHA:49173,TLS1_CK_ECDH_anon_WITH_RC4_128_SHA:49174,TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA:49175,TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA:49176,TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA:49177,TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA:49178,TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:49179,TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:49180,TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA:49181,TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:49182,TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:49183,TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA:49184,TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:49185,TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:49186,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256:49187,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384:49188,TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256:49189,TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384:49190,TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256:49191,TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384:49192,TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256:49193,TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384:49194,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:49195,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:49196,TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:49197,TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:49198,TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256:49199,TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384:49200,TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256:49201,TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384:49202,TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA:49203,TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:49204,TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA:49205,TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA:49206,TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256:49207,TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384:49208,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA:49209,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256:49210,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384:49211,TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:49266,TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:49267,TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:49268,TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:49269,TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:49270,TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:49271,TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:49272,TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:49273,TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256:49300,TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384:49301,TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:49302,TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:49303,TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:49304,TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:49305,TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:49306,TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:49307,TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305:52392,TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305:52393,TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305:52394,TLS1_CK_PSK_WITH_CHACHA20_POLY1305:52395,TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305:52396,TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305:52397,TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305:52398});Bn({secp256r1:23,secp384r1:24,secp521r1:25,x25519:29,x448:30});Bn({uncompressed:0,ansiX962_compressed_prime:1,ansiX962_compressed_char2:2});Bn({anonymous:0,rsa:1,dsa:2,ecdsa:3});Bn({none:0,md5:1,sha1:2,sha224:3,sha256:4,sha384:5,sha512:6});Bn({Warning:1,Fatal:2});async function Ln(e,t,r){const s=fetch(e,t);if(!r)return s;try{return await s}catch{let s;if("string"==typeof e||e instanceof URL)s=`${r}${e}`;else{if(!(e instanceof Request))throw new Error("Invalid input type for fetch");s=await async function(e,t){const r=["GET","HEAD"].includes(e.method)||"body"in t?void 0:await e.blob();return new Request(t.url||e.url,{body:r,method:e.method,headers:e.headers,referrer:e.referrer,referrerPolicy:e.referrerPolicy,mode:"navigate"===e.mode?"same-origin":e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,integrity:e.integrity,...t})}(e,{url:`${r}${e.url}`})}return fetch(s,t)}}Bn({CloseNotify:0,UnexpectedMessage:10,BadRecordMac:20,DecryptionFailed:21,RecordOverflow:22,DecompressionFailure:30,HandshakeFailure:40,NoCertificate:41,BadCertificate:42,UnsupportedCertificate:43,CertificateRevoked:44,CertificateExpired:45,CertificateUnknown:46,IllegalParameter:47,UnknownCa:48,AccessDenied:49,DecodeError:50,DecryptError:51,ExportRestriction:60,ProtocolVersion:70,InsufficientSecurity:71,InternalError:80,UserCanceled:90,NoRenegotiation:100,UnsupportedExtension:110}),crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"]);const Rn=["vfs","literal","wordpress.org/themes","wordpress.org/plugins","url","git:directory"];function In(e){return e&&"object"==typeof e&&"string"==typeof e.resource&&Rn.includes(e.resource)}class Nn{get progress(){return this._progress}set progress(e){this._progress=e}setPlayground(e){this.playground=e}get isAsync(){return!1}static create(e,{semaphore:t,progress:r,corsProxy:s}){let n;switch(e.resource){case"vfs":n=new zn(e,r);break;case"literal":n=new Fn(e,r);break;case"wordpress.org/themes":n=new Xn(e,r);break;case"wordpress.org/plugins":n=new Yn(e,r);break;case"url":n=new Vn(e,r,{corsProxy:s});break;case"git:directory":n=new Mn(e,r,{corsProxy:s});break;case"literal:directory":n=new Zn(e,r);break;default:throw new Error(`Invalid resource: ${e}`)}return n=new Qn(n),t&&(n=new Jn(n,t)),n}}class Wn extends Nn{constructor(e){super(),this.resource=e}get progress(){return this.resource.progress}set progress(e){this.resource.progress=e}get name(){return this.resource.name}get isAsync(){return this.resource.isAsync}setPlayground(e){this.resource.setPlayground(e)}}class zn extends Nn{constructor(e,t){super(),this.resource=e,this._progress=t}async resolve(){var e;const t=await this.playground.readFileAsBuffer(this.resource.path);return null==(e=this.progress)||e.set(100),new File([t],this.name)}get name(){return this.resource.path.split("/").pop()||""}}class Fn extends Nn{constructor(e,t){super(),this.resource=e,this._progress=t}async resolve(){var e;return null==(e=this.progress)||e.set(100),new File([this.resource.contents],this.resource.name)}get name(){return this.resource.name}}class Kn extends Nn{constructor(e,t){super(),this._progress=e,this.corsProxy=t}async resolve(){var e,t;null==(e=this.progress)||e.setCaption(this.caption);const r=this.getURL();try{let e=await Ln(r,void 0,this.corsProxy);if(!e.ok)throw new Error(`Could not download "${r}"`);if(e=await function(e,t){const r=e.headers.get("content-length")||"",s=parseInt(r,10)||5242880;function n(e,r){t(new CustomEvent("progress",{detail:{loaded:e,total:r}}))}return new Response(new ReadableStream({async start(t){if(!e.body)return void t.close();const r=e.body.getReader();let i=0;for(;;)try{const{done:e,value:o}=await r.read();if(o&&(i+=o.byteLength),e){n(i,i),t.close();break}n(i,s),t.enqueue(o)}catch(o){m.error({e:o}),t.error(o);break}}}),{status:e.status,statusText:e.statusText,headers:e.headers})}(e,(null==(t=this.progress)?void 0:t.loadingListener)??Un),200!==e.status)throw new Error(`Could not download "${r}"`);return new File([await e.blob()],this.name)}catch(s){throw new Error(`Could not download "${r}".\n\t\t\t\tCheck if the URL is correct and the server is reachable.\n\t\t\t\tIf it is reachable, the server might be blocking the request.\n\t\t\t\tCheck the browser console and network tabs for more information.\n\n\t\t\t\t## Does the console show the error "No 'Access-Control-Allow-Origin' header"?\n\n\t\t\t\tThis means the server that hosts your file does not allow requests from other sites\n\t\t\t\t(cross-origin requests, or CORS).\tYou need to move the asset to a server that allows\n\t\t\t\tcross-origin file downloads. Learn more about CORS at\n\t\t\t\thttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.\n\n\t\t\t\tIf your file is on GitHub, load it from "raw.githubusercontent.com".\n\t\t\t\tHere's how to do that:\n\n\t\t\t\t1. Start with the original GitHub URL of the file. For example:\n\t\t\t\thttps://github.com/username/repository/blob/branch/filename.\n\t\t\t\t2. Replace "github.com" with "raw.githubusercontent.com".\n\t\t\t\t3. Remove the "/blob/" part of the URL.\n\n\t\t\t\tThe resulting URL should look like this:\n\t\t\t\thttps://raw.githubusercontent.com/username/repository/branch/filename\n\n\t\t\t\tError:\n\t\t\t\t${s}`)}}get caption(){return`Downloading ${this.name}`}get name(){try{return new URL(this.getURL(),"http://example.com").pathname.split("/").pop()}catch{return this.getURL()}}get isAsync(){return!0}}const Un=()=>{};class Vn extends Kn{constructor(e,t,r){if(super(t,null==r?void 0:r.corsProxy),this.resource=e,this.options=r,this.resource.url.startsWith("https://github.com/")){const e=this.resource.url.match(/^https:\/\/github\.com\/(?<owner>[^/]+)\/(?<repo>[^/]+)\/blob\/(?<branch>[^/]+)\/(?<path>.+[^/])$/);null!=e&&e.groups&&(this.resource={...this.resource,url:`https://raw.githubusercontent.com/${e.groups.owner}/${e.groups.repo}/${e.groups.branch}/${e.groups.path}`})}}getURL(){return this.resource.url}get caption(){return this.resource.caption??super.caption}}class Mn extends Nn{constructor(e,t,r){super(),this.reference=e,this._progress=t,this.options=r}async resolve(){var e;const t=null!=(e=this.options)&&e.corsProxy?`${this.options.corsProxy}${this.reference.url}`:this.reference.url,r=await $s(t,{value:this.reference.ref,type:"infer"}),s=await _s(t,r),n=this.reference.path.replace(/^\/+/,""),i=function(e,t){t=E(t);let r=e;if(["",".","/"].includes(t))t="";else{const e=t.split("/");for(const t of e){const e=null==r?void 0:r.find((e=>e.name===t));if("folder"!==(null==e?void 0:e.type))return e?[e.name]:[];r=e.children}}const s=[],n=[{tree:r,path:t}];for(;n.length>0;){const{tree:e,path:t}=n.pop();for(const r of e){const e=`${t}${t?"/":""}${r.name}`;"folder"===r.type?n.push({tree:r.children,path:e}):s.push(e)}}return s}(s,n);let o=await Js(t,r,i);return o=function(e,t){return Object.fromEntries(Object.entries(e).map((([e,r])=>[t(e),r])))}(o,(e=>e.substring(n.length).replace(/^\/+/,""))),{name:k(this.reference.path)||this.reference.url.replaceAll(/[^a-zA-Z0-9-.]/g,"-").replaceAll(/-+/g,"-"),files:o}}get name(){return this.reference.path.split("/").pop()}}class Zn extends Nn{constructor(e,t){super(),this.reference=e,this._progress=t}async resolve(){return this.reference}get name(){return this.reference.name}}class Xn extends Kn{constructor(e,t){super(t),this.resource=e}get name(){return ie(this.resource.slug)}getURL(){return`https://downloads.wordpress.org/theme/${Gn(this.resource.slug)}`}}class Yn extends Kn{constructor(e,t){super(t),this.resource=e}get name(){return ie(this.resource.slug)}getURL(){return`https://downloads.wordpress.org/plugin/${Gn(this.resource.slug)}`}}function Gn(e){return!e||e.endsWith(".zip")?e:e+".latest-stable.zip"}class Qn extends Wn{async resolve(){return this.promise||(this.promise=this.resource.resolve()),this.promise}}class Jn extends Wn{constructor(e,t){super(e),this.semaphore=t}async resolve(){return this.isAsync?this.semaphore.run((()=>this.resource.resolve())):this.resource.resolve()}}const _n="data:application/gzip;base64,",$n={type:"object",properties:{landingPage:{type:"string",description:"The URL to navigate to after the blueprint has been run."},description:{type:"string",description:"Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.",deprecated:"Use meta.description instead."},meta:{type:"object",properties:{title:{type:"string",description:"A clear and concise name for your Blueprint."},description:{type:"string",description:"A brief explanation of what your Blueprint offers."},author:{type:"string",description:"A GitHub username of the author of this Blueprint."},categories:{type:"array",items:{type:"string"},description:"Relevant categories to help users find your Blueprint in the future Blueprints section on WordPress.org."}},required:["title","author"],additionalProperties:!1,description:"Optional metadata. Used by the Blueprints gallery at https://github.com/WordPress/blueprints"},preferredVersions:{type:"object",properties:{php:{anyOf:[{$ref:"#/definitions/SupportedPHPVersion"},{type:"string",const:"latest"}],description:"The preferred PHP version to use. If not specified, the latest supported version will be used"},wp:{type:"string",description:"The preferred WordPress version to use. If not specified, the latest supported version will be used"}},required:["php","wp"],additionalProperties:!1,description:"The preferred PHP and WordPress versions to use."},features:{type:"object",properties:{networking:{type:"boolean",description:"Should boot with support for network request via wp_safe_remote_get?"}},additionalProperties:!1},extraLibraries:{type:"array",items:{$ref:"#/definitions/ExtraLibrary"},description:"Extra libraries to preload into the Playground instance."},constants:{$ref:"#/definitions/PHPConstants",description:"PHP Constants to define on every request"},plugins:{type:"array",items:{anyOf:[{type:"string"},{$ref:"#/definitions/FileReference"}]},description:"WordPress plugins to install and activate"},siteOptions:{type:"object",additionalProperties:{type:"string"},properties:{blogname:{type:"string",description:"The site title"}},description:"WordPress site options to define"},login:{anyOf:[{type:"boolean"},{type:"object",properties:{username:{type:"string"},password:{type:"string"}},required:["username","password"],additionalProperties:!1}],description:"User to log in as. If true, logs the user in as admin/password."},phpExtensionBundles:{deprecated:"No longer used. Feel free to remove it from your Blueprint."},steps:{type:"array",items:{anyOf:[{$ref:"#/definitions/StepDefinition"},{type:"string"},{not:{}},{type:"boolean",const:!1},{type:"null"}]},description:"The steps to run after every other operation in this Blueprint was executed."},$schema:{type:"string"}},additionalProperties:!1},ei={type:"string",enum:["8.4","8.3","8.2","8.1","8.0","7.4","7.3","7.2","7.1","7.0"]},ti={type:"object",additionalProperties:{type:["string","boolean","number"]}},ri=Object.prototype.hasOwnProperty;function si(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;const a=o;let p=!1;const c=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.path&&(r="path")){const e={instancePath:t,schemaPath:"#/definitions/VFSReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"path"!==s){const e={instancePath:t,schemaPath:"#/definitions/VFSReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/VFSReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("vfs"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/VFSReference/properties/resource/const",keyword:"const",params:{allowedValue:"vfs"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var f=s===o}else f=!0;if(f)if(void 0!==e.path){const r=o;if("string"!=typeof e.path){const e={instancePath:t+"/path",schemaPath:"#/definitions/VFSReference/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}f=r===o}else f=!0}}}else{const e={instancePath:t,schemaPath:"#/definitions/VFSReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}var l=c===o;if(p=p||l,!p){const r=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.name&&(r="name")||void 0===e.contents&&(r="contents")){const e={instancePath:t,schemaPath:"#/definitions/LiteralReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"name"!==s&&"contents"!==s){const e={instancePath:t,schemaPath:"#/definitions/LiteralReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/LiteralReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("literal"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/LiteralReference/properties/resource/const",keyword:"const",params:{allowedValue:"literal"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var h=s===o}else h=!0;if(h){if(void 0!==e.name){const r=o;if("string"!=typeof e.name){const e={instancePath:t+"/name",schemaPath:"#/definitions/LiteralReference/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}h=r===o}else h=!0;if(h)if(void 0!==e.contents){let r=e.contents;const s=o,n=o;let a=!1;const p=o;if("string"!=typeof r){const e={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var d=p===o;if(a=a||d,!a){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.BYTES_PER_ELEMENT&&(e="BYTES_PER_ELEMENT")||void 0===r.buffer&&(e="buffer")||void 0===r.byteLength&&(e="byteLength")||void 0===r.byteOffset&&(e="byteOffset")||void 0===r.length&&(e="length")){const r={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const s in r)if("BYTES_PER_ELEMENT"!==s&&"buffer"!==s&&"byteLength"!==s&&"byteOffset"!==s&&"length"!==s){let e=r[s];const n=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/contents/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}if(!(n===o))break}if(e===o){if(void 0!==r.BYTES_PER_ELEMENT){let e=r.BYTES_PER_ELEMENT;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/contents/BYTES_PER_ELEMENT",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var u=s===o}else u=!0;if(u){if(void 0!==r.buffer){let e=r.buffer;const s=o;if(o===s)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.byteLength&&(r="byteLength")){const e={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("byteLength"!==s){const e={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o&&void 0!==e.byteLength){let r=e.byteLength;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/contents/buffer/byteLength",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}}}}else{const e={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}u=s===o}else u=!0;if(u){if(void 0!==r.byteLength){let e=r.byteLength;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/contents/byteLength",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}u=s===o}else u=!0;if(u){if(void 0!==r.byteOffset){let e=r.byteOffset;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/contents/byteOffset",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}u=s===o}else u=!0;if(u)if(void 0!==r.length){let e=r.length;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/contents/length",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}u=s===o}else u=!0}}}}}}else{const e={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}d=e===o;a=a||d}if(a)o=n,null!==i&&(n?i.length=n:i=null);else{const e={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};null===i?i=[e]:i.push(e),o++}h=s===o}else h=!0}}}}else{const e={instancePath:t,schemaPath:"#/definitions/LiteralReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}l=r===o;if(p=p||l,!p){const r=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.slug&&(r="slug")){const e={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"slug"!==s){const e={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/CoreThemeReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("wordpress.org/themes"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/CoreThemeReference/properties/resource/const",keyword:"const",params:{allowedValue:"wordpress.org/themes"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var m=s===o}else m=!0;if(m)if(void 0!==e.slug){const r=o;if("string"!=typeof e.slug){const e={instancePath:t+"/slug",schemaPath:"#/definitions/CoreThemeReference/properties/slug/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}m=r===o}else m=!0}}}else{const e={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}l=r===o;if(p=p||l,!p){const r=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.slug&&(r="slug")){const e={instancePath:t,schemaPath:"#/definitions/CorePluginReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"slug"!==s){const e={instancePath:t,schemaPath:"#/definitions/CorePluginReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/CorePluginReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("wordpress.org/plugins"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/CorePluginReference/properties/resource/const",keyword:"const",params:{allowedValue:"wordpress.org/plugins"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var g=s===o}else g=!0;if(g)if(void 0!==e.slug){const r=o;if("string"!=typeof e.slug){const e={instancePath:t+"/slug",schemaPath:"#/definitions/CorePluginReference/properties/slug/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}g=r===o}else g=!0}}}else{const e={instancePath:t,schemaPath:"#/definitions/CorePluginReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}l=r===o;if(p=p||l,!p){const r=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.url&&(r="url")){const e={instancePath:t,schemaPath:"#/definitions/UrlReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"url"!==s&&"caption"!==s){const e={instancePath:t,schemaPath:"#/definitions/UrlReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/UrlReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("url"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/UrlReference/properties/resource/const",keyword:"const",params:{allowedValue:"url"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var y=s===o}else y=!0;if(y){if(void 0!==e.url){const r=o;if("string"!=typeof e.url){const e={instancePath:t+"/url",schemaPath:"#/definitions/UrlReference/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}y=r===o}else y=!0;if(y)if(void 0!==e.caption){const r=o;if("string"!=typeof e.caption){const e={instancePath:t+"/caption",schemaPath:"#/definitions/UrlReference/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}y=r===o}else y=!0}}}}else{const e={instancePath:t,schemaPath:"#/definitions/UrlReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}l=r===o;p=p||l}}}}if(!p){const e={instancePath:t,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,si.errors=i,!1}return o=a,null!==i&&(a?i.length=a:i=null),si.errors=i,0===o}const ni={type:"object",discriminator:{propertyName:"step"},required:["step"],oneOf:[{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"activatePlugin"},pluginPath:{type:"string",description:"Path to the plugin directory as absolute path (/wordpress/wp-content/plugins/plugin-name); or the plugin entry file relative to the plugins directory (plugin-name/plugin-name.php)."},pluginName:{type:"string",description:"Optional. Plugin name to display in the progress bar."}},required:["pluginPath","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"activateTheme"},themeFolderName:{type:"string",description:"The name of the theme folder inside wp-content/themes/"}},required:["step","themeFolderName"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"cp"},fromPath:{type:"string",description:"Source path"},toPath:{type:"string",description:"Target path"}},required:["fromPath","step","toPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"defineWpConfigConsts"},consts:{type:"object",additionalProperties:{},description:"The constants to define"},method:{type:"string",enum:["rewrite-wp-config","define-before-run"],description:"The method of defining the constants in wp-config.php. Possible values are:\n\n- rewrite-wp-config: Default. Rewrites the wp-config.php file to                      explicitly call define() with the requested                      name and value. This method alters the file                      on the disk, but it doesn't conflict with                      existing define() calls in wp-config.php.\n\n- define-before-run: Defines the constant before running the requested                      script. It doesn't alter any files on the disk, but                      constants defined this way may conflict with existing                      define() calls in wp-config.php."},virtualize:{type:"boolean",deprecated:"This option is noop and will be removed in a future version.\nThis option is only kept in here to avoid breaking Blueprint schema validation\nfor existing apps using this option."}},required:["consts","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"defineSiteUrl"},siteUrl:{type:"string",description:"The URL"}},required:["siteUrl","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"enableMultisite"},wpCliPath:{type:"string",description:"wp-cli.phar path"}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importWxr"},file:{$ref:"#/definitions/FileReference",description:"The file to import"},importer:{type:"string",enum:["data-liberation","default"],description:"The importer to use. Possible values:\n\n- `default`: The importer from https://github.com/humanmade/WordPress-Importer\n- `data-liberation`: The experimental Data Liberation WXR importer developed at                      https://github.com/WordPress/wordpress-playground/issues/1894\n\nThis option is deprecated. The syntax will not be removed, but once the Data Liberation importer matures, it will become the only supported importer and the `importer` option will be ignored.",deprecated:!0}},required:["file","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importThemeStarterContent",description:"The step identifier."},themeSlug:{type:"string",description:"The name of the theme to import content from."}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importWordPressFiles"},wordPressFilesZip:{$ref:"#/definitions/FileReference",description:"The zip file containing the top-level WordPress files and directories."},pathInZip:{type:"string",description:"The path inside the zip file where the WordPress files are."}},required:["step","wordPressFilesZip"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},ifAlreadyInstalled:{type:"string",enum:["overwrite","skip","error"],description:"What to do if the asset already exists."},step:{type:"string",const:"installPlugin",description:"The step identifier."},pluginData:{anyOf:[{$ref:"#/definitions/FileReference"},{$ref:"#/definitions/DirectoryReference"}],description:"The plugin files to install. It can be a plugin zip file, a single PHP file, or a directory containing all the plugin files at its root."},pluginZipFile:{$ref:"#/definitions/FileReference",deprecated:". Use `pluginData` instead."},options:{$ref:"#/definitions/InstallPluginOptions",description:"Optional installation options."}},required:["pluginData","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},ifAlreadyInstalled:{type:"string",enum:["overwrite","skip","error"],description:"What to do if the asset already exists."},step:{type:"string",const:"installTheme",description:"The step identifier."},themeData:{anyOf:[{$ref:"#/definitions/FileReference"},{$ref:"#/definitions/DirectoryReference"}],description:"The theme files to install. It can be either a theme zip file, or a directory containing all the theme files at its root."},themeZipFile:{$ref:"#/definitions/FileReference",deprecated:". Use `themeData` instead."},options:{$ref:"#/definitions/InstallThemeOptions",description:"Optional installation options."}},required:["step","themeData"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"login"},username:{type:"string",description:"The user to log in as. Defaults to 'admin'."},password:{type:"string",deprecated:"The password field is deprecated and will be removed in a future version.\nOnly the username field is required for user authentication."}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"mkdir"},path:{type:"string",description:"The path of the directory you want to create"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"mv"},fromPath:{type:"string",description:"Source path"},toPath:{type:"string",description:"Target path"}},required:["fromPath","step","toPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"resetData"}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"request"},request:{$ref:"#/definitions/PHPRequest",description:"Request details (See /wordpress-playground/api/universal/interface/PHPRequest)"}},required:["request","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"rm"},path:{type:"string",description:"The path to remove"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"rmdir"},path:{type:"string",description:"The path to remove"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runPHP",description:"The step identifier."},code:{type:"string",description:"The PHP code to run."}},required:["code","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runPHPWithOptions"},options:{$ref:"#/definitions/PHPRunOptions",description:"Run options (See /wordpress-playground/api/universal/interface/PHPRunOptions/))"}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runWpInstallationWizard"},options:{$ref:"#/definitions/WordPressInstallationOptions"}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runSql",description:"The step identifier."},sql:{$ref:"#/definitions/FileReference",description:"The SQL to run. Each non-empty line must contain a valid SQL query."}},required:["sql","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"setSiteOptions",description:'The name of the step. Must be "setSiteOptions".'},options:{type:"object",additionalProperties:{},description:"The options to set on the site."}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"unzip"},zipFile:{$ref:"#/definitions/FileReference",description:"The zip file to extract"},zipPath:{type:"string",description:"The path of the zip file to extract",deprecated:"Use zipFile instead."},extractToPath:{type:"string",description:"The path to extract the zip file to"}},required:["extractToPath","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"updateUserMeta"},meta:{type:"object",additionalProperties:{},description:'An object of user meta values to set, e.g. { "first_name": "John" }'},userId:{type:"number",description:"User ID"}},required:["meta","step","userId"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"writeFile"},path:{type:"string",description:"The path of the file to write to"},data:{anyOf:[{$ref:"#/definitions/FileReference"},{type:"string"},{type:"object",properties:{BYTES_PER_ELEMENT:{type:"number"},buffer:{type:"object",properties:{byteLength:{type:"number"}},required:["byteLength"],additionalProperties:!1},byteLength:{type:"number"},byteOffset:{type:"number"},length:{type:"number"}},required:["BYTES_PER_ELEMENT","buffer","byteLength","byteOffset","length"],additionalProperties:{type:"number"}}],description:"The data to write"}},required:["data","path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"writeFiles"},writeToPath:{type:"string",description:"The path of the file to write to"},filesTree:{$ref:"#/definitions/DirectoryReference",description:"The data to write"}},required:["filesTree","step","writeToPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"wp-cli",description:"The step identifier."},command:{anyOf:[{type:"string"},{type:"array",items:{type:"string"}}],description:"The WP CLI command to run."},wpCliPath:{type:"string",description:"wp-cli.phar path"}},required:["command","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"setSiteLanguage"},language:{type:"string",description:"The language to set, e.g. 'en_US'"}},required:["language","step"]}]},ii={type:"object",additionalProperties:{anyOf:[{$ref:"#/definitions/FileTree"},{type:["object","string"]}]},properties:{}},oi={validate:ai};function ai(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return ai.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const r in e){let s=e[r];const p=o,c=o;let f=!1;const l=o;oi.validate(s,{instancePath:t+"/"+r.replace(/~/g,"~0").replace(/\//g,"~1"),parentData:e,parentDataProperty:r,rootData:n})||(i=null===i?oi.validate.errors:i.concat(oi.validate.errors),o=i.length);var a=l===o;if(f=f||a,!f){const e=o;if((!s||"object"!=typeof s||Array.isArray(s))&&"string"!=typeof s){const e={instancePath:t+"/"+r.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/additionalProperties/anyOf/1/type",keyword:"type",params:{type:ii.additionalProperties.anyOf[1].type},message:"must be object,string"};null===i?i=[e]:i.push(e),o++}a=e===o;f=f||a}if(!f){const e={instancePath:t+"/"+r.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ai.errors=i,!1}if(o=c,null!==i&&(c?i.length=c:i=null),!(p===o))break}}return ai.errors=i,0===o}function pi(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return pi.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.files&&(r="files")||void 0===e.name&&(r="name")||void 0===e.resource&&(r="resource"))return pi.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("resource"!==s&&"files"!==s&&"name"!==s)return pi.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r)return pi.errors=[{instancePath:t+"/resource",schemaPath:"#/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("literal:directory"!==r)return pi.errors=[{instancePath:t+"/resource",schemaPath:"#/properties/resource/const",keyword:"const",params:{allowedValue:"literal:directory"},message:"must be equal to constant"}],!1;var a=s===o}else a=!0;if(a){if(void 0!==e.files){const r=o;ai(e.files,{instancePath:t+"/files",parentData:e,parentDataProperty:"files",rootData:n})||(i=null===i?ai.errors:i.concat(ai.errors),o=i.length);a=r===o}else a=!0;if(a)if(void 0!==e.name){const r=o;if("string"!=typeof e.name)return pi.errors=[{instancePath:t+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0}}}}}return pi.errors=i,0===o}function ci(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;const a=o;let p=!1;const c=o;if(o==o)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.resource&&(r="resource")||void 0===e.url&&(r="url")||void 0===e.ref&&(r="ref")||void 0===e.path&&(r="path")){const e={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("resource"!==s&&"url"!==s&&"ref"!==s&&"path"!==s){const e={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.resource){let r=e.resource;const s=o;if("string"!=typeof r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/GitDirectoryReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("git:directory"!==r){const e={instancePath:t+"/resource",schemaPath:"#/definitions/GitDirectoryReference/properties/resource/const",keyword:"const",params:{allowedValue:"git:directory"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}var f=s===o}else f=!0;if(f){if(void 0!==e.url){const r=o;if("string"!=typeof e.url){const e={instancePath:t+"/url",schemaPath:"#/definitions/GitDirectoryReference/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}f=r===o}else f=!0;if(f){if(void 0!==e.ref){const r=o;if("string"!=typeof e.ref){const e={instancePath:t+"/ref",schemaPath:"#/definitions/GitDirectoryReference/properties/ref/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}f=r===o}else f=!0;if(f)if(void 0!==e.path){const r=o;if("string"!=typeof e.path){const e={instancePath:t+"/path",schemaPath:"#/definitions/GitDirectoryReference/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}f=r===o}else f=!0}}}}}else{const e={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}var l=c===o;if(p=p||l,!p){const a=o;pi(e,{instancePath:t,parentData:r,parentDataProperty:s,rootData:n})||(i=null===i?pi.errors:i.concat(pi.errors),o=i.length);l=a===o;p=p||l}if(!p){const e={instancePath:t,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ci.errors=i,!1}return o=a,null!==i&&(a?i.length=a:i=null),ci.errors=i,0===o}const fi={type:"string",enum:["GET","POST","HEAD","OPTIONS","PATCH","PUT","DELETE"]};function li(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return li.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.url&&(r="url"))return li.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("method"!==s&&"url"!==s&&"headers"!==s&&"body"!==s)return li.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.method){let r=e.method;const s=o;if("string"!=typeof r)return li.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("GET"!==r&&"POST"!==r&&"HEAD"!==r&&"OPTIONS"!==r&&"PATCH"!==r&&"PUT"!==r&&"DELETE"!==r)return li.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/enum",keyword:"enum",params:{allowedValues:fi.enum},message:"must be equal to one of the allowed values"}],!1;var a=s===o}else a=!0;if(a){if(void 0!==e.url){const r=o;if("string"!=typeof e.url)return li.errors=[{instancePath:t+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0;if(a){if(void 0!==e.headers){let r=e.headers;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return li.errors=[{instancePath:t+"/headers",schemaPath:"#/definitions/PHPRequestHeaders/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const e in r){const s=o;if("string"!=typeof r[e])return li.errors=[{instancePath:t+"/headers/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPRequestHeaders/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(s===o))break}}a=s===o}else a=!0;if(a)if(void 0!==e.body){let r=e.body;const s=o,n=o;let d=!1;const u=o;if("string"!=typeof r){const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var p=u===o;if(d=d||p,!d){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.BYTES_PER_ELEMENT&&(e="BYTES_PER_ELEMENT")||void 0===r.buffer&&(e="buffer")||void 0===r.byteLength&&(e="byteLength")||void 0===r.byteOffset&&(e="byteOffset")||void 0===r.length&&(e="length")){const r={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const s in r)if("BYTES_PER_ELEMENT"!==s&&"buffer"!==s&&"byteLength"!==s&&"byteOffset"!==s&&"length"!==s){let e=r[s];const n=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}if(!(n===o))break}if(e===o){if(void 0!==r.BYTES_PER_ELEMENT){let e=r.BYTES_PER_ELEMENT;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var c=s===o}else c=!0;if(c){if(void 0!==r.buffer){let e=r.buffer;const s=o;if(o===s)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.byteLength&&(r="byteLength")){const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("byteLength"!==s){const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o&&void 0!==e.byteLength){let r=e.byteLength;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/buffer/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}}}}else{const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c){if(void 0!==r.byteLength){let e=r.byteLength;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c){if(void 0!==r.byteOffset){let e=r.byteOffset;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/byteOffset",schemaPath:"#/properties/body/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c)if(void 0!==r.length){let e=r.length;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/length",schemaPath:"#/properties/body/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0}}}}}}else{const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}p=e===o;if(d=d||p,!d){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r))for(const s in r){let e=r[s];const n=o,a=o;let p=!1;const c=o;if("string"!=typeof e){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var f=c===o;if(p=p||f,!p){const r=o;if(o===r)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.BYTES_PER_ELEMENT&&(r="BYTES_PER_ELEMENT")||void 0===e.buffer&&(r="buffer")||void 0===e.byteLength&&(r="byteLength")||void 0===e.byteOffset&&(r="byteOffset")||void 0===e.length&&(r="length")){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const n in e)if("BYTES_PER_ELEMENT"!==n&&"buffer"!==n&&"byteLength"!==n&&"byteOffset"!==n&&"length"!==n){let r=e[n];const a=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/"+n.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}if(!(a===o))break}if(r===o){if(void 0!==e.BYTES_PER_ELEMENT){let r=e.BYTES_PER_ELEMENT;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var l=n===o}else l=!0;if(l){if(void 0!==e.buffer){let r=e.buffer;const n=o;if(o===n)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.byteLength&&(e="byteLength")){const r={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const n in r)if("byteLength"!==n){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:n},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(e===o&&void 0!==r.byteLength){let e=r.byteLength;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer/byteLength",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}}}}else{const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}l=n===o}else l=!0;if(l){if(void 0!==e.byteLength){let r=e.byteLength;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/byteLength",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}l=n===o}else l=!0;if(l){if(void 0!==e.byteOffset){let r=e.byteOffset;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/byteOffset",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}l=n===o}else l=!0;if(l)if(void 0!==e.length){let r=e.length;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/length",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}l=n===o}else l=!0}}}}}}else{const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}f=r===o;if(p=p||f,!p){const r=o;if(o===r)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.lastModified&&(r="lastModified")||void 0===e.name&&(r="name")||void 0===e.size&&(r="size")||void 0===e.type&&(r="type")||void 0===e.webkitRelativePath&&(r="webkitRelativePath")){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const n in e)if("size"!==n&&"type"!==n&&"lastModified"!==n&&"name"!==n&&"webkitRelativePath"!==n){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:n},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o){if(void 0!==e.size){let r=e.size;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/size",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/size/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var h=n===o}else h=!0;if(h){if(void 0!==e.type){const r=o;if("string"!=typeof e.type){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/type",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/type/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}h=r===o}else h=!0;if(h){if(void 0!==e.lastModified){let r=e.lastModified;const n=o;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/lastModified",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/lastModified/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}h=n===o}else h=!0;if(h){if(void 0!==e.name){const r=o;if("string"!=typeof e.name){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/name",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}h=r===o}else h=!0;if(h)if(void 0!==e.webkitRelativePath){const r=o;if("string"!=typeof e.webkitRelativePath){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1")+"/webkitRelativePath",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/webkitRelativePath/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}h=r===o}else h=!0}}}}}}else{const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}f=r===o;p=p||f}}if(p)o=a,null!==i&&(a?i.length=a:i=null);else{const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};null===i?i=[e]:i.push(e),o++}if(!(n===o))break}else{const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}p=e===o;d=d||p}}if(!d){const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,li.errors=i,!1}o=n,null!==i&&(n?i.length=n:i=null);a=s===o}else a=!0}}}}}}return li.errors=i,0===o}const hi={type:"object",properties:{relativeUri:{type:"string",description:"Request path following the domain:port part."},scriptPath:{type:"string",description:"Path of the .php file to execute."},protocol:{type:"string",description:"Request protocol."},method:{$ref:"#/definitions/HTTPMethod",description:"Request method. Default: `GET`."},headers:{$ref:"#/definitions/PHPRequestHeaders",description:"Request headers."},body:{anyOf:[{type:"string"},{type:"object",properties:{BYTES_PER_ELEMENT:{type:"number"},buffer:{type:"object",properties:{byteLength:{type:"number"}},required:["byteLength"],additionalProperties:!1},byteLength:{type:"number"},byteOffset:{type:"number"},length:{type:"number"}},required:["BYTES_PER_ELEMENT","buffer","byteLength","byteOffset","length"],additionalProperties:{type:"number"}}],description:"Request body."},env:{type:"object",additionalProperties:{type:"string"},description:"Environment variables to set for this run."},$_SERVER:{type:"object",additionalProperties:{type:"string"},description:"$_SERVER entries to set for this run."},code:{type:"string",description:"The code snippet to eval instead of a php file."}},additionalProperties:!1};function di(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return di.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const r=o;for(const s in e)if(!ri.call(hi.properties,s))return di.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.relativeUri){const r=o;if("string"!=typeof e.relativeUri)return di.errors=[{instancePath:t+"/relativeUri",schemaPath:"#/properties/relativeUri/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var a=r===o}else a=!0;if(a){if(void 0!==e.scriptPath){const r=o;if("string"!=typeof e.scriptPath)return di.errors=[{instancePath:t+"/scriptPath",schemaPath:"#/properties/scriptPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0;if(a){if(void 0!==e.protocol){const r=o;if("string"!=typeof e.protocol)return di.errors=[{instancePath:t+"/protocol",schemaPath:"#/properties/protocol/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0;if(a){if(void 0!==e.method){let r=e.method;const s=o;if("string"!=typeof r)return di.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("GET"!==r&&"POST"!==r&&"HEAD"!==r&&"OPTIONS"!==r&&"PATCH"!==r&&"PUT"!==r&&"DELETE"!==r)return di.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/enum",keyword:"enum",params:{allowedValues:fi.enum},message:"must be equal to one of the allowed values"}],!1;a=s===o}else a=!0;if(a){if(void 0!==e.headers){let r=e.headers;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return di.errors=[{instancePath:t+"/headers",schemaPath:"#/definitions/PHPRequestHeaders/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const e in r){const s=o;if("string"!=typeof r[e])return di.errors=[{instancePath:t+"/headers/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPRequestHeaders/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(s===o))break}}a=s===o}else a=!0;if(a){if(void 0!==e.body){let r=e.body;const s=o,n=o;let f=!1;const l=o;if("string"!=typeof r){const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var p=l===o;if(f=f||p,!f){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.BYTES_PER_ELEMENT&&(e="BYTES_PER_ELEMENT")||void 0===r.buffer&&(e="buffer")||void 0===r.byteLength&&(e="byteLength")||void 0===r.byteOffset&&(e="byteOffset")||void 0===r.length&&(e="length")){const r={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const s in r)if("BYTES_PER_ELEMENT"!==s&&"buffer"!==s&&"byteLength"!==s&&"byteOffset"!==s&&"length"!==s){let e=r[s];const n=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}if(!(n===o))break}if(e===o){if(void 0!==r.BYTES_PER_ELEMENT){let e=r.BYTES_PER_ELEMENT;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var c=s===o}else c=!0;if(c){if(void 0!==r.buffer){let e=r.buffer;const s=o;if(o===s)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.byteLength&&(r="byteLength")){const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("byteLength"!==s){const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o&&void 0!==e.byteLength){let r=e.byteLength;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/body/buffer/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}}}}else{const e={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c){if(void 0!==r.byteLength){let e=r.byteLength;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c){if(void 0!==r.byteOffset){let e=r.byteOffset;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/byteOffset",schemaPath:"#/properties/body/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0;if(c)if(void 0!==r.length){let e=r.length;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/body/length",schemaPath:"#/properties/body/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}c=s===o}else c=!0}}}}}}else{const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}p=e===o;f=f||p}if(!f){const e={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,di.errors=i,!1}o=n,null!==i&&(n?i.length=n:i=null);a=s===o}else a=!0;if(a){if(void 0!==e.env){let r=e.env;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return di.errors=[{instancePath:t+"/env",schemaPath:"#/properties/env/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const e in r){const s=o;if("string"!=typeof r[e])return di.errors=[{instancePath:t+"/env/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/env/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(s===o))break}}a=s===o}else a=!0;if(a){if(void 0!==e.$_SERVER){let r=e.$_SERVER;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return di.errors=[{instancePath:t+"/$_SERVER",schemaPath:"#/properties/%24_SERVER/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const e in r){const s=o;if("string"!=typeof r[e])return di.errors=[{instancePath:t+"/$_SERVER/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/%24_SERVER/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(s===o))break}}a=s===o}else a=!0;if(a)if(void 0!==e.code){const r=o;if("string"!=typeof e.code)return di.errors=[{instancePath:t+"/code",schemaPath:"#/properties/code/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0}}}}}}}}}}return di.errors=i,0===o}function ui(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=e.step;if("string"!=typeof r)return ui.errors=[{instancePath:t,schemaPath:"#/discriminator",keyword:"discriminator",params:{error:"tag",tag:"step",tagValue:r},message:'tag "step" must be string'}],!1;if("activatePlugin"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/0/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.pluginPath&&(r="pluginPath")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"pluginPath"!==s&&"pluginName"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/0/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/0/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/0/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var a=s===o}else a=!0;if(a)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/0/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=e===o}else a=!0}}}var p=s===o}else p=!0;if(p){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/0/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("activatePlugin"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/0/properties/step/const",keyword:"const",params:{allowedValue:"activatePlugin"},message:"must be equal to constant"}],!1;p=s===o}else p=!0;if(p){if(void 0!==e.pluginPath){const r=o;if("string"!=typeof e.pluginPath)return ui.errors=[{instancePath:t+"/pluginPath",schemaPath:"#/oneOf/0/properties/pluginPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;p=r===o}else p=!0;if(p)if(void 0!==e.pluginName){const r=o;if("string"!=typeof e.pluginName)return ui.errors=[{instancePath:t+"/pluginName",schemaPath:"#/oneOf/0/properties/pluginName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;p=r===o}else p=!0}}}}}}}else if("activateTheme"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step")||void 0===e.themeFolderName&&(r="themeFolderName"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"themeFolderName"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/1/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/1/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/1/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var c=s===o}else c=!0;if(c)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/1/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;c=e===o}else c=!0}}}var f=s===o}else f=!0;if(f){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/1/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("activateTheme"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/1/properties/step/const",keyword:"const",params:{allowedValue:"activateTheme"},message:"must be equal to constant"}],!1;f=s===o}else f=!0;if(f)if(void 0!==e.themeFolderName){const r=o;if("string"!=typeof e.themeFolderName)return ui.errors=[{instancePath:t+"/themeFolderName",schemaPath:"#/oneOf/1/properties/themeFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;f=r===o}else f=!0}}}}}}else if("cp"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.fromPath&&(r="fromPath")||void 0===e.step&&(r="step")||void 0===e.toPath&&(r="toPath"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/2/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"fromPath"!==s&&"toPath"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/2/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/2/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/2/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/2/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var l=s===o}else l=!0;if(l)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/2/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;l=e===o}else l=!0}}}var h=s===o}else h=!0;if(h){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/2/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("cp"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/2/properties/step/const",keyword:"const",params:{allowedValue:"cp"},message:"must be equal to constant"}],!1;h=s===o}else h=!0;if(h){if(void 0!==e.fromPath){const r=o;if("string"!=typeof e.fromPath)return ui.errors=[{instancePath:t+"/fromPath",schemaPath:"#/oneOf/2/properties/fromPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;h=r===o}else h=!0;if(h)if(void 0!==e.toPath){const r=o;if("string"!=typeof e.toPath)return ui.errors=[{instancePath:t+"/toPath",schemaPath:"#/oneOf/2/properties/toPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;h=r===o}else h=!0}}}}}}}else if("defineWpConfigConsts"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/3/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.consts&&(r="consts")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/3/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"consts"!==s&&"method"!==s&&"virtualize"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/3/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/3/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/3/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/3/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var d=s===o}else d=!0;if(d)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/3/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;d=e===o}else d=!0}}}var u=s===o}else u=!0;if(u){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/3/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("defineWpConfigConsts"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/3/properties/step/const",keyword:"const",params:{allowedValue:"defineWpConfigConsts"},message:"must be equal to constant"}],!1;u=s===o}else u=!0;if(u){if(void 0!==e.consts){let r=e.consts;const s=o;if(o===s&&(!r||"object"!=typeof r||Array.isArray(r)))return ui.errors=[{instancePath:t+"/consts",schemaPath:"#/oneOf/3/properties/consts/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;u=s===o}else u=!0;if(u){if(void 0!==e.method){let r=e.method;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/method",schemaPath:"#/oneOf/3/properties/method/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("rewrite-wp-config"!==r&&"define-before-run"!==r)return ui.errors=[{instancePath:t+"/method",schemaPath:"#/oneOf/3/properties/method/enum",keyword:"enum",params:{allowedValues:ni.oneOf[3].properties.method.enum},message:"must be equal to one of the allowed values"}],!1;u=s===o}else u=!0;if(u)if(void 0!==e.virtualize){const r=o;if("boolean"!=typeof e.virtualize)return ui.errors=[{instancePath:t+"/virtualize",schemaPath:"#/oneOf/3/properties/virtualize/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;u=r===o}else u=!0}}}}}}}}else if("defineSiteUrl"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/4/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.siteUrl&&(r="siteUrl")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/4/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"siteUrl"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/4/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/4/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/4/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/4/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var m=s===o}else m=!0;if(m)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/4/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;m=e===o}else m=!0}}}var g=s===o}else g=!0;if(g){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/4/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("defineSiteUrl"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/4/properties/step/const",keyword:"const",params:{allowedValue:"defineSiteUrl"},message:"must be equal to constant"}],!1;g=s===o}else g=!0;if(g)if(void 0!==e.siteUrl){const r=o;if("string"!=typeof e.siteUrl)return ui.errors=[{instancePath:t+"/siteUrl",schemaPath:"#/oneOf/4/properties/siteUrl/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;g=r===o}else g=!0}}}}}}else if("enableMultisite"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/5/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/5/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"wpCliPath"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/5/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/5/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/5/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/5/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var y=s===o}else y=!0;if(y)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/5/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;y=e===o}else y=!0}}}var b=s===o}else b=!0;if(b){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/5/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("enableMultisite"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/5/properties/step/const",keyword:"const",params:{allowedValue:"enableMultisite"},message:"must be equal to constant"}],!1;b=s===o}else b=!0;if(b)if(void 0!==e.wpCliPath){const r=o;if("string"!=typeof e.wpCliPath)return ui.errors=[{instancePath:t+"/wpCliPath",schemaPath:"#/oneOf/5/properties/wpCliPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;b=r===o}else b=!0}}}}}}else if("importWxr"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/6/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.file&&(r="file")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/6/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"file"!==s&&"importer"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/6/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/6/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/6/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/6/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var w=s===o}else w=!0;if(w)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/6/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;w=e===o}else w=!0}}}var P=s===o}else P=!0;if(P){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/6/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("importWxr"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/6/properties/step/const",keyword:"const",params:{allowedValue:"importWxr"},message:"must be equal to constant"}],!1;P=s===o}else P=!0;if(P){if(void 0!==e.file){const r=o;si(e.file,{instancePath:t+"/file",parentData:e,parentDataProperty:"file",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);P=r===o}else P=!0;if(P)if(void 0!==e.importer){let r=e.importer;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/importer",schemaPath:"#/oneOf/6/properties/importer/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("data-liberation"!==r&&"default"!==r)return ui.errors=[{instancePath:t+"/importer",schemaPath:"#/oneOf/6/properties/importer/enum",keyword:"enum",params:{allowedValues:ni.oneOf[6].properties.importer.enum},message:"must be equal to one of the allowed values"}],!1;P=s===o}else P=!0}}}}}}}else if("importThemeStarterContent"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/7/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/7/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"themeSlug"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/7/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/7/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/7/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/7/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var v=s===o}else v=!0;if(v)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/7/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;v=e===o}else v=!0}}}var A=s===o}else A=!0;if(A){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/7/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("importThemeStarterContent"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/7/properties/step/const",keyword:"const",params:{allowedValue:"importThemeStarterContent"},message:"must be equal to constant"}],!1;A=s===o}else A=!0;if(A)if(void 0!==e.themeSlug){const r=o;if("string"!=typeof e.themeSlug)return ui.errors=[{instancePath:t+"/themeSlug",schemaPath:"#/oneOf/7/properties/themeSlug/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;A=r===o}else A=!0}}}}}}else if("importWordPressFiles"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/8/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step")||void 0===e.wordPressFilesZip&&(r="wordPressFilesZip"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/8/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"wordPressFilesZip"!==s&&"pathInZip"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/8/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/8/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/8/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/8/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var O=s===o}else O=!0;if(O)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/8/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;O=e===o}else O=!0}}}var S=s===o}else S=!0;if(S){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/8/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("importWordPressFiles"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/8/properties/step/const",keyword:"const",params:{allowedValue:"importWordPressFiles"},message:"must be equal to constant"}],!1;S=s===o}else S=!0;if(S){if(void 0!==e.wordPressFilesZip){const r=o;si(e.wordPressFilesZip,{instancePath:t+"/wordPressFilesZip",parentData:e,parentDataProperty:"wordPressFilesZip",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);S=r===o}else S=!0;if(S)if(void 0!==e.pathInZip){const r=o;if("string"!=typeof e.pathInZip)return ui.errors=[{instancePath:t+"/pathInZip",schemaPath:"#/oneOf/8/properties/pathInZip/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;S=r===o}else S=!0}}}}}}}else if("installPlugin"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/9/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.pluginData&&(r="pluginData")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/9/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"ifAlreadyInstalled"!==s&&"step"!==s&&"pluginData"!==s&&"pluginZipFile"!==s&&"options"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/9/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/9/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/9/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/9/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var T=s===o}else T=!0;if(T)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/9/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;T=e===o}else T=!0}}}var k=s===o}else k=!0;if(k){if(void 0!==e.ifAlreadyInstalled){let r=e.ifAlreadyInstalled;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/9/properties/ifAlreadyInstalled/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("overwrite"!==r&&"skip"!==r&&"error"!==r)return ui.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/9/properties/ifAlreadyInstalled/enum",keyword:"enum",params:{allowedValues:ni.oneOf[9].properties.ifAlreadyInstalled.enum},message:"must be equal to one of the allowed values"}],!1;k=s===o}else k=!0;if(k){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/9/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("installPlugin"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/9/properties/step/const",keyword:"const",params:{allowedValue:"installPlugin"},message:"must be equal to constant"}],!1;k=s===o}else k=!0;if(k){if(void 0!==e.pluginData){let r=e.pluginData;const s=o,a=o;let p=!1;const c=o;si(r,{instancePath:t+"/pluginData",parentData:e,parentDataProperty:"pluginData",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);var E=c===o;if(p=p||E,!p){const s=o;ci(r,{instancePath:t+"/pluginData",parentData:e,parentDataProperty:"pluginData",rootData:n})||(i=null===i?ci.errors:i.concat(ci.errors),o=i.length);E=s===o;p=p||E}if(!p){const e={instancePath:t+"/pluginData",schemaPath:"#/oneOf/9/properties/pluginData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ui.errors=i,!1}o=a,null!==i&&(a?i.length=a:i=null);k=s===o}else k=!0;if(k){if(void 0!==e.pluginZipFile){const r=o;si(e.pluginZipFile,{instancePath:t+"/pluginZipFile",parentData:e,parentDataProperty:"pluginZipFile",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);k=r===o}else k=!0;if(k)if(void 0!==e.options){let r=e.options;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallPluginOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("activate"!==s&&"targetFolderName"!==s)return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallPluginOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.activate){const e=o;if("boolean"!=typeof r.activate)return ui.errors=[{instancePath:t+"/options/activate",schemaPath:"#/definitions/InstallPluginOptions/properties/activate/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var C=e===o}else C=!0;if(C)if(void 0!==r.targetFolderName){const e=o;if("string"!=typeof r.targetFolderName)return ui.errors=[{instancePath:t+"/options/targetFolderName",schemaPath:"#/definitions/InstallPluginOptions/properties/targetFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;C=e===o}else C=!0}}}k=s===o}else k=!0}}}}}}}}}else if("installTheme"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/10/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step")||void 0===e.themeData&&(r="themeData"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/10/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"ifAlreadyInstalled"!==s&&"step"!==s&&"themeData"!==s&&"themeZipFile"!==s&&"options"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/10/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/10/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/10/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/10/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var q=s===o}else q=!0;if(q)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/10/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;q=e===o}else q=!0}}}var D=s===o}else D=!0;if(D){if(void 0!==e.ifAlreadyInstalled){let r=e.ifAlreadyInstalled;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/10/properties/ifAlreadyInstalled/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("overwrite"!==r&&"skip"!==r&&"error"!==r)return ui.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/10/properties/ifAlreadyInstalled/enum",keyword:"enum",params:{allowedValues:ni.oneOf[10].properties.ifAlreadyInstalled.enum},message:"must be equal to one of the allowed values"}],!1;D=s===o}else D=!0;if(D){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/10/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("installTheme"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/10/properties/step/const",keyword:"const",params:{allowedValue:"installTheme"},message:"must be equal to constant"}],!1;D=s===o}else D=!0;if(D){if(void 0!==e.themeData){let r=e.themeData;const s=o,a=o;let p=!1;const c=o;si(r,{instancePath:t+"/themeData",parentData:e,parentDataProperty:"themeData",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);var x=c===o;if(p=p||x,!p){const s=o;ci(r,{instancePath:t+"/themeData",parentData:e,parentDataProperty:"themeData",rootData:n})||(i=null===i?ci.errors:i.concat(ci.errors),o=i.length);x=s===o;p=p||x}if(!p){const e={instancePath:t+"/themeData",schemaPath:"#/oneOf/10/properties/themeData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ui.errors=i,!1}o=a,null!==i&&(a?i.length=a:i=null);D=s===o}else D=!0;if(D){if(void 0!==e.themeZipFile){const r=o;si(e.themeZipFile,{instancePath:t+"/themeZipFile",parentData:e,parentDataProperty:"themeZipFile",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);D=r===o}else D=!0;if(D)if(void 0!==e.options){let r=e.options;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallThemeOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("activate"!==s&&"importStarterContent"!==s&&"targetFolderName"!==s)return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallThemeOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.activate){const e=o;if("boolean"!=typeof r.activate)return ui.errors=[{instancePath:t+"/options/activate",schemaPath:"#/definitions/InstallThemeOptions/properties/activate/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var j=e===o}else j=!0;if(j){if(void 0!==r.importStarterContent){const e=o;if("boolean"!=typeof r.importStarterContent)return ui.errors=[{instancePath:t+"/options/importStarterContent",schemaPath:"#/definitions/InstallThemeOptions/properties/importStarterContent/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;j=e===o}else j=!0;if(j)if(void 0!==r.targetFolderName){const e=o;if("string"!=typeof r.targetFolderName)return ui.errors=[{instancePath:t+"/options/targetFolderName",schemaPath:"#/definitions/InstallThemeOptions/properties/targetFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;j=e===o}else j=!0}}}}D=s===o}else D=!0}}}}}}}}}else if("login"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/11/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/11/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"username"!==s&&"password"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/11/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/11/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/11/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/11/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var H=s===o}else H=!0;if(H)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/11/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;H=e===o}else H=!0}}}var B=s===o}else B=!0;if(B){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/11/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("login"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/11/properties/step/const",keyword:"const",params:{allowedValue:"login"},message:"must be equal to constant"}],!1;B=s===o}else B=!0;if(B){if(void 0!==e.username){const r=o;if("string"!=typeof e.username)return ui.errors=[{instancePath:t+"/username",schemaPath:"#/oneOf/11/properties/username/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;B=r===o}else B=!0;if(B)if(void 0!==e.password){const r=o;if("string"!=typeof e.password)return ui.errors=[{instancePath:t+"/password",schemaPath:"#/oneOf/11/properties/password/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;B=r===o}else B=!0}}}}}}}else if("mkdir"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/12/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.path&&(r="path")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/12/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"path"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/12/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/12/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/12/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/12/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var L=s===o}else L=!0;if(L)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/12/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;L=e===o}else L=!0}}}var R=s===o}else R=!0;if(R){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/12/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("mkdir"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/12/properties/step/const",keyword:"const",params:{allowedValue:"mkdir"},message:"must be equal to constant"}],!1;R=s===o}else R=!0;if(R)if(void 0!==e.path){const r=o;if("string"!=typeof e.path)return ui.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/12/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;R=r===o}else R=!0}}}}}}else if("mv"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/13/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.fromPath&&(r="fromPath")||void 0===e.step&&(r="step")||void 0===e.toPath&&(r="toPath"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/13/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"fromPath"!==s&&"toPath"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/13/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/13/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/13/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/13/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var I=s===o}else I=!0;if(I)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/13/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;I=e===o}else I=!0}}}var N=s===o}else N=!0;if(N){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/13/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("mv"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/13/properties/step/const",keyword:"const",params:{allowedValue:"mv"},message:"must be equal to constant"}],!1;N=s===o}else N=!0;if(N){if(void 0!==e.fromPath){const r=o;if("string"!=typeof e.fromPath)return ui.errors=[{instancePath:t+"/fromPath",schemaPath:"#/oneOf/13/properties/fromPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;N=r===o}else N=!0;if(N)if(void 0!==e.toPath){const r=o;if("string"!=typeof e.toPath)return ui.errors=[{instancePath:t+"/toPath",schemaPath:"#/oneOf/13/properties/toPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;N=r===o}else N=!0}}}}}}}else if("resetData"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/14/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/14/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/14/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/14/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/14/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/14/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var W=s===o}else W=!0;if(W)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/14/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;W=e===o}else W=!0}}}var z=s===o}else z=!0;if(z)if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/14/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("resetData"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/14/properties/step/const",keyword:"const",params:{allowedValue:"resetData"},message:"must be equal to constant"}],!1;z=s===o}else z=!0}}}}}else if("request"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/15/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.request&&(r="request")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/15/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"request"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/15/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/15/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/15/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/15/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var F=s===o}else F=!0;if(F)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/15/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;F=e===o}else F=!0}}}var K=s===o}else K=!0;if(K){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/15/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("request"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/15/properties/step/const",keyword:"const",params:{allowedValue:"request"},message:"must be equal to constant"}],!1;K=s===o}else K=!0;if(K)if(void 0!==e.request){const r=o;li(e.request,{instancePath:t+"/request",parentData:e,parentDataProperty:"request",rootData:n})||(i=null===i?li.errors:i.concat(li.errors),o=i.length);K=r===o}else K=!0}}}}}}else if("rm"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/16/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.path&&(r="path")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/16/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"path"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/16/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/16/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/16/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/16/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var U=s===o}else U=!0;if(U)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/16/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;U=e===o}else U=!0}}}var V=s===o}else V=!0;if(V){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/16/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("rm"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/16/properties/step/const",keyword:"const",params:{allowedValue:"rm"},message:"must be equal to constant"}],!1;V=s===o}else V=!0;if(V)if(void 0!==e.path){const r=o;if("string"!=typeof e.path)return ui.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/16/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;V=r===o}else V=!0}}}}}}else if("rmdir"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/17/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.path&&(r="path")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/17/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"path"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/17/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/17/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/17/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/17/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var M=s===o}else M=!0;if(M)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/17/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;M=e===o}else M=!0}}}var Z=s===o}else Z=!0;if(Z){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/17/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("rmdir"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/17/properties/step/const",keyword:"const",params:{allowedValue:"rmdir"},message:"must be equal to constant"}],!1;Z=s===o}else Z=!0;if(Z)if(void 0!==e.path){const r=o;if("string"!=typeof e.path)return ui.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/17/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;Z=r===o}else Z=!0}}}}}}else if("runPHP"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/18/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.code&&(r="code")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/18/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"code"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/18/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/18/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/18/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/18/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var X=s===o}else X=!0;if(X)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/18/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;X=e===o}else X=!0}}}var Y=s===o}else Y=!0;if(Y){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/18/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("runPHP"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/18/properties/step/const",keyword:"const",params:{allowedValue:"runPHP"},message:"must be equal to constant"}],!1;Y=s===o}else Y=!0;if(Y)if(void 0!==e.code){const r=o;if("string"!=typeof e.code)return ui.errors=[{instancePath:t+"/code",schemaPath:"#/oneOf/18/properties/code/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;Y=r===o}else Y=!0}}}}}}else if("runPHPWithOptions"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/19/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.options&&(r="options")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/19/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"options"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/19/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/19/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/19/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/19/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var G=s===o}else G=!0;if(G)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/19/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;G=e===o}else G=!0}}}var Q=s===o}else Q=!0;if(Q){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/19/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("runPHPWithOptions"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/19/properties/step/const",keyword:"const",params:{allowedValue:"runPHPWithOptions"},message:"must be equal to constant"}],!1;Q=s===o}else Q=!0;if(Q)if(void 0!==e.options){const r=o;di(e.options,{instancePath:t+"/options",parentData:e,parentDataProperty:"options",rootData:n})||(i=null===i?di.errors:i.concat(di.errors),o=i.length);Q=r===o}else Q=!0}}}}}}else if("runWpInstallationWizard"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/20/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.options&&(r="options")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/20/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"options"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/20/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/20/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/20/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/20/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var J=s===o}else J=!0;if(J)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/20/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;J=e===o}else J=!0}}}var _=s===o}else _=!0;if(_){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/20/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("runWpInstallationWizard"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/20/properties/step/const",keyword:"const",params:{allowedValue:"runWpInstallationWizard"},message:"must be equal to constant"}],!1;_=s===o}else _=!0;if(_)if(void 0!==e.options){let r=e.options;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/WordPressInstallationOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("adminUsername"!==s&&"adminPassword"!==s)return ui.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/WordPressInstallationOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.adminUsername){const e=o;if("string"!=typeof r.adminUsername)return ui.errors=[{instancePath:t+"/options/adminUsername",schemaPath:"#/definitions/WordPressInstallationOptions/properties/adminUsername/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var $=e===o}else $=!0;if($)if(void 0!==r.adminPassword){const e=o;if("string"!=typeof r.adminPassword)return ui.errors=[{instancePath:t+"/options/adminPassword",schemaPath:"#/definitions/WordPressInstallationOptions/properties/adminPassword/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;$=e===o}else $=!0}}}_=s===o}else _=!0}}}}}}else if("runSql"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/21/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.sql&&(r="sql")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/21/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"sql"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/21/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/21/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/21/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/21/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ee=s===o}else ee=!0;if(ee)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/21/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ee=e===o}else ee=!0}}}var te=s===o}else te=!0;if(te){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/21/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("runSql"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/21/properties/step/const",keyword:"const",params:{allowedValue:"runSql"},message:"must be equal to constant"}],!1;te=s===o}else te=!0;if(te)if(void 0!==e.sql){const r=o;si(e.sql,{instancePath:t+"/sql",parentData:e,parentDataProperty:"sql",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);te=r===o}else te=!0}}}}}}else if("setSiteOptions"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/22/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.options&&(r="options")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/22/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"options"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/22/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/22/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/22/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/22/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var re=s===o}else re=!0;if(re)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/22/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;re=e===o}else re=!0}}}var se=s===o}else se=!0;if(se){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/22/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("setSiteOptions"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/22/properties/step/const",keyword:"const",params:{allowedValue:"setSiteOptions"},message:"must be equal to constant"}],!1;se=s===o}else se=!0;if(se)if(void 0!==e.options){let r=e.options;const s=o;if(o===s&&(!r||"object"!=typeof r||Array.isArray(r)))return ui.errors=[{instancePath:t+"/options",schemaPath:"#/oneOf/22/properties/options/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;se=s===o}else se=!0}}}}}}else if("unzip"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/23/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.extractToPath&&(r="extractToPath")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/23/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"zipFile"!==s&&"zipPath"!==s&&"extractToPath"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/23/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/23/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/23/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/23/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ne=s===o}else ne=!0;if(ne)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/23/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ne=e===o}else ne=!0}}}var ie=s===o}else ie=!0;if(ie){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/23/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("unzip"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/23/properties/step/const",keyword:"const",params:{allowedValue:"unzip"},message:"must be equal to constant"}],!1;ie=s===o}else ie=!0;if(ie){if(void 0!==e.zipFile){const r=o;si(e.zipFile,{instancePath:t+"/zipFile",parentData:e,parentDataProperty:"zipFile",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);ie=r===o}else ie=!0;if(ie){if(void 0!==e.zipPath){const r=o;if("string"!=typeof e.zipPath)return ui.errors=[{instancePath:t+"/zipPath",schemaPath:"#/oneOf/23/properties/zipPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ie=r===o}else ie=!0;if(ie)if(void 0!==e.extractToPath){const r=o;if("string"!=typeof e.extractToPath)return ui.errors=[{instancePath:t+"/extractToPath",schemaPath:"#/oneOf/23/properties/extractToPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ie=r===o}else ie=!0}}}}}}}}else if("updateUserMeta"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/24/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.meta&&(r="meta")||void 0===e.step&&(r="step")||void 0===e.userId&&(r="userId"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/24/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"meta"!==s&&"userId"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/24/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/24/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/24/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/24/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var oe=s===o}else oe=!0;if(oe)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/24/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;oe=e===o}else oe=!0}}}var ae=s===o}else ae=!0;if(ae){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/24/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("updateUserMeta"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/24/properties/step/const",keyword:"const",params:{allowedValue:"updateUserMeta"},message:"must be equal to constant"}],!1;ae=s===o}else ae=!0;if(ae){if(void 0!==e.meta){let r=e.meta;const s=o;if(o===s&&(!r||"object"!=typeof r||Array.isArray(r)))return ui.errors=[{instancePath:t+"/meta",schemaPath:"#/oneOf/24/properties/meta/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;ae=s===o}else ae=!0;if(ae)if(void 0!==e.userId){let r=e.userId;const s=o;if("number"!=typeof r||!isFinite(r))return ui.errors=[{instancePath:t+"/userId",schemaPath:"#/oneOf/24/properties/userId/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;ae=s===o}else ae=!0}}}}}}}else if("writeFile"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/25/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.data&&(r="data")||void 0===e.path&&(r="path")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/25/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"path"!==s&&"data"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/25/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/25/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/25/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/25/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var pe=s===o}else pe=!0;if(pe)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/25/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;pe=e===o}else pe=!0}}}var ce=s===o}else ce=!0;if(ce){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/25/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("writeFile"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/25/properties/step/const",keyword:"const",params:{allowedValue:"writeFile"},message:"must be equal to constant"}],!1;ce=s===o}else ce=!0;if(ce){if(void 0!==e.path){const r=o;if("string"!=typeof e.path)return ui.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/25/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ce=r===o}else ce=!0;if(ce)if(void 0!==e.data){let r=e.data;const s=o,a=o;let p=!1;const c=o;si(r,{instancePath:t+"/data",parentData:e,parentDataProperty:"data",rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);var fe=c===o;if(p=p||fe,!p){const e=o;if("string"!=typeof r){const e={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}fe=e===o;if(p=p||fe,!p){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.BYTES_PER_ELEMENT&&(e="BYTES_PER_ELEMENT")||void 0===r.buffer&&(e="buffer")||void 0===r.byteLength&&(e="byteLength")||void 0===r.byteOffset&&(e="byteOffset")||void 0===r.length&&(e="length")){const r={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/2/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const s in r)if("BYTES_PER_ELEMENT"!==s&&"buffer"!==s&&"byteLength"!==s&&"byteOffset"!==s&&"length"!==s){let e=r[s];const n=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/data/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/oneOf/25/properties/data/anyOf/2/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}if(!(n===o))break}if(e===o){if(void 0!==r.BYTES_PER_ELEMENT){let e=r.BYTES_PER_ELEMENT;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/data/BYTES_PER_ELEMENT",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}var le=s===o}else le=!0;if(le){if(void 0!==r.buffer){let e=r.buffer;const s=o;if(o===s)if(e&&"object"==typeof e&&!Array.isArray(e)){let r;if(void 0===e.byteLength&&(r="byteLength")){const e={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"};null===i?i=[e]:i.push(e),o++}else{const r=o;for(const s in e)if("byteLength"!==s){const e={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(r===o&&void 0!==e.byteLength){let r=e.byteLength;if("number"!=typeof r||!isFinite(r)){const e={instancePath:t+"/data/buffer/byteLength",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}}}}else{const e={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}le=s===o}else le=!0;if(le){if(void 0!==r.byteLength){let e=r.byteLength;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/data/byteLength",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}le=s===o}else le=!0;if(le){if(void 0!==r.byteOffset){let e=r.byteOffset;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/data/byteOffset",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}le=s===o}else le=!0;if(le)if(void 0!==r.length){let e=r.length;const s=o;if("number"!=typeof e||!isFinite(e)){const e={instancePath:t+"/data/length",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};null===i?i=[e]:i.push(e),o++}le=s===o}else le=!0}}}}}}else{const e={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}fe=e===o;p=p||fe}}if(!p){const e={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ui.errors=i,!1}o=a,null!==i&&(a?i.length=a:i=null);ce=s===o}else ce=!0}}}}}}}else if("writeFiles"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/26/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.filesTree&&(r="filesTree")||void 0===e.step&&(r="step")||void 0===e.writeToPath&&(r="writeToPath"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/26/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"writeToPath"!==s&&"filesTree"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/26/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/26/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/26/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/26/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var he=s===o}else he=!0;if(he)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/26/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;he=e===o}else he=!0}}}var de=s===o}else de=!0;if(de){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/26/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("writeFiles"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/26/properties/step/const",keyword:"const",params:{allowedValue:"writeFiles"},message:"must be equal to constant"}],!1;de=s===o}else de=!0;if(de){if(void 0!==e.writeToPath){const r=o;if("string"!=typeof e.writeToPath)return ui.errors=[{instancePath:t+"/writeToPath",schemaPath:"#/oneOf/26/properties/writeToPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;de=r===o}else de=!0;if(de)if(void 0!==e.filesTree){const r=o;ci(e.filesTree,{instancePath:t+"/filesTree",parentData:e,parentDataProperty:"filesTree",rootData:n})||(i=null===i?ci.errors:i.concat(ci.errors),o=i.length);de=r===o}else de=!0}}}}}}}else if("wp-cli"===r){if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/27/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.command&&(r="command")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/27/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"command"!==s&&"wpCliPath"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/27/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/27/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/27/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/27/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ue=s===o}else ue=!0;if(ue)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/27/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ue=e===o}else ue=!0}}}var me=s===o}else me=!0;if(me){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/27/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("wp-cli"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/27/properties/step/const",keyword:"const",params:{allowedValue:"wp-cli"},message:"must be equal to constant"}],!1;me=s===o}else me=!0;if(me){if(void 0!==e.command){let r=e.command;const s=o,n=o;let a=!1;const p=o;if("string"!=typeof r){const e={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var ge=p===o;if(a=a||ge,!a){const e=o;if(o===e)if(Array.isArray(r)){const e=r.length;for(let s=0;s<e;s++){const e=o;if("string"!=typeof r[s]){const e={instancePath:t+"/command/"+s,schemaPath:"#/oneOf/27/properties/command/anyOf/1/items/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if(!(e===o))break}}else{const e={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf/1/type",keyword:"type",params:{type:"array"},message:"must be array"};null===i?i=[e]:i.push(e),o++}ge=e===o;a=a||ge}if(!a){const e={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,ui.errors=i,!1}o=n,null!==i&&(n?i.length=n:i=null);me=s===o}else me=!0;if(me)if(void 0!==e.wpCliPath){const r=o;if("string"!=typeof e.wpCliPath)return ui.errors=[{instancePath:t+"/wpCliPath",schemaPath:"#/oneOf/27/properties/wpCliPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;me=r===o}else me=!0}}}}}}}else{if("setSiteLanguage"!==r)return ui.errors=[{instancePath:t,schemaPath:"#/discriminator",keyword:"discriminator",params:{error:"mapping",tag:"step",tagValue:r},message:'value of tag "step" must be in oneOf'}],!1;if(o==o){if(!e||"object"!=typeof e||Array.isArray(e))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/28/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let r;if(void 0===e.language&&(r="language")||void 0===e.step&&(r="step"))return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/28/required",keyword:"required",params:{missingProperty:r},message:"must have required property '"+r+"'"}],!1;{const r=o;for(const s in e)if("progress"!==s&&"step"!==s&&"language"!==s)return ui.errors=[{instancePath:t,schemaPath:"#/oneOf/28/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.progress){let r=e.progress;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/28/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("weight"!==s&&"caption"!==s)return ui.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/28/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.weight){let e=r.weight;const s=o;if("number"!=typeof e||!isFinite(e))return ui.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/28/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ye=s===o}else ye=!0;if(ye)if(void 0!==r.caption){const e=o;if("string"!=typeof r.caption)return ui.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/28/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;ye=e===o}else ye=!0}}}var be=s===o}else be=!0;if(be){if(void 0!==e.step){let r=e.step;const s=o;if("string"!=typeof r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/28/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("setSiteLanguage"!==r)return ui.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/28/properties/step/const",keyword:"const",params:{allowedValue:"setSiteLanguage"},message:"must be equal to constant"}],!1;be=s===o}else be=!0;if(be)if(void 0!==e.language){const r=o;if("string"!=typeof e.language)return ui.errors=[{instancePath:t+"/language",schemaPath:"#/oneOf/28/properties/language/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;be=r===o}else be=!0}}}}}}}}}return ui.errors=i,0===o}function mi(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;if(0===o){if(!e||"object"!=typeof e||Array.isArray(e))return mi.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const r=o;for(const s in e)if(!ri.call($n.properties,s))return mi.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(r===o){if(void 0!==e.landingPage){const r=o;if("string"!=typeof e.landingPage)return mi.errors=[{instancePath:t+"/landingPage",schemaPath:"#/properties/landingPage/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var a=r===o}else a=!0;if(a){if(void 0!==e.description){const r=o;if("string"!=typeof e.description)return mi.errors=[{instancePath:t+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0;if(a){if(void 0!==e.meta){let r=e.meta;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return mi.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let e;if(void 0===r.title&&(e="title")||void 0===r.author&&(e="author"))return mi.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"}],!1;{const e=o;for(const s in r)if("title"!==s&&"description"!==s&&"author"!==s&&"categories"!==s)return mi.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.title){const e=o;if("string"!=typeof r.title)return mi.errors=[{instancePath:t+"/meta/title",schemaPath:"#/properties/meta/properties/title/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=e===o}else p=!0;if(p){if(void 0!==r.description){const e=o;if("string"!=typeof r.description)return mi.errors=[{instancePath:t+"/meta/description",schemaPath:"#/properties/meta/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;p=e===o}else p=!0;if(p){if(void 0!==r.author){const e=o;if("string"!=typeof r.author)return mi.errors=[{instancePath:t+"/meta/author",schemaPath:"#/properties/meta/properties/author/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;p=e===o}else p=!0;if(p)if(void 0!==r.categories){let e=r.categories;const s=o;if(o===s){if(!Array.isArray(e))return mi.errors=[{instancePath:t+"/meta/categories",schemaPath:"#/properties/meta/properties/categories/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;{const r=e.length;for(let s=0;s<r;s++){const r=o;if("string"!=typeof e[s])return mi.errors=[{instancePath:t+"/meta/categories/"+s,schemaPath:"#/properties/meta/properties/categories/items/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(r===o))break}}}p=s===o}else p=!0}}}}}}a=s===o}else a=!0;if(a){if(void 0!==e.preferredVersions){let r=e.preferredVersions;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return mi.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{let e;if(void 0===r.php&&(e="php")||void 0===r.wp&&(e="wp"))return mi.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"}],!1;{const e=o;for(const s in r)if("php"!==s&&"wp"!==s)return mi.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o){if(void 0!==r.php){let e=r.php;const s=o,n=o;let a=!1;const p=o;if("string"!=typeof e){const e={instancePath:t+"/preferredVersions/php",schemaPath:"#/definitions/SupportedPHPVersion/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("8.4"!==e&&"8.3"!==e&&"8.2"!==e&&"8.1"!==e&&"8.0"!==e&&"7.4"!==e&&"7.3"!==e&&"7.2"!==e&&"7.1"!==e&&"7.0"!==e){const e={instancePath:t+"/preferredVersions/php",schemaPath:"#/definitions/SupportedPHPVersion/enum",keyword:"enum",params:{allowedValues:ei.enum},message:"must be equal to one of the allowed values"};null===i?i=[e]:i.push(e),o++}var c=p===o;if(a=a||c,!a){const r=o;if("string"!=typeof e){const e={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}if("latest"!==e){const e={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf/1/const",keyword:"const",params:{allowedValue:"latest"},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}c=r===o;a=a||c}if(!a){const e={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,mi.errors=i,!1}o=n,null!==i&&(n?i.length=n:i=null);var f=s===o}else f=!0;if(f)if(void 0!==r.wp){const e=o;if("string"!=typeof r.wp)return mi.errors=[{instancePath:t+"/preferredVersions/wp",schemaPath:"#/properties/preferredVersions/properties/wp/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;f=e===o}else f=!0}}}}a=s===o}else a=!0;if(a){if(void 0!==e.features){let r=e.features;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return mi.errors=[{instancePath:t+"/features",schemaPath:"#/properties/features/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("networking"!==s)return mi.errors=[{instancePath:t+"/features",schemaPath:"#/properties/features/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"}],!1;if(e===o&&void 0!==r.networking&&"boolean"!=typeof r.networking)return mi.errors=[{instancePath:t+"/features/networking",schemaPath:"#/properties/features/properties/networking/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1}}a=s===o}else a=!0;if(a){if(void 0!==e.extraLibraries){let r=e.extraLibraries;const s=o;if(o===s){if(!Array.isArray(r))return mi.errors=[{instancePath:t+"/extraLibraries",schemaPath:"#/properties/extraLibraries/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;{const e=r.length;for(let s=0;s<e;s++){let e=r[s];const n=o;if("string"!=typeof e)return mi.errors=[{instancePath:t+"/extraLibraries/"+s,schemaPath:"#/definitions/ExtraLibrary/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if("wp-cli"!==e)return mi.errors=[{instancePath:t+"/extraLibraries/"+s,schemaPath:"#/definitions/ExtraLibrary/const",keyword:"const",params:{allowedValue:"wp-cli"},message:"must be equal to constant"}],!1;if(!(n===o))break}}}a=s===o}else a=!0;if(a){if(void 0!==e.constants){let r=e.constants;const s=o;if(o==o){if(!r||"object"!=typeof r||Array.isArray(r))return mi.errors=[{instancePath:t+"/constants",schemaPath:"#/definitions/PHPConstants/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;for(const e in r){let s=r[e];const n=o;if("string"!=typeof s&&"boolean"!=typeof s&&("number"!=typeof s||!isFinite(s)))return mi.errors=[{instancePath:t+"/constants/"+e.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPConstants/additionalProperties/type",keyword:"type",params:{type:ti.additionalProperties.type},message:"must be string,boolean,number"}],!1;if(!(n===o))break}}a=s===o}else a=!0;if(a){if(void 0!==e.plugins){let r=e.plugins;const s=o;if(o===s){if(!Array.isArray(r))return mi.errors=[{instancePath:t+"/plugins",schemaPath:"#/properties/plugins/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;{const e=r.length;for(let s=0;s<e;s++){let e=r[s];const a=o,p=o;let c=!1;const f=o;if("string"!=typeof e){const e={instancePath:t+"/plugins/"+s,schemaPath:"#/properties/plugins/items/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var l=f===o;if(c=c||l,!c){const a=o;si(e,{instancePath:t+"/plugins/"+s,parentData:r,parentDataProperty:s,rootData:n})||(i=null===i?si.errors:i.concat(si.errors),o=i.length);l=a===o;c=c||l}if(!c){const e={instancePath:t+"/plugins/"+s,schemaPath:"#/properties/plugins/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,mi.errors=i,!1}if(o=p,null!==i&&(p?i.length=p:i=null),!(a===o))break}}}a=s===o}else a=!0;if(a){if(void 0!==e.siteOptions){let r=e.siteOptions;const s=o;if(o===s){if(!r||"object"!=typeof r||Array.isArray(r))return mi.errors=[{instancePath:t+"/siteOptions",schemaPath:"#/properties/siteOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;{const e=o;for(const s in r)if("blogname"!==s){const e=o;if("string"!=typeof r[s])return mi.errors=[{instancePath:t+"/siteOptions/"+s.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/siteOptions/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(e===o))break}if(e===o&&void 0!==r.blogname&&"string"!=typeof r.blogname)return mi.errors=[{instancePath:t+"/siteOptions/blogname",schemaPath:"#/properties/siteOptions/properties/blogname/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1}}a=s===o}else a=!0;if(a){if(void 0!==e.login){let r=e.login;const s=o,n=o;let p=!1;const c=o;if("boolean"!=typeof r){const e={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/0/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===i?i=[e]:i.push(e),o++}var h=c===o;if(p=p||h,!p){const e=o;if(o===e)if(r&&"object"==typeof r&&!Array.isArray(r)){let e;if(void 0===r.username&&(e="username")||void 0===r.password&&(e="password")){const r={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/required",keyword:"required",params:{missingProperty:e},message:"must have required property '"+e+"'"};null===i?i=[r]:i.push(r),o++}else{const e=o;for(const s in r)if("username"!==s&&"password"!==s){const e={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:s},message:"must NOT have additional properties"};null===i?i=[e]:i.push(e),o++;break}if(e===o){if(void 0!==r.username){const e=o;if("string"!=typeof r.username){const e={instancePath:t+"/login/username",schemaPath:"#/properties/login/anyOf/1/properties/username/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}var d=e===o}else d=!0;if(d)if(void 0!==r.password){const e=o;if("string"!=typeof r.password){const e={instancePath:t+"/login/password",schemaPath:"#/properties/login/anyOf/1/properties/password/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}d=e===o}else d=!0}}}else{const e={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};null===i?i=[e]:i.push(e),o++}h=e===o;p=p||h}if(!p){const e={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,mi.errors=i,!1}o=n,null!==i&&(n?i.length=n:i=null);a=s===o}else a=!0;if(a){if(void 0!==e.steps){let r=e.steps;const s=o;if(o===s){if(!Array.isArray(r))return mi.errors=[{instancePath:t+"/steps",schemaPath:"#/properties/steps/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;{const e=r.length;for(let s=0;s<e;s++){let e=r[s];const a=o,p=o;let c=!1;const f=o;ui(e,{instancePath:t+"/steps/"+s,parentData:r,parentDataProperty:s,rootData:n})||(i=null===i?ui.errors:i.concat(ui.errors),o=i.length);var u=f===o;if(c=c||u,!c){const r=o;if("string"!=typeof e){const e={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};null===i?i=[e]:i.push(e),o++}u=r===o;if(c=c||u,!c){const r=o,n={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf/2/not",keyword:"not",params:{},message:"must NOT be valid"};null===i?i=[n]:i.push(n),o++;u=r===o;if(c=c||u,!c){const r=o;if("boolean"!=typeof e){const e={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf/3/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};null===i?i=[e]:i.push(e),o++}if(!1!==e){const e={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf/3/const",keyword:"const",params:{allowedValue:!1},message:"must be equal to constant"};null===i?i=[e]:i.push(e),o++}u=r===o;if(c=c||u,!c){const r=o;if(null!==e){const e={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf/4/type",keyword:"type",params:{type:"null"},message:"must be null"};null===i?i=[e]:i.push(e),o++}u=r===o;c=c||u}}}}if(!c){const e={instancePath:t+"/steps/"+s,schemaPath:"#/properties/steps/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return null===i?i=[e]:i.push(e),o++,mi.errors=i,!1}if(o=p,null!==i&&(p?i.length=p:i=null),!(a===o))break}}}a=s===o}else a=!0;if(a)if(void 0!==e.$schema){const r=o;if("string"!=typeof e.$schema)return mi.errors=[{instancePath:t+"/$schema",schemaPath:"#/properties/%24schema/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;a=r===o}else a=!0}}}}}}}}}}}}}return mi.errors=i,0===o}function gi(e,{instancePath:t="",parentData:r,parentDataProperty:s,rootData:n=e}={}){let i=null,o=0;return mi(e,{instancePath:t,parentData:r,parentDataProperty:s,rootData:n})||(i=null===i?mi.errors:i.concat(mi.errors),o=i.length),gi.errors=i,0===o}const{wpCLI:yi,...bi}=le,wi={...bi,"wp-cli":yi,importFile:bi.importWxr};function Pi(e,{progress:t=new de,semaphore:r=new S({concurrency:3}),onStepCompleted:s=()=>{},corsProxy:n}={}){var i,o,a,p,c,f,l,h,d,u;e=structuredClone(e),e={...e,steps:(e.steps||[]).filter(Ai).filter(Oi)};for(const O of e.steps)!O||"object"!=typeof O||("importFile"===O.step?(O.step="importWxr",m.warn('The "importFile" step is deprecated. Use "importWxr" instead.')):"installPlugin"===(null==O?void 0:O.step)&&"pluginZipFile"in O?(O.pluginData=O.pluginZipFile,m.warn('The "pluginZipFile" option of the "installPlugin" step is deprecated. Use "pluginData" instead.')):"installTheme"===(null==O?void 0:O.step)&&"themeZipFile"in O&&(O.themeData=O.themeZipFile,m.warn('The "themeZipFile" option of the "installTheme" step is deprecated. Use "themeData" instead.')));if(e.constants&&e.steps.unshift({step:"defineWpConfigConsts",consts:e.constants}),e.siteOptions&&e.steps.unshift({step:"setSiteOptions",options:e.siteOptions}),e.plugins){const t=e.plugins.map((e=>"string"==typeof e?e.startsWith("https://")?{resource:"url",url:e}:{resource:"wordpress.org/plugins",slug:e}:e)).map((e=>({step:"installPlugin",pluginData:e})));e.steps.unshift(...t)}e.login&&e.steps.push({step:"login",...!0===e.login?{username:"admin"}:e.login});const g=(null==(i=e.steps)?void 0:i.findIndex((e=>"object"==typeof e&&(null==e?void 0:e.step)&&["wp-cli","enableMultisite"].includes(e.step))))??-1;if(null!=(o=null==e?void 0:e.extraLibraries)&&o.includes("wp-cli")||-1!==g){const t={step:"writeFile",data:L,path:B};-1===g?null==(a=e.steps)||a.push(t):null==(p=e.steps)||p.splice(g,0,t)}const y=null==(c=e.steps)?void 0:c.findIndex((e=>"object"==typeof e&&"importWxr"===(null==e?void 0:e.step)));void 0!==y&&y>-1&&("data-liberation"===e.steps[y].importer?null==(f=e.steps)||f.splice(y,0,{step:"writeFile",path:"/internal/shared/data-liberation-core.phar",data:{resource:"url",url:_n,caption:"Downloading the Data Liberation WXR importer"}}):null==(l=e.steps)||l.splice(y,0,{step:"installPlugin",pluginData:{resource:"url",url:"https://playground.wordpress.net/wordpress-importer.zip",caption:"Downloading the WordPress Importer plugin"}}));const{valid:b,errors:w}=function(e){var t;const r=gi(e);if(r)return{valid:r};const s=new Set;for(const i of gi.errors)i.schemaPath.startsWith("#/properties/steps/items/anyOf")||s.add(i.instancePath);const n=null==(t=gi.errors)?void 0:t.filter((e=>!(e.schemaPath.startsWith("#/properties/steps/items/anyOf")&&s.has(e.instancePath))));return{valid:r,errors:n}}(e);if(!b){const e=new Error(`Invalid blueprint: ${w[0].message} at ${w[0].instancePath}`);throw e.errors=w,e}const P=e.steps||[],v=P.reduce(((e,t)=>{var r;return e+((null==(r=t.progress)?void 0:r.weight)||1)}),0),A=P.map((e=>function(e,{semaphore:t,rootProgressTracker:r,totalProgressWeight:s,corsProxy:n}){var i;const o=r.stage(((null==(i=e.progress)?void 0:i.weight)||1)/s),a={};for(const h of Object.keys(e)){let r=e[h];In(r)&&(r=Nn.create(r,{semaphore:t,corsProxy:n})),a[h]=r}const p=async t=>{var r;try{return o.fillSlowly(),await wi[e.step](t,await async function(e){const t={};for(const r in e){const s=e[r];t[r]=s instanceof Nn?await s.resolve():s}return t}(a),{tracker:o,initialCaption:null==(r=e.progress)?void 0:r.caption})}finally{o.finish()}},c=Si(a),f=Si(a).filter((e=>e.isAsync)),l=1/(f.length+1);for(const h of f)h.progress=o.stage(l);return{run:p,step:e,resources:c}}(e,{semaphore:r,rootProgressTracker:t,totalProgressWeight:v,corsProxy:n})));return{versions:{php:vi(null==(h=e.preferredVersions)?void 0:h.php,G,Q),wp:(null==(d=e.preferredVersions)?void 0:d.wp)||"latest"},features:{networking:(null==(u=e.features)?void 0:u.networking)??!1},extraLibraries:e.extraLibraries||[],run:async r=>{try{for(const{resources:e}of A)for(const t of e)t.setPlayground(r),t.isAsync&&t.resolve();for(const[e,{run:t,step:i}]of Object.entries(A))try{const e=await t(r);s(e,i)}catch(n){throw m.error(n),new Error(`Error when executing the blueprint step #${e} (${JSON.stringify(i)}) ${n instanceof Error?`: ${n.message}`:n}`,{cause:n})}}finally{try{await r.goTo(e.landingPage||"/")}catch{}t.finish()}}}}function vi(e,t,r){return e&&t.includes(e)?e:r}function Ai(e){return!("object"!=typeof e||!e)}function Oi(e){return!["setPhpIniEntry","request"].includes(e.step)||(m.warn(`The "${e.step}" Blueprint is no longer supported and you can remove it from your Blueprint.`),!1)}function Si(e){const t=[];for(const r in e){const s=e[r];s instanceof Nn&&t.push(s)}return t}async function Ti({iframe:e,blueprint:t,remoteUrl:r,progressTracker:s=new de,disableProgressBar:n,onBlueprintStepCompleted:i,onClientConnected:o=()=>{},sapiName:a,onBeforeBlueprint:p,mounts:c,scope:f,corsProxy:l,shouldInstallWordPress:h}){(function(e){const t=new URL(e,ki);if((t.origin===ki||"localhost"===t.hostname)&&"/remote.html"!==t.pathname)throw new Error(`Invalid remote URL: ${t}. Expected origin to be ${ki}/remote.html.`)})(r),function(e){var t,r;null!=(t=e.sandbox)&&t.length&&(null==(r=e.sandbox)||!r.contains("allow-storage-access-by-user-activation"))&&e.sandbox.add("allow-storage-access-by-user-activation")}(e),r=function(e,t){const r=new URL(e,ki),s=new URLSearchParams(r.search);for(const[n,i]of Object.entries(t))if(null!=i&&!1!==i)if(Array.isArray(i))for(const e of i)s.append(n,e.toString());else s.set(n,i.toString());return r.search=s.toString(),r.toString()}(r,{progressbar:!n}),s.setCaption("Preparing WordPress"),t||(t={});const u=Pi(t,{progress:s.stage(.5),onStepCompleted:i,corsProxy:l});await new Promise((t=>{e.src=r,e.addEventListener("load",t,!1)}));const g=Dn(e.contentWindow,e.ownerDocument.defaultView);await g.isConnected(),s.pipe(g);const y=s.stage();return await g.onDownloadProgress(y.loadingListener),await g.boot({mounts:c,sapiName:a,scope:f??Math.random().toFixed(16),shouldInstallWordPress:h,phpVersion:u.versions.php,wpVersion:u.versions.wp,withNetworking:u.features.networking,corsProxyUrl:l}),await g.isReady(),y.finish(),d(m,g),o(g),p&&await p(),await async function(e,t){await e.run(t)}(u,g),s.finish(),g}const ki="https://playground.wordpress.net"}}]);