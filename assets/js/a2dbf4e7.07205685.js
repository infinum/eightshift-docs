"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[38768],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48571:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),i=["components"],s={id:"blocks-block-from-components",title:"Creating Block from Components"},l=void 0,p={unversionedId:"legacy/v4/guides/blocks-block-from-components",id:"legacy/v4/guides/blocks-block-from-components",title:"Creating Block from Components",description:"docs-source",source:"@site/docs/legacy/v4/guides/blocks-block-from-components.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/blocks-block-from-components",permalink:"/docs/legacy/v4/guides/blocks-block-from-components",draft:!1,tags:[],version:"current",frontMatter:{id:"blocks-block-from-components",title:"Creating Block from Components"},sidebar:"docs",previous:{title:"Manifest Structure",permalink:"/docs/legacy/v4/guides/blocks-structure-manifest"},next:{title:"Render Block View Helper",permalink:"/docs/legacy/v4/guides/blocks-render-block-view-helper"}},c={},d=[{value:"Folder structure",id:"folder-structure",level:3},{value:"Manifest",id:"manifest",level:3},{value:"Components",id:"components",level:3},{value:"Editor render",id:"editor-render",level:3},{value:"PHP view",id:"php-view",level:3},{value:"Styling",id:"styling",level:3}],m={toc:d},u="wrapper";function h(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)(u,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-frontend-libs/tree/v2.0.0/blocks/init/src/blocks/custom/button"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--frontend--libs-yellow?style=for-the-badge&logo=javascript&labelColor=2a2a2a",alt:"docs-source"}))),(0,a.kt)("p",null,"You may wonder: what is the difference between components and blocks? Aren't they the same thing?"),(0,a.kt)("p",null,"They are similar, but not the same. Components are, for lack of a better word, ",(0,a.kt)("em",{parentName:"p"},"dumb"),". They aren't bothered with the context and they are ",(0,a.kt)("strong",{parentName:"p"},"reusable"),".\nThis is the keyword in this whole ordeal. One component may be reused in different blocks. Also, the main difference is that the component is not registered in WordPress; its sole purpose is to provide reusable parts for your blocks."),(0,a.kt)("p",null,"Let's look at an example.\nFor instance, we want to create a card block. This block consists of an image, a title, and a text."),(0,a.kt)("h3",{id:"folder-structure"},"Folder structure"),(0,a.kt)("p",null,"First, we'll create a block in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/blocks/custom/card")," folder. The folder structure will look like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"|card\n| |components\n| | |card-editor.js\n| | |card-options.js\n| |card-block.js\n| |card.php\n| |card-style.scss\n| |manifest.json\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"manifest.json")," will hold all the default attributes and data about the new block"),(0,a.kt)("h3",{id:"manifest"},"Manifest"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "blockName": "card",\n  "title": "Card",\n  "description" : "Card with custom settings.",\n  "category": "eightshift",\n  "icon": {\n    "src": "buddicons-buddypress-logo"\n  },\n  "keywords": [\n    "Service",\n    "Box",\n    "Card"\n  ],\n  "hasWrapper": false,\n  "parent": [\n    "eightshift-boilerplate/cards-grid"\n  ],\n  "attributes": {\n    "media": {\n      "type": "object",\n      "default": {\n        "id": 0,\n        "url": "",\n        "title": ""\n      },\n      "items": {\n        "type": "object"\n      },\n      "mediaAction": true\n    },\n    "heading": {\n      "type": "string"\n    },\n    "paragraph": {\n      "type": "string"\n    }\n  }\n}\n')),(0,a.kt)("h3",{id:"components"},"Components"),(0,a.kt)("p",null,"Next, we want to set up the editor and options component for this block. So in the ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," folder, we'll add ",(0,a.kt)("inlineCode",{parentName:"p"},"card-editor.js")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"card-options.js")," files."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"card-editor.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'; // eslint-disable-line no-unused-vars\nimport { RichText } from '@wordpress/editor';\nimport { __ } from '@wordpress/i18n';\nimport { ImageEditor } from '../../../components/image/components/image-editor';\n\nexport const CardEditor = (props) => {\n  const {\n    attributes: {\n      blockClass,\n      heading,\n      paragraph,\n      media,\n    },\n    actions: {\n      onChangeHeading,\n      onChangeParagraph,\n    },\n  } = props;\n\n  return (\n    <div className={blockClass}>\n      <div className={`${blockClass}__media`}>\n        <ImageEditor\n          blockClass={blockClass}\n          media={media}\n        />\n      </div>\n      <div className={`${blockClass}__content`}>\n        <div className={`${blockClass}__heading`}>\n          <RichText\n            placeholder={__('Add Heading', 'eightshift-boilerplate')}\n            onChange={onChangeHeading}\n            value={heading}\n          />\n        </div>\n        <div className={`${blockClass}__paragraph`}>\n          <RichText\n            placeholder={__('Add Paragraph', 'eightshift-boilerplate')}\n            onChange={onChangeParagraph}\n            value={paragraph}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n")),(0,a.kt)("p",null,"Notice how we've imported the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-frontend-libs/tree/v2.0.0/blocks/init/src/blocks/components/image/components/image-editor.js"},(0,a.kt)("inlineCode",{parentName:"a"},"image-editor"))," component from the project's component folder. Note that in your project you'd just copy this component from the frontend-libs blocks (that is you'd copy the entire folder in your project as previously described)."),(0,a.kt)("p",null,"Our card editor component will have an ",(0,a.kt)("inlineCode",{parentName:"p"},"<ImageEditor />")," component and two ",(0,a.kt)("inlineCode",{parentName:"p"},"<RichText />")," components (which come from the core editor)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"card-options.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'; // eslint-disable-line no-unused-vars\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody } from '@wordpress/components';\nimport { ImageOptions } from '../../../components/image/components/image-options';\n\nexport const CardOptions = (props) => {\n  const {\n    attributes: {\n      media,\n    },\n    actions: {\n      onChangeMedia,\n    },\n  } = props;\n\n  return (\n    <PanelBody title={__('Card Details', 'eightshift-boilerplate')}>\n      <ImageOptions\n        media={media}\n        onChangeMedia={onChangeMedia}\n      />\n    </PanelBody>\n  );\n};\n")),(0,a.kt)("p",null,"The options component (the one shown on the right side in the editor screen), will only contain the ",(0,a.kt)("inlineCode",{parentName:"p"},"<ImageOptions />")," so that we can upload image in our block."),(0,a.kt)("h3",{id:"editor-render"},"Editor render"),(0,a.kt)("p",null,"Back to the block, we need to create the ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," method functionality and the view that we'll render on the front."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"card-block.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'; // eslint-disable-line no-unused-vars\nimport { Fragment } from '@wordpress/element';\nimport { InspectorControls } from '@wordpress/editor';\nimport { getActions } from 'EighshiftBlocksGetActions';\nimport manifest from './manifest.json';\nimport { CardEditor } from './components/card-editor';\nimport { CardOptions } from './components/card-options';\nimport './hooks';\n\nexport const Card = (props) => {\n\n  const {\n    attributes,\n  } = props;\n\n  const actions = getActions(props, manifest);\n\n  return (\n    <Fragment>\n      <InspectorControls>\n        <CardOptions\n          attributes={attributes}\n          actions={actions}\n        />\n      </InspectorControls>\n      <CardEditor\n        attributes={attributes}\n        actions={actions}\n      />\n    </Fragment>\n  );\n};\n")),(0,a.kt)("p",null,"Here we'll use our ready-made component (built out of other components - reusability), and wrap it in ",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/fragments.html"},"React Fragment"),". It is a pattern used to return multiple elements."),(0,a.kt)("p",null,"Another thing you'll note is the usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"<InspectorControls />")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WordPress/gutenberg/tree/master/packages/block-editor/src/components/inspector-controls"},"component"),". It is used to display settings of the block in the sidebar (in our case our options that contain the image upload component).\nLastly, both our ",(0,a.kt)("inlineCode",{parentName:"p"},"<CardEditor />")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<InspectorControls />")," are wrapped in the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Fragment />")," wrapper due to Reacts one top-level element rule. If your block doesn't have options, you can only have ",(0,a.kt)("inlineCode",{parentName:"p"},"<CardEditor />")," component in here."),(0,a.kt)("h3",{id:"php-view"},"PHP view"),(0,a.kt)("p",null,"So all we need now is the PHP view."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"card.php")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * Template for the Card Block.\n *\n * @since 1.0.0\n * @package Eightshift_Boilerplate\\Blocks.\n */\n\nnamespace Eightshift_Boilerplate\\Blocks;\n\n$heading   = $attributes['heading'] ?? '';\n$paragraph = $attributes['paragraph'] ?? '';\n$media     = $attributes['media'] ?? [];\n\n$block_class = $attributes['blockClass'] ?? '';\n\n?>\n\n<div class=\"<?php echo esc_attr( $block_class ); ?>\">\n\n  <?php if ( ! empty( $media ) ) { ?>\n    <div class=\"<?php echo esc_attr( \"{$block_class}__media\" ); ?>\">\n      <?php $this->render_block_view(\n        '/components/image/image.php',\n        [\n          'blockClass' => $attributes['blockClass'] ?? '',\n          'media'      => $media,\n        ]\n      );\n      ?>\n    </div>\n  <?php } ?>\n\n  <div class=\"<?php echo esc_attr( \"{$block_class}__content\" ); ?>\">\n    <?php if ( ! empty( $heading ) ) { ?>\n      <div class=\"<?php echo esc_attr( \"{$block_class}__heading\" ); ?>\">\n        <?php echo wp_kses_post( $heading ); ?>\n      </div>\n    <?php } ?>\n\n    <?php if ( ! empty( $paragraph ) ) { ?>\n      <div class=\"<?php echo esc_attr( \"{$block_class}__paragraph\" ); ?>\">\n        <?php echo wp_kses_post( $paragraph ); ?>\n      </div>\n    <?php } ?>\n  </div>\n\n</div>\n\n")),(0,a.kt)("p",null,"Notice how we used"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<?php $this->render_block_view(\n  '/components/image/image.php',\n  [\n    'blockClass' => $attributes['blockClass'] ?? '',\n    'media'      => $media,\n  ]\n);\n?>\n")),(0,a.kt)("p",null,"To render out our ",(0,a.kt)("inlineCode",{parentName:"p"},"image")," component. Again, we're showing the power of reusability here."),(0,a.kt)("h3",{id:"styling"},"Styling"),(0,a.kt)("p",null,"You can style them how you want, but we added some default styles"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"card-style.scss")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scss"},"$block-card: (\n  heading: (\n    mobile: (\n      font-size: 24px,\n      line-height: 1.33,\n    ),\n  ),\n  paragraph: (\n    mobile: (\n      font-size: 18px,\n      line-height: 1.5,\n    ),\n  ),\n);\n\n.block-card {\n  $this: &;\n\n  &__media {\n    margin-bottom: 25px;\n  }\n\n  &__img {\n    margin: 0 auto;\n  }\n\n  &__content {\n    text-align: center;\n  }\n\n  &__heading {\n    @include responsive($block-card, heading);\n    font-weight: bold;\n  }\n\n  &__paragraph {\n    @include responsive($block-card, paragraph);\n    margin-top: 15px;\n  }\n}\n")))}h.isMDXComponent=!0}}]);