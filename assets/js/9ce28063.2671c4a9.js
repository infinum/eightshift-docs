"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[43827],{13696:(e,n,t)=>{t.d(n,{Z$:()=>l,bs:()=>s,uV:()=>i,xn:()=>a});const s=[{label:"Sans",value:"sans"},{label:"Serif",value:"serif"},{label:"Monospace",value:"mono"}],a={globalVariables:{breakpoints:{mobile:480,tablet:960,desktop:1440,large:1920}}},i=["mobile","tablet","desktop","large"],l={large:"myAttrLarge",desktop:"myAttrDesktop",tablet:"myAttrTablet",mobile:"myAttrMobile"}},24584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>b,default:()=>f,frontMatter:()=>u,metadata:()=>s,toc:()=>g});const s=JSON.parse('{"id":"es-ui-components/responsive","title":"Responsive","description":"Easily manage values that can be set per-breakpoint.","source":"@site/ui-components/es-ui-components/responsive.mdx","sourceDirName":"es-ui-components","slug":"/es-ui-components/responsive","permalink":"/components/es-ui-components/responsive","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"components","previous":{"title":"Modal","permalink":"/components/es-ui-components/modal"},"next":{"title":"Breakpoint preview","permalink":"/components/es-ui-components/breakpoint-preview"}}');var a=t(74848),i=t(28453),l=t(70177),o=t(8232),r=t(69314),p=t(55880),d=t(49378),c=t(13731),h=t(13696);const u={},b="Responsive",v={},g=[{value:"Highlighted props",id:"highlighted-props",level:2},{value:"Inline",id:"inline",level:3},{value:"Different control when inline (collapsed view)",id:"different-control-when-inline-collapsed-view",level:3},{value:"Different control when inline (expanded view)",id:"different-control-when-inline-expanded-view",level:3},{value:"Disable desktop-first/mobile-first picker",id:"disable-desktop-firstmobile-first-picker",level:3},{value:"<code>MiniResponsive</code>",id:"miniresponsive",level:2},{value:"<code>ResponsiveLegacy</code>",id:"responsivelegacy",level:2},{value:"Inherited values",id:"inherited-values",level:3}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"responsive",children:"Responsive"})}),"\n","\n",(0,a.jsx)(n.p,{children:"Easily manage values that can be set per-breakpoint."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["If using Frontend libs (that has ",(0,a.jsx)(n.strong,{children:"one attribute per breakpoint"}),"), use the ",(0,a.jsx)(n.a,{href:"#responsivelegacy",children:"ResponsiveLegacy"})," component."]})}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(o.F,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,children:({currentValue:e,handleChange:n,options:t})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<Responsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={value}\n\tonChange={(value) => setValue(value)}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpoints={['mobile', 'tablet', 'desktop', 'large']}\n\tbreakpointData={{\n\t\tmobile: 480,\n\t\ttablet: 960,\n\t\tdesktop: 1440,\n\t\tlarge: 1920,\n\t}}\n>\n\t{({ currentValue, handleChange, options }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t/>\n\t)}\n</Responsive>\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["In Frontend libs Tailwind you can use the ",(0,a.jsx)(n.code,{children:"getResponsiveData"})," helper to fetch breakpoint data."]})}),"\n",(0,a.jsx)(n.h2,{id:"highlighted-props",children:"Highlighted props"}),"\n",(0,a.jsx)(n.p,{children:"For the complete list of props, use your IDE's autocomplete functionality."}),"\n",(0,a.jsx)(n.h3,{id:"inline",children:"Inline"}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(o.F,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,inline:!0,children:({currentValue:e,handleChange:n,options:t})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<Responsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={value}\n\tonChange={(value) => setValue(value)}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpoints={['mobile', 'tablet', 'desktop', 'large']}\n\tbreakpointData={{\n\t\tmobile: 480,\n\t\ttablet: 960,\n\t\tdesktop: 1440,\n\t\tlarge: 1920,\n\t}}\n\t// highlight-next-line\n\tinline\n>\n\t{({ currentValue, handleChange, options }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t/>\n\t)}\n</Responsive>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"different-control-when-inline-collapsed-view",children:"Different control when inline (collapsed view)"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Only applies to the control for the default breakpoint."})}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(o.F,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,inline:!0,children:({currentValue:e,handleChange:n,options:t,isInlineCollapsedView:s})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e,type:s?"menu":"toggleButtons"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<Responsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={value}\n\tonChange={(value) => setValue(value)}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpoints={['mobile', 'tablet', 'desktop', 'large']}\n\tbreakpointData={{\n\t\tmobile: 480,\n\t\ttablet: 960,\n\t\tdesktop: 1440,\n\t\tlarge: 1920,\n\t}}\n\tinline\n>\n\t// highlight-next-line\n\t{({ currentValue, handleChange, options, isInlineCollapsedView }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t\t// highlight-next-line\n\t\t\ttype={isInlineCollapsedView ? 'menu' : 'toggleButtons'}\n\t\t/>\n\t)}\n</Responsive>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"different-control-when-inline-expanded-view",children:"Different control when inline (expanded view)"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Only applies to the control for the default breakpoint."})}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(o.F,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,inline:!0,children:({currentValue:e,handleChange:n,options:t,isInlineExpandedView:s})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e,type:s?"radiosSegmented":"toggleButtons"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<Responsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={value}\n\tonChange={(value) => setValue(value)}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpoints={['mobile', 'tablet', 'desktop', 'large']}\n\tbreakpointData={{\n\t\tmobile: 480,\n\t\ttablet: 960,\n\t\tdesktop: 1440,\n\t\tlarge: 1920,\n\t}}\n\tinline\n>\n\t// highlight-next-line\n\t{({ currentValue, handleChange, options, isInlineExpandedView }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t\t// highlight-next-line\n\t\t\ttype={isInlineExpandedView ? 'radiosSegmented' : 'toggleButtons'}\n\t\t/>\n\t)}\n</Responsive>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"disable-desktop-firstmobile-first-picker",children:"Disable desktop-first/mobile-first picker"}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(o.F,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,noModeSelect:!0,children:({currentValue:e,handleChange:n,options:t})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<Responsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={value}\n\tonChange={(value) => setValue(value)}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpoints={['mobile', 'tablet', 'desktop', 'large']}\n\tbreakpointData={{\n\t\tmobile: 480,\n\t\ttablet: 960,\n\t\tdesktop: 1440,\n\t\tlarge: 1920,\n\t}}\n\t// highlight-next-line\n\tnoModeSelect\n>\n\t{({ currentValue, handleChange, options }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t/>\n\t)}\n</Responsive>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"miniresponsive",children:(0,a.jsx)(n.code,{children:"MiniResponsive"})}),"\n",(0,a.jsxs)(n.p,{children:["If you need an ultra compact version of the ",(0,a.jsx)(n.code,{children:"Responsive"})," component, use the ",(0,a.jsx)(n.code,{children:"MiniResponsive"})," component. Props are all the same."]}),"\n",(0,a.jsxs)(n.p,{children:["Using single button pickers is recommended, though. (",(0,a.jsx)(n.code,{children:"isInlineCollapsedView"})," is your friend here)"]}),"\n",(0,a.jsx)(l.d,{defaultValue:{_default:"sans",_desktopFirst:!1},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(p.M,{icon:c.P.fontFamily,label:"Font family",value:e,onChange:n,options:h.bs,breakpoints:h.uV,breakpointData:h.xn.globalVariables.breakpoints,children:({currentValue:e,handleChange:n,options:t,isInlineCollapsedView:s})=>(0,a.jsx)(r.w,{options:t,onChange:e=>n(e),value:e,type:s?"menu":"toggleButtons"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<MiniResponsive\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tvalue={data}\n\tonChange={setData}\n\toptions={responsiveOptions}\n\tbreakpoints={breakpointNames}\n\tbreakpointData={globalManifest.globalVariables.breakpoints}\n>\n\t{({ currentValue, handleChange, options, isInlineCollapsedView }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t\ttype={isInlineCollapsedView ? 'menu' : 'toggleButtons'}\n\t\t/>\n\t)}\n</MiniResponsive>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"responsivelegacy",children:(0,a.jsx)(n.code,{children:"ResponsiveLegacy"})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["This component is meant to be used in projects that have ",(0,a.jsx)(n.strong,{children:"one attribute per breakpoint"}),", e.g. regular Frontend libs. If using Frontend libs ",(0,a.jsx)(n.strong,{children:"Tailwind"}),", use the ",(0,a.jsx)(n.a,{href:"/components/es-ui-components/responsive",children:"Responsive"})," component."]})}),"\n",(0,a.jsxs)(n.p,{children:["Props are mostly the same as in the ",(0,a.jsx)(n.code,{children:"Responsive"})," component."]}),"\n",(0,a.jsx)(n.p,{children:"Main differences:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"there is not desktop-first/mobile-first mode switcher"}),"\n",(0,a.jsxs)(n.li,{children:["there is no ",(0,a.jsx)(n.em,{children:"Responsive preview"})]}),"\n"]}),"\n",(0,a.jsx)(l.d,{defaultValue:{myAttrLarge:"serif",myAttrDesktop:"",myAttrTablet:"",myAttrMobile:""},preContent:e=>(0,a.jsx)(n.span,{className:"es:font-mono es:text-xs esd-white-space-pre",children:JSON.stringify(e,null,2)}),children:(e,n)=>(0,a.jsx)(d.s,{icon:c.P.fontFamily,label:"Font family",attribute:h.Z$,value:e,onChange:(t,s)=>{n({...e,[t]:s})},options:h.bs,breakpointData:h.xn.globalVariables.breakpoints,children:({currentValue:e,options:n,handleChange:t})=>(0,a.jsx)(r.w,{options:n,onChange:e=>t(e),value:e})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<ResponsiveLegacy\n\ticon={icons.fontFamily}\n\tlabel='Font family'\n\tattribute={manifest.responsiveAttributes.myAttr}\n\tvalue={attributes}\n\tonChange={(attributeName, newValue) => {\n\t\tsetAttributes({\n\t\t\t...attributes,\n\t\t\t[attributeName]: newValue,\n\t\t});\n\t}}\n\toptions={[\n\t\t{ value: 'sans', label: 'Sans-serif' },\n\t\t{ value: 'serif', label: 'Serif' },\n\t\t{ value: 'mono', label: 'Monospace' },\n\t]}\n\tbreakpointData={globalManifest.globalVariables.breakpoints}\n>\n\t{({ currentValue, handleChange, options }) => (\n\t\t<OptionSelect\n\t\t\toptions={options}\n\t\t\tonChange={(value) => handleChange(value)}\n\t\t\tvalue={currentValue}\n\t\t/>\n\t)}\n</ResponsiveLegacy>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inherited-values",children:"Inherited values"}),"\n",(0,a.jsxs)(n.p,{children:["The default value that marks an attribute as ",(0,a.jsx)(n.em,{children:"inherited"})," from the breakpoint above is an empty string.\nTo set a custom one, use the ",(0,a.jsx)(n.code,{children:"inheritValue"})," prop."]}),"\n",(0,a.jsxs)(n.p,{children:["If you need the inherited value to be ",(0,a.jsx)(n.code,{children:"undefined"}),", set the ",(0,a.jsx)(n.code,{children:"allowUndefined"})," prop instead."]})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},70177:(e,n,t)=>{t.d(n,{d:()=>r});var s=t(96540),a=t(82972),i=t(34164),l=t(7351),o=t(74848);const r=({children:e,defaultValue:n,className:t,fitWidth:r=!1,resettable:p=!1,preContent:d})=>{const[c,h]=(0,s.useState)(n),u=(0,s.useRef)();return(0,o.jsx)(l.A,{children:()=>(0,o.jsxs)("div",{className:"es:flex es:font-sans es:css-reset",children:[(0,o.jsxs)("div",{className:(0,i.$)("es:border es:border-dashed es:border-gray-200 es:p-4 es:rounded-lg esd-space-v es:shrink-0 esd-showcase",r?"es:w-fit":"esd-showcase-w",t),children:["function"==typeof e&&e(c,h),"function"!=typeof e&&e]}),(0,o.jsxs)("div",{className:"esd-space-v es:ml-3 es:grow",children:[d&&d(c,h,u),p&&(0,o.jsx)(a.$,{size:"small",onPress:()=>h(n),disabled:c===n,children:"Reset"})]})]})})}}}]);