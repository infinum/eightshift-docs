"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[40168],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return d}});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},f=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,d=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?o.createElement(d,r(r({ref:n},f),{},{components:t})):o.createElement(d,r({ref:n},f))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},17795:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var o=t(87462),a=t(63366),i=(t(67294),t(3905)),r=["components"],s={id:"fonts-custom",title:"Custom fonts"},l=void 0,c={unversionedId:"legacy/v4/guides/fonts-custom",id:"legacy/v4/guides/fonts-custom",title:"Custom fonts",description:"To add a custom font and generate @font-face rules in built CSS file we recommend using PostCSS plugin: Font Magician. Before configuring Font Magician, font files need to be included in the build process.",source:"@site/docs/legacy/v4/guides/fonts-custom.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/fonts-custom",permalink:"/docs/legacy/v4/guides/fonts-custom",draft:!1,tags:[],version:"current",frontMatter:{id:"fonts-custom",title:"Custom fonts"},sidebar:"docs",previous:{title:"Login",permalink:"/docs/legacy/v4/guides/login"},next:{title:"Icon font",permalink:"/docs/legacy/v4/guides/fonts-icon"}},f={},u=[{value:"Font files setup",id:"font-files-setup",level:2},{value:"Font Magician configuration",id:"font-magician-configuration",level:2},{value:"Using the custom font",id:"using-the-custom-font",level:2}],p={toc:u},m="wrapper";function d(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)(m,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To add a custom font and generate ",(0,i.kt)("inlineCode",{parentName:"p"},"@font-face")," rules in built CSS file we recommend using PostCSS plugin: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jonathantneal/postcss-font-magician"},"Font Magician"),". Before configuring Font Magician, font files need to be included in the build process."),(0,i.kt)("h2",{id:"font-files-setup"},"Font files setup"),(0,i.kt)("p",null,"Font files should be placed in ",(0,i.kt)("inlineCode",{parentName:"p"},"theme-name/assets/fonts"),". There are multiple web oriented font file formats. For majority of browsers only ",(0,i.kt)("inlineCode",{parentName:"p"},".woff")," format is enough (having it alongisde ",(0,i.kt)("inlineCode",{parentName:"p"},".woff2")," is even better), but if you plan to support older browsers (e.g. IE 10 and older) you must include ",(0,i.kt)("inlineCode",{parentName:"p"},".eot")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".svg")," formats, as well."),(0,i.kt)("p",null,"Fonts, and all of their variations, need to be included in ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," file inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"/fonts")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './Font-Name-Variation.woff2';\nimport './Font-Name-Variation.woff';\n")),(0,i.kt)("p",null,"After running the build process again, fonts will be placed in ",(0,i.kt)("inlineCode",{parentName:"p"},"/theme-name/public")," directory and we can configure Font Magician to load them."),(0,i.kt)("h2",{id:"font-magician-configuration"},"Font Magician configuration"),(0,i.kt)("p",null,"To install Font Magician run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install postcss-font-magician --save-dev\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add postcss-font-magician --dev\n")),(0,i.kt)("p",null,"In the root of the theme there is already a ",(0,i.kt)("inlineCode",{parentName:"p"},"postcss.config.js")," file with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/postcss/autoprefixer"},"Autoprefixer")," enabled. To configure Font Magician it needs to be imported first and its configuration needs to be added to the existing one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\nconst postcssFontMagician = require('postcss-font-magician');\n\nmodule.exports = {\n  plugins: [\n    ... // other postCss configs\n    postcssFontMagician({\n      foundries: ['custom'],\n      custom: {\n        FontName: { // font-family declaration\n          variants: {\n            normal: { // font-style variation\n              400: { // font-weight variation\n                url: {\n                  woff: 'Font-Name-Variation.woff',\n                  woff2: 'Font-Name-Variation.woff2',\n                },\n              },\n              ... // other font-weight variation of the same font-tyle\n            },\n            ... // other font-style variation of the same font-family\n          },\n        },\n        ... // other font-family declarations\n      },\n    }),\n  ],\n};\n")),(0,i.kt)("p",null,"There are other configuration options for including custom fonts using Font Magician and you can check them in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jonathantneal/postcss-font-magician#options"},"font magician documentation")),(0,i.kt)("p",null,"Restart the build process to generate ",(0,i.kt)("inlineCode",{parentName:"p"},"@font-face")," rules."),(0,i.kt)("h2",{id:"using-the-custom-font"},"Using the custom font"),(0,i.kt)("p",null,"To use the custom font in a theme, simply declare a new ",(0,i.kt)("inlineCode",{parentName:"p"},"font-family")," rule and assign it to the ",(0,i.kt)("strong",{parentName:"p"},"font name")," from the Font Magician configuration. A better approach would be to save the specific ",(0,i.kt)("inlineCode",{parentName:"p"},"font-family")," values to variables that can be reused:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scss"},"// Variable declared in a global variables .scss file.\n$base-font-family: `FontName`, sans-serif,\n\n// Using the variable in .scss partial\nbody {\n  font-family: $base-font-family;\n  ...\n}\n")))}d.isMDXComponent=!0}}]);