"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[9259],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return y}});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),_=s,y=u["".concat(p,".").concat(_)]||u[_]||m[_]||o;return n?r.createElement(y,a(a({ref:t},c),{},{components:n})):r.createElement(y,a({ref:t},c))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=_;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},6888:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(87462),s=n(63366),o=(n(67294),n(3905)),a=["components"],i={id:"post-type",title:"Post Type"},p=void 0,l={unversionedId:"legacy/v4/guides/post-type",id:"legacy/v4/guides/post-type",title:"Post Type",description:"docs-source",source:"@site/docs/legacy/v4/guides/post-type.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/post-type",permalink:"/docs/legacy/v4/guides/post-type",draft:!1,tags:[],version:"current",frontMatter:{id:"post-type",title:"Post Type"},sidebar:"docs",previous:{title:"Enqueue",permalink:"/docs/legacy/v4/guides/enqueue"},next:{title:"Taxonomy",permalink:"/docs/legacy/v4/guides/taxonomy"}},c={},u=[{value:"Example:",id:"example",level:2}],m={toc:u},_="wrapper";function y(e){var t=e.components,n=(0,s.Z)(e,a);return(0,o.kt)(_,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-libs/tree/v2.0.0/src/custom-post-type/class-base-post-type.php"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"}))),(0,o.kt)("p",null,"When working on a WordPress project it is possible that, at one point, you will need to register a Custom Post Type.\nCustom Post Type class is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it, use ",(0,o.kt)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Custom_Post_Type\\Base_Post_Type")," class. This is an abstract class."),(0,o.kt)("h2",{id:"example"},"Example:"),(0,o.kt)("p",null,"To create a custom post type:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"make a new class ",(0,o.kt)("inlineCode",{parentName:"li"},"src/custom-post-type/class-projects.php"),"."),(0,o.kt)("li",{parentName:"ol"},"implement all the methods provided in the example."),(0,o.kt)("li",{parentName:"ol"},"register the class inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"class-main.php")," file."),(0,o.kt)("li",{parentName:"ol"},"dump autoload.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * File that holds class for \"Projects\" custom post type registration.\n *\n * @package Eightshift_Boilerplate\\Custom_Post_Type\n */\n\nnamespace Eightshift_Boilerplate\\Custom_Post_Type;\n\nuse Eightshift_Libs\\Custom_Post_Type\\Base_Post_Type;\nuse Eightshift_Libs\\Custom_Post_Type\\Label_Generator;\n\n/**\n * Class Projects.\n */\nclass Projects extends Base_Post_Type {\n\n  /**\n   * Post type slug constant.\n   *\n   * @var string\n   */\n  const POST_TYPE_SLUG = 'projects-type';\n\n  /**\n   * URL slug for the custom post type.\n   *\n   * @var string\n   */\n  const POST_TYPE_URL_SLUG = 'projects';\n\n  /**\n   * Rest API Endpoint slug constant.\n   *\n   * @var string\n   */\n  const REST_API_ENDPOINT_SLUG = 'projects';\n\n  /**\n   * Capability type for projects post type.\n   *\n   * @var string\n   */\n  const POST_CAPABILITY_TYPE = 'post';\n\n  /**\n   * Location of menu in sidebar.\n   *\n   * @var int\n   */\n  const MENU_POSITION = 20;\n\n  /**\n   * Set menu icon.\n   *\n   * @var string\n   */\n  const MENU_ICON = 'dashicons-analytics';\n\n  /**\n   * Get the slug to use for the Projects custom post type.\n   *\n   * @return string Custom post type slug.\n   */\n  protected function get_post_type_slug() : string {\n    return self::POST_TYPE_SLUG;\n  }\n\n  /**\n   * Get the arguments that configure the Projects custom post type.\n   *\n   * @return array Array of arguments.\n   */\n  protected function get_post_type_arguments() : array {\n\n    $nouns = [\n      Label_Generator::SINGULAR_NAME_UC => esc_html_x( 'Project', 'Projects post uppercase singular name', 'eightshift-boilerplate' ),\n      Label_Generator::SINGULAR_NAME_LC => esc_html_x( 'project', 'Projects post lowercase singular name', 'eightshift-boilerplate' ),\n      Label_Generator::PLURAL_NAME_UC => esc_html_x( 'Projects', 'Projects post uppercase plural name', 'eightshift-boilerplate' ),\n      Label_Generator::PLURAL_NAME_LC => esc_html_x( 'projects', 'Projects post lowercase plural name', 'eightshift-boilerplate' ),\n    ];\n\n    return [\n      'label'              => $nouns[ Label_Generator::SINGULAR_NAME_UC ],\n      'labels'             => ( new Label_Generator() )->get_generated_labels( $nouns ),\n      'public'             => true,\n      'publicly_queryable' => true,\n      'show_ui'            => true,\n      'show_in_menu'       => true,\n      'query_var'          => true,\n      'capability_type'    => self::POST_CAPABILITY_TYPE,\n      'has_archive'        => true,\n      'rewrite'            => [ 'slug' => static::POST_TYPE_URL_SLUG ],\n      'hierarchical'       => false,\n      'menu_icon'          => static::MENU_ICON,\n      'menu_position'      => static::MENU_POSITION,\n      'supports'           => [ 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ],\n      'show_in_rest'       => true,\n      'rest_base'          => static::REST_API_ENDPOINT_SLUG,\n    ];\n  }\n}\n\n")))}y.isMDXComponent=!0}}]);