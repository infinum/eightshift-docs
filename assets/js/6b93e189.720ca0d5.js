"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[49876],{17966:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(74848),d=t(28453);const o={id:"requirements",title:"Requirements"},s=void 0,r={id:"addons/create/requirements",title:"Requirements",description:"Add-on naming convention",source:"@site/forms/addons/create/requirements.md",sourceDirName:"addons/create",slug:"/addons/create/requirements",permalink:"/forms/addons/create/requirements",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"requirements",title:"Requirements"},sidebar:"forms",previous:{title:"Utils library",permalink:"/forms/addons/create/utils-library"},next:{title:"Add-on boilerplate",permalink:"/forms/addons/create/addon-boilerplate"}},a={},c=[{value:"Add-on naming convention",id:"add-on-naming-convention",level:2},{value:"Add-on trigger action",id:"add-on-trigger-action",level:2},{value:"Add-on dependency",id:"add-on-dependency",level:2},{value:"Adding custom JavaScript in your add-on",id:"adding-custom-javascript-in-your-add-on",level:2},{value:"Adding custom CSS or JavaScript in your add-on",id:"adding-custom-css-or-javascript-in-your-add-on",level:2},{value:"Adding custom Blocks in your add-on",id:"adding-custom-blocks-in-your-add-on",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"add-on-naming-convention",children:"Add-on naming convention"}),"\n",(0,i.jsxs)(e.p,{children:["When creating a new add-on, you should follow the naming convention. The name of the add-on should be in the format ",(0,i.jsx)(e.code,{children:"eightshift-forms-addon-<addon-name>"}),". For example, if you are creating an add-on for computed fields, the name of the add-on should be ",(0,i.jsx)(e.code,{children:"eightshift-forms-addon-computed-fields"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["Based on the this example add-on plugin folder name should be ",(0,i.jsx)(e.code,{children:"eightshift-forms-addon-computed-fields"})," and the main file should be ",(0,i.jsx)(e.code,{children:"eightshift-forms.php"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"add-on-trigger-action",children:"Add-on trigger action"}),"\n",(0,i.jsxs)(e.p,{children:["In order to be sure that your add-on is loaded after the main plugin is loaded, you need to have trigger the add-on plugin main plugin action on the custom action hook. This is done by adding the following code to the ",(0,i.jsx)(e.code,{children:"main.php"})," file and the action name is ",(0,i.jsx)(e.code,{children:"es_forms_loaded"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"/**\n\t * Register the project with the WordPress system.\n\t *\n\t * The register_service method will call the register() method in every service class,\n\t * which holds the actions and filters - effectively replacing the need to manually add\n\t * them in one place.\n\t *\n\t * @return void\n\t */\n\tpublic function register(): void\n\t{\n\t\t// Hook all plugin features in a custom hook name to make sure it's called after the main plugin is loaded.\n\t\t\\add_action('es_forms_loaded', [$this, 'registerServices']);\n\t}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"add-on-dependency",children:"Add-on dependency"}),"\n",(0,i.jsx)(e.p,{children:"In order to ensure that your add-on is working properly, you need to have the main plugin installed. When you uninstall the main plugin, all add-ons should be uninstalled as well. Also you will not be able to activate the add-on if the main plugin is not installed."}),"\n",(0,i.jsxs)(e.p,{children:["To make sure that the user gets the notification that the main plugin is not active, you need to add the following code to the ",(0,i.jsx)(e.code,{children:"main.php"})," file."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"use EightshiftFormsAddonComputedFields\\Config\\Config;\nuse EightshiftFormsAddonComputedFieldsVendor\\EightshiftFormsUtils\\Main\\UtilsMain;\n\n/**\n\t * Register the project with the WordPress system.\n\t *\n\t * @return void\n\t */\n\tpublic function register(): void\n\t{\n\t\t// Check if main plugin is active.\n\t\t\\add_action('admin_init', [$this, 'checkAddonPlugins']);\n\t\t\\add_action('admin_notices', [$this, 'checkAddonPluginsNotice']);\n\t}\n\n\t/**\n\t * Check if main plugin is active.\n\t *\n\t * @return void\n\t */\n\tpublic function checkAddonPlugins(): void\n\t{\n\t\tUtilsMain::checkAddonPlugins(Config::PLUGIN_FULL_NAME);\n\t}\n\n\t/**\n\t * Check if main plugin is active if not set a notice.\n\t *\n\t * @return void\n\t */\n\tpublic function checkAddonPluginsNotice(): void\n\t{\n\t\tUtilsMain::checkAddonPluginsNotice(\\esc_html__('Computed Field', 'eightshift-forms-addon-computed-fields'));\n\t}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"adding-custom-javascript-in-your-add-on",children:"Adding custom JavaScript in your add-on"}),"\n",(0,i.jsx)(e.p,{children:"If you need to add custom JavaScript to your add-on, you should use forms store and events for triggering you custom JavaScript."}),"\n",(0,i.jsxs)(e.p,{children:["Documentation for forms store and events can be found ",(0,i.jsx)(e.a,{href:"/forms/javascript/state/store",children:"here"})," and ",(0,i.jsx)(e.a,{href:"/forms/javascript/events/available-events",children:"here"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["Another thing to consider is that, by default, the main form JavaScript is loaded before the add-on JavaScript and you will not be able to add event listeners. To fix this you need to add script dependency in your ",(0,i.jsx)(e.code,{children:"Enqueue"})," folder classes."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Enqueue/Admin/EnqueueAdmin.php"})," - for admin scripts."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Enqueue/Admin/EnqueueBlocks.php"})," - for block editor and frontend scripts."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example: Enqueue/Admin/EnqueueAdmin.php"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"/**\n\t * Register all the hooks\n\t *\n\t * @return void\n\t */\n\tpublic function register(): void\n\t{\n\t\t// Make add-on scripts fired before main plugin scripts.\n\t\t\\add_filter(UtilsHooksHelper::getFilterName(['scripts', 'dependency', 'admin']), [$this, 'getScriptsDependency']);\n\t}\n\n\t/**\n\t * Make add-on scripts fired before main plugin scripts.\n\t *\n\t * @return array<int, string>\n\t */\n\tpublic function getScriptsDependency(): array\n\t{\n\t\treturn [\n\t\t\t$this->getAdminScriptHandle(),\n\t\t];\n\t}\n\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example: Enqueue/Admin/EnqueueBlocks.php"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"/**\n\t * Register all the hooks\n\t *\n\t * @return void\n\t */\n\tpublic function register(): void\n\t{\n\t\t// Make add-on scripts fired before main plugin scripts.\n\t\t\\add_filter(UtilsHooksHelper::getFilterName(['scripts', 'dependency', 'blocksEditor']), [$this, 'getScriptsDependency']);\n\t}\n\n\t/**\n\t * Make add-on scripts fired before main plugin scripts.\n\t *\n\t * @return array<int, string>\n\t */\n\tpublic function getScriptsDependency(): array\n\t{\n\t\treturn [\n\t\t\t$this->getBlockEditorScriptsHandle(),\n\t\t];\n\t}\n\n"})}),"\n",(0,i.jsx)(e.h2,{id:"adding-custom-css-or-javascript-in-your-add-on",children:"Adding custom CSS or JavaScript in your add-on"}),"\n",(0,i.jsxs)(e.p,{children:["If you need to add custom CSS or JavaScript to your add-on, you should change webpack configuration to include your custom files and add custom ",(0,i.jsx)(e.code,{children:"output.library"})," name to avoid conflicts with the main plugin."]}),"\n",(0,i.jsx)(e.h2,{id:"adding-custom-blocks-in-your-add-on",children:"Adding custom Blocks in your add-on"}),"\n",(0,i.jsxs)(e.p,{children:["If you need to add custom blocks to your add-on, you should use the ",(0,i.jsx)(e.code,{children:"Blocks"})," folder and the ",(0,i.jsx)(e.code,{children:"Blocks/Blocks.php"})," file."]}),"\n",(0,i.jsx)(e.p,{children:"With this function we are overriding the allowed blocks list and providing the add-on block to be used in the block editor."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"\t/**\n\t * Register all the hooks\n\t *\n\t * @return void\n\t */\n\tpublic function register(): void\n\t{\n\t\t// Register all utility hooks.\n\t\tparent::register();\n\n\t\t// Override the allowed blocks list and provide add-on block.\n\t\t\\add_filter(UtilsHooksHelper::getFilterName(['blocks', 'allowedBlocks']), [$this, 'getAddonBlocks']);\n\t}\n\n\t/**\n\t * Override the allowed blocks list and provide add-on block.\n\t *\n\t * @return array<int, string> List of blocks.\n\t */\n\tpublic function getAddonBlocks(): array\n\t{\n\t\treturn [\n\t\t\t'eightshift-forms-addon-computed-fields/computed-fields-result',\n\t\t]\n\t}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var i=t(96540);const d={},o=i.createContext(d);function s(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:s(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);