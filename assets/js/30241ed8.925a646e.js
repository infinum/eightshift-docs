"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[27848],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98615:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),l=["components"],s={id:"columns-post-type",title:"Post Type"},i=void 0,c={unversionedId:"legacy/v4/guides/columns-post-type",id:"legacy/v4/guides/columns-post-type",title:"Post Type",description:"docs-source",source:"@site/docs/legacy/v4/guides/columns-post-type.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/columns-post-type",permalink:"/docs/legacy/v4/guides/columns-post-type",draft:!1,tags:[],version:"current",frontMatter:{id:"columns-post-type",title:"Post Type"},sidebar:"docs",previous:{title:"Route Example",permalink:"/docs/legacy/v4/guides/rest-route-example"},next:{title:"Taxonomy",permalink:"/docs/legacy/v4/guides/columns-taxonomy"}},u={},p=[{value:"Example:",id:"example",level:2}],m={toc:p},d="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)(d,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-libs/tree/v2.0.0/src/columns/class-base-post-type-columns.php"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"}))),(0,a.kt)("p",null,"Post Type Column class is located in ",(0,a.kt)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it use ",(0,a.kt)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Columns\\Base_Post_Type_Columns")," class."),(0,a.kt)("h2",{id:"example"},"Example:"),(0,a.kt)("p",null,"To create custom column:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"make a new class ",(0,a.kt)("inlineCode",{parentName:"li"},"src/columns/class-example-column.php"),"."),(0,a.kt)("li",{parentName:"ol"},"implement all the methods provided in the example."),(0,a.kt)("li",{parentName:"ol"},"register the class inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"class-main.php")," file."),(0,a.kt)("li",{parentName:"ol"},"dump autoload.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * Example_Column class file\n *\n * @since 1.1.0\n * @package Eightshift_Boilerplate\\Columns\n */\n\ndeclare( strict_types=1 );\n\nnamespace Eightshift_Boilerplate\\Columns;\n\n/**\n * Class Example_Column.\n */\nclass Example_Column extends Base_Post_Columns {\n\n  /**\n   * Column name constant name.\n   *\n   * @var string\n   */\n  const COLUMN_NAME = 'example';\n\n  /**\n   * Get the slug of the post type where the additional column should appear.\n   *\n   * @return array The name of the post type.\n   */\n  protected function get_post_type_slug() : array {\n    return [ 'post' ];\n  }\n\n  /**\n   * Add additional post columns to the columns array.\n   *\n   * @param array $columns The existing column names array with default post columns (title, author, date etc.).\n   * @return array         Modified column names array.\n   */\n  public function add_column_name( array $columns ) : array {\n    $columns[ static::COLUMN_NAME ] = esc_html__( 'Example', 'eightshift-boilerplate' );\n\n    return $columns;\n  }\n\n  /**\n   * Render the post column content in the custom post column\n   *\n   * @param  string $column_name The name of the column to display.\n   * @param  int    $post_id     The current post ID.\n   * @return void\n   */\n  public function render_column_content( string $column_name, int $post_id ) : void {\n    if ( $column_name === static::COLUMN_NAME ) {\n      echo 'column value';\n    }\n  }\n}\n")))}f.isMDXComponent=!0}}]);