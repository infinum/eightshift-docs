"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[33418],{41367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=t(74848),s=t(28453);const o={id:"intro",title:"Intro"},r=void 0,d={id:"addons/premium/computed-fields/intro",title:"Intro",description:"Computed Fields add-on provides the ability to do more advanced calculations and complex logic using a custom, PHP-based programming language. Multiple output variables can be set to further customize the output.",source:"@site/forms/addons/premium/computed-fields/intro.md",sourceDirName:"addons/premium/computed-fields",slug:"/addons/premium/computed-fields/intro",permalink:"/forms/addons/premium/computed-fields/intro",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"intro",title:"Intro"},sidebar:"forms",previous:{title:"Intro",permalink:"/forms/addons/premium/intro"},next:{title:"How to use?",permalink:"/forms/addons/premium/computed-fields/how-to-use"}},c={},l=[{value:"What are Computed Fields?",id:"what-are-computed-fields",level:2},{value:"Supported features and tokens",id:"supported-features-and-tokens",level:2},{value:"Notably missing or different",id:"notably-missing-or-different",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Computed Fields add-on provides the ability to do more advanced calculations and complex logic using a custom, PHP-based programming language. Multiple output variables can be set to further customize the output."}),"\n",(0,i.jsx)(n.h2,{id:"what-are-computed-fields",children:"What are Computed Fields?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Forms computed language"})," (FCL) is a subset of PHP designed to be safe to execute when the code entered is arbitrary user input, while allowing users to manipulate variables, use flow control features and run functions."]}),"\n",(0,i.jsxs)(n.p,{children:["It relies on ",(0,i.jsx)(n.code,{children:"@nikic/php-parser"})," to produce an abstract syntax tree, and implements a ",(0,i.jsx)(n.code,{children:"virtual machine"})," for evaluating a subset of PHP tokens in a safe manner in PHP."]}),"\n",(0,i.jsx)(n.h2,{id:"supported-features-and-tokens",children:"Supported features and tokens"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Basic variables (numeric, boolean and string types)"}),"\n",(0,i.jsx)(n.li,{children:"Fetching constants from PHP"}),"\n",(0,i.jsxs)(n.li,{children:["Arithmetic and logical operators (",(0,i.jsx)(n.code,{children:"+, -, /, *, !, &&, ||"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Assignment operators (",(0,i.jsx)(n.code,{children:"+=, .= etc."}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Comparison operators (",(0,i.jsx)(n.code,{children:"<, <=, =="}),"), string concatenation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"if/elseif/else"})," blocks"]}),"\n",(0,i.jsxs)(n.li,{children:["The ternary ",(0,i.jsx)(n.code,{children:"if ? then : else"})," operator"]}),"\n",(0,i.jsxs)(n.li,{children:["Unary plus and minus (e.g. ",(0,i.jsx)(n.code,{children:"-1, +1"})," are valid)"]}),"\n",(0,i.jsxs)(n.li,{children:["Function calls to FCL-provided functions (",(0,i.jsx)(n.code,{children:"currently"}),", ",(0,i.jsx)(n.code,{children:"countSelectedItems"}),", ",(0,i.jsx)(n.code,{children:"round"})," and ",(0,i.jsx)(n.code,{children:"isSelected"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"notably-missing-or-different",children:"Notably missing or different"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Arrays can't be defined or manipulated with using FCL, apart from arrays that are defined during VM initialization (which can be counted and checked to see if an entry exists)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"++"}),", ",(0,i.jsx)(n.code,{children:"--"})," and ",(0,i.jsx)(n.code,{children:"==="})," operators"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"switch"})," and ",(0,i.jsx)(n.code,{children:"match"})," blocks"]}),"\n",(0,i.jsx)(n.li,{children:"User-defined functions"}),"\n",(0,i.jsx)(n.li,{children:"OOP and namespaces"}),"\n",(0,i.jsx)(n.li,{children:"References and unpacking"}),"\n",(0,i.jsxs)(n.li,{children:["Superglobals (",(0,i.jsx)(n.code,{children:"$_GET"})," etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:["Output to ",(0,i.jsx)(n.code,{children:"stdout"}),", files etc. (you can not echo anything)"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);