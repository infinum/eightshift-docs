"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[94908],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||o;return n?r.createElement(d,s(s({ref:t},c),{},{components:n})):r.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},34853:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={id:"rest-route-example",title:"Route Example"},l=void 0,u={unversionedId:"legacy/v4/guides/rest-route-example",id:"legacy/v4/guides/rest-route-example",title:"Route Example",description:"docs-source",source:"@site/docs/legacy/v4/guides/rest-routes-example.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/rest-route-example",permalink:"/docs/legacy/v4/guides/rest-route-example",draft:!1,tags:[],version:"current",frontMatter:{id:"rest-route-example",title:"Route Example"},sidebar:"docs",previous:{title:"Field Example",permalink:"/docs/legacy/v4/guides/rest-field-example"},next:{title:"Post Type",permalink:"/docs/legacy/v4/guides/columns-post-type"}},c={},p=[{value:"Example:",id:"example",level:2},{value:"Test in action",id:"test-in-action",level:3}],m={toc:p},f="wrapper";function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)(f,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/infinum/eightshift-libs/tree/master/src/rest"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"}))),(0,o.kt)("p",null,"To implement the new Rest API Route, you would need to do a few things, but for this example, we will use this folder structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\n* src\n  * class-main.php\n  * rest\n    * class-example-route.php\n\n")),(0,o.kt)("p",null,"REST Route class is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it, use ",(0,o.kt)("inlineCode",{parentName:"p"},"use Eightshift_Libs\\Rest\\Base_Route")," class. This is an abstract class."),(0,o.kt)("h2",{id:"example"},"Example:"),(0,o.kt)("p",null,"To create custom REST Route:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"make a new class ",(0,o.kt)("inlineCode",{parentName:"li"},"src/rest-routes/routes/class-example-route.php"),"."),(0,o.kt)("li",{parentName:"ol"},"implement all the methods provided in the example."),(0,o.kt)("li",{parentName:"ol"},"register the class inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"class-main.php")," file."),(0,o.kt)("li",{parentName:"ol"},"dump autoload.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n/**\n * The class register route for example endpoint\n *\n * @package Eightshift_Boilerplate\\Rest\n */\n\nnamespace Eightshift_Boilerplate\\Rest;\n\nuse Eightshift_Libs\\Rest\\Base_Route;\nuse Eightshift_Libs\\Rest\\Callable_Route;\nuse Eightshift_Libs\\Core\\Config_Data;\n\n/**\n * Class Example_Route\n */\nclass Example_Route extends Base_Route implements Callable_Route {\n\n  /**\n   * Route slug\n   *\n   * @var string\n   */\n  const ENDPOINT_SLUG = '/custom-route-slug';\n\n  /**\n   * Instance variable of project config data.\n   *\n   * @var object\n   */\n  protected $config;\n\n  /**\n   * Create a new instance that injects classes\n   *\n   * @param Config_Data $config Inject config which holds data regarding project details.\n   */\n  public function __construct( Config_Data $config ) {\n    $this->config = $config;\n  }\n\n  /**\n   * Method that returns project Route namespace.\n   *\n   * @return string Project namespace for REST route.\n   */\n  protected function get_namespace() : string {\n    return $this->config->get_project_routes_namespace();\n  }\n\n  /**\n   * Method that returns project route version.\n   *\n   * @return string Route version as a string.\n   */\n  protected function get_version() : string {\n    return $this->config->get_project_routes_version();\n  }\n\n  /**\n   * Get the base url of the route\n   *\n   * @return string The base URL for route you are adding.\n   */\n  protected function get_route_name() : string {\n    return static::ENDPOINT_SLUG;\n  }\n\n  /**\n   * Get callback arguments array\n   *\n   * @return array Either an array of options for the endpoint, or an array of arrays for multiple methods.\n   */\n  protected function get_callback_arguments() : array {\n    return [\n      'methods'  => static::READABLE,\n      'callback' => [ $this, 'route_callback' ],\n    ];\n  }\n\n  /**\n   * Method that returns rest response\n   *\n   * @param  \\WP_REST_Request $request Data got from enpoint url.\n   *\n   * @return WP_REST_Response|mixed If response generated an error, WP_Error, if response\n   *                                is already an instance, WP_HTTP_Response, otherwise\n   *                                returns a new WP_REST_Response instance.\n   */\n  public function route_callback( \\WP_REST_Request $request ) {\n\n    return \\rest_ensure_response( 'output data' );\n  }\n}\n\n")),(0,o.kt)("h3",{id:"test-in-action"},"Test in action"),(0,o.kt)("p",null,"To test it in action for default boilerplate the link would be:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"domain.ext/wp-json/eightshift-boilerplate/v1/custom-route-slug"),"."),(0,o.kt)("p",null,"This link will be different based on your project implementation inside ",(0,o.kt)("inlineCode",{parentName:"p"},"src/class-config.php"),"."))}d.isMDXComponent=!0}}]);