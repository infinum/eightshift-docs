"use strict";(self.webpackChunk_eightshift_docs=self.webpackChunk_eightshift_docs||[]).push([[1032],{3940:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(74848),r=t(28453);const o={id:"rest-route-example",title:"Route Example"},i=void 0,a={id:"legacy/v4/guides/rest-route-example",title:"Route Example",description:"docs-source",source:"@site/docs/legacy/v4/guides/rest-routes-example.md",sourceDirName:"legacy/v4/guides",slug:"/legacy/v4/guides/rest-route-example",permalink:"/docs/legacy/v4/guides/rest-route-example",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"rest-route-example",title:"Route Example"},sidebar:"docs",previous:{title:"Field Example",permalink:"/docs/legacy/v4/guides/rest-field-example"},next:{title:"Post Type",permalink:"/docs/legacy/v4/guides/columns-post-type"}},c={},l=[{value:"Example:",id:"example",level:2},{value:"Test in action",id:"test-in-action",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/infinum/eightshift-libs/tree/master/src/rest",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"})})}),"\n",(0,s.jsx)(n.p,{children:"To implement the new Rest API Route, you would need to do a few things, but for this example, we will use this folder structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"\n* src\n  * class-main.php\n  * rest\n    * class-example-route.php\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["REST Route class is located in ",(0,s.jsx)(n.code,{children:"Eightshift Libs"}),". To extend it, use ",(0,s.jsx)(n.code,{children:"use Eightshift_Libs\\Rest\\Base_Route"})," class. This is an abstract class."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(n.p,{children:"To create custom REST Route:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["make a new class ",(0,s.jsx)(n.code,{children:"src/rest-routes/routes/class-example-route.php"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"implement all the methods provided in the example."}),"\n",(0,s.jsxs)(n.li,{children:["register the class inside the ",(0,s.jsx)(n.code,{children:"class-main.php"})," file."]}),"\n",(0,s.jsx)(n.li,{children:"dump autoload."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"<?php\n/**\n * The class register route for example endpoint\n *\n * @package Eightshift_Boilerplate\\Rest\n */\n\nnamespace Eightshift_Boilerplate\\Rest;\n\nuse Eightshift_Libs\\Rest\\Base_Route;\nuse Eightshift_Libs\\Rest\\Callable_Route;\nuse Eightshift_Libs\\Core\\Config_Data;\n\n/**\n * Class Example_Route\n */\nclass Example_Route extends Base_Route implements Callable_Route {\n\n  /**\n   * Route slug\n   *\n   * @var string\n   */\n  const ENDPOINT_SLUG = '/custom-route-slug';\n\n  /**\n   * Instance variable of project config data.\n   *\n   * @var object\n   */\n  protected $config;\n\n  /**\n   * Create a new instance that injects classes\n   *\n   * @param Config_Data $config Inject config which holds data regarding project details.\n   */\n  public function __construct( Config_Data $config ) {\n    $this->config = $config;\n  }\n\n  /**\n   * Method that returns project Route namespace.\n   *\n   * @return string Project namespace for REST route.\n   */\n  protected function get_namespace() : string {\n    return $this->config->get_project_routes_namespace();\n  }\n\n  /**\n   * Method that returns project route version.\n   *\n   * @return string Route version as a string.\n   */\n  protected function get_version() : string {\n    return $this->config->get_project_routes_version();\n  }\n\n  /**\n   * Get the base url of the route\n   *\n   * @return string The base URL for route you are adding.\n   */\n  protected function get_route_name() : string {\n    return static::ENDPOINT_SLUG;\n  }\n\n  /**\n   * Get callback arguments array\n   *\n   * @return array Either an array of options for the endpoint, or an array of arrays for multiple methods.\n   */\n  protected function get_callback_arguments() : array {\n    return [\n      'methods'  => static::READABLE,\n      'callback' => [ $this, 'route_callback' ],\n    ];\n  }\n\n  /**\n   * Method that returns rest response\n   *\n   * @param  \\WP_REST_Request $request Data got from enpoint url.\n   *\n   * @return WP_REST_Response|mixed If response generated an error, WP_Error, if response\n   *                                is already an instance, WP_HTTP_Response, otherwise\n   *                                returns a new WP_REST_Response instance.\n   */\n  public function route_callback( \\WP_REST_Request $request ) {\n\n    return \\rest_ensure_response( 'output data' );\n  }\n}\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-in-action",children:"Test in action"}),"\n",(0,s.jsx)(n.p,{children:"To test it in action for default boilerplate the link would be:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"domain.ext/wp-json/eightshift-boilerplate/v1/custom-route-slug"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This link will be different based on your project implementation inside ",(0,s.jsx)(n.code,{children:"src/class-config.php"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);